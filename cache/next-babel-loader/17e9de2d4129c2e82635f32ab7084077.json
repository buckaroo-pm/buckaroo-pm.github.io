{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/home/gaetano/projects/buckaroo-pm.github.io/layouts/index';\nexport const frontMatter = {\n  title: 'Why Not Make?',\n  summary: 'Make is a conceptually simple build-system, and it is packaged with major Linux distributions. However, Make should rarely be your build-system of choice when starting a new C++ project.',\n  banner: '/posts/why-not-make.jpeg',\n  attribution: '“blue building block lot” by Iker Urteaga on Unsplash',\n  author: 'Team Buckaroo',\n  created: '2018-11-07T11:00:00.000Z',\n  __resourcePath: 'blog/announcing-buildinfer-for-c.md',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Make is a conceptually simple build-system, and it is packaged with major Linux distributions. However, Make should rarely be your build-system of choice when starting a new C++ project.`), mdx(\"p\", null, `That’s a bold claim, so here’s why…`), mdx(\"h3\", null, `Writing a Large, Correct Makefile is Really Hard`), mdx(\"p\", null, `The dependency graph of a C++ library is actually quite complex. It must be rebuilt every time a linked object-file changes… But an object-file should be rebuilt every time its translation-unit changes, or the compilation flags change, or if any of its included headers change, or if the compiler changes…`), mdx(\"p\", null, `You can query this information using the compiler and encode all of this in a Makefile, but it’s going to get really verbose.`), mdx(\"p\", null, `There’s a high chance that you will miss a dependency. If this happens, then you might have stale artefacts after a change. Cue a clean build!`), mdx(\"h3\", null, `No Sandboxing`), mdx(\"p\", null, `The lack of sandboxing is the root problem. Make has a dependency graph, but it does not actually enforce it. What this means is that a build-rule can read a file even if it is not declared as a dependency in Make!`), mdx(\"h3\", null, `Caches are Not Portable`), mdx(\"p\", null, `Make does not allow you to share build artefacts across a network, so everyone on your development team will be performing the same build-steps over and over!`), mdx(\"p\", null, `Yes, you can use CCache, but that is not general (only compiler calls are cached) and it isn’t provided out-of-the-box.`), mdx(\"h3\", null, `No Language Abstractions are Provided`), mdx(\"p\", null, `Make’s simplicity is a big strength, but it is also a major weakness. Make doesn’t provide any language-specific abstractions, so you have to write them yourself. This can get very tedious, and the odds of making a mistake are high.`), mdx(\"p\", null, `This also goes for tests, deployments and so on. You need to build everything yourelf.`), mdx(\"h3\", null, `Timestamps, Not Hashes`), mdx(\"p\", null, `In determining when to rebuild, Make uses the timestamps of build inputs rather than their hashes. This results in many unnecessary rebuilds when a file has been touched, but has not actually changed. If this happens deep in the dependency tree, then the rebuild will take a long time!`), mdx(\"h2\", null, `So When Should You Use Make?`), mdx(\"p\", null, `It’s not all bad; Make still has its place as a bootstrapping tool. If you have extreme dependency requirements (for example you are building Linux from source), then you need something simple and self-contained. But for most developers this just isn’t the case. We already fetch Clang, GCC and Visual Studio as prebuilt binaries, so why not download a prebuilt build-system?`), mdx(\"h2\", null, `Since You’re Here…`), mdx(\"p\", null, `We recently announced `, mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://buildinfer.loopperfect.com/\"\n  }), `BuildInfer`), `, a new tool to optimize your C/C++ build scripts. `, mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://buildinfer.loopperfect.com/\"\n  }), `Take a look`), `!`), mdx(\"p\", null, mdx(\"img\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2000/1*pkwieX1RSK5S0LXbFyaEJg.png\",\n    \"alt\": null\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}