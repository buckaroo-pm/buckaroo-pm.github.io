{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/home/gaetano/projects/buckaroo-pm.github.io/layouts/index';\nexport var frontMatter = {\n  title: 'Experimenting with Small Buffer Optimization for C++ Lambdas',\n  banner: '/posts/smallfun.jpeg',\n  author: 'Team Buckaroo',\n  created: '2017-09-19T11:00:00.000Z',\n  attribution: 'Photo by Pascal Richier on Unsplash',\n  __resourcePath: 'blog/experimenting-with-smallbuffer-optimization.md',\n  __scans: {},\n  layout: 'index'\n};\nvar layoutProps = {\n  frontMatter: frontMatter\n};\nvar MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We implemented SmallFun, an alternative to std::function, which implements \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fixed-size capture optimization\"), \" (a form of small buffer optimization). Whilst SmallFun is a bit less generic than std::function, it is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3\\u20135x faster\"), \" in some benchmarks.\"), mdx(\"p\", null, \"You can \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/LoopPerfect/smallfunction\"\n  }), \"view the code on GitHub\"), \".\"), mdx(\"p\", null, mdx(\"img\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/3840/1*Q2X85fCAiULppjBiV9SC5A.jpeg\",\n    \"alt\": \"Photo by [Pascal Richier](https://unsplash.com/photos/ECju13NcBzg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Photo by \", mdx(\"a\", _objectSpread({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://unsplash.com/photos/ECju13NcBzg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\n  }), \"Pascal Richier\"), \" on \", mdx(\"a\", _objectSpread({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\n  }), \"Unsplash\"))), mdx(\"h2\", null, \"Background\"), mdx(\"p\", null, \"std::function is a convenient way to store lambdas with closures (also known as captures), whilst providing a unified interface. If you are coming from the OOP world, then it might be helpful to understand them as a generalization of the \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Strategy_pattern\"\n  }), \"strategy pattern\"), \".\"), mdx(\"p\", null, \"Before std::function and lambdas, we would create a hand-crafted functor object like this:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Functor\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// The context, or capture\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// For example, an int and an unsigned\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"unsigned\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// The lambda\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"operator\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// For example, a small math function\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" j \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"This repository compares std::function, the hand-crafted Functor and SmallFun. We find that SmallFun performs better then std::function by being slighly less generic.\"), mdx(\"h2\", null, \"The Missed Opportunity of std::function\"), mdx(\"p\", null, \"std::function uses a \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.cppreference.com/w/cpp/language/pimpl\"\n  }), \"PImpl pattern\"), \" to provide an unified interface aross all functors for a given signature.\"), mdx(\"p\", null, \"For example, these two instances f and g have the same size, despite having different captures:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" x \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"2\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" y \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"9\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" z \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"4\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// f captures nothing\"), \"\\nstd\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"function\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" f \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// g captures x, y and z\"), \"\\nstd\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"function\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" g \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"x \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" z\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" y\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"This is because std::function stores the capture on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"heap\"), \". This unifies the size of all instances, but it is also an opportunity for optimization!\"), mdx(\"h2\", null, \"How?\"), mdx(\"p\", null, \"Instead of dynamically allocating memory on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"heap\"), \", we can place the function object (including its virtual table) into a preallocated location on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stack\"), \".\"), mdx(\"p\", null, \"This is how we implemented SmallFun, which is used much like std::function:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// A SmallFun with a size of 64 bytes\"), \"\\nSmallFun\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"unsigned\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"64\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" f \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" j \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"h2\", null, \"Benchmarks\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Test\"), mdx(\"th\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Time\"), mdx(\"th\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Note\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"functor\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"191 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Baseline that's the best we could do: a hand-crafted functor\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf32\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"312 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"This is big enough to store 2 ints\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf64\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"369 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf128\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"346 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf256\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"376 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf512\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"503 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf1024\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"569 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sf2048\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"870 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"std::function\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1141 ns\"), mdx(\"td\", _objectSpread({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))))), mdx(\"h2\", null, \"The Test\"), mdx(\"p\", null, \"To test how quickly we can allocate and call functors, we will be saving all the many instances in a vector and executing them in a loop. The results are saved into another vector to ensure that the optimizer does not optimize away what we are testing.\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"stdFunction\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"benchmark\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"State\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" state\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"unsigned\"), \" N \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"100\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n \\n  std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"vector\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"function\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"unsigned\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">>\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"fs\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"vector\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"r\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"while\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"state\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"KeepRunning\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"++\"), \"i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      fs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// assign to the type-erased container\"), \"\\n        \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" i \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" j \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" N\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n      \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" j \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"transform\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"fs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"begin\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" fs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"end\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" r\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"begin\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"auto\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"f\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"j\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"++\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// eval the function objects\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\")), mdx(\"h2\", null, \"SmallFun Implementation Details\"), mdx(\"p\", null, \"To implement SmallFun, we need to combine three C++ patterns: \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akrzemi1.wordpress.com/2013/11/18/type-erasure-part-i/\"\n  }), \"type-erasure\"), \", \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.cppreference.com/w/cpp/language/pimpl\"\n  }), \"PImpl\"), \" and \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/222578/1256041\"\n  }), \"placement-new\"), \".\"), mdx(\"h3\", null, \"Type-erasure\"), mdx(\"p\", null, \"Type-erasure unifies many implementations into one interface. In our case, every lambda (or functor) has a custom call operator and destructor. We need to automatically generate an implementation for any type the API consumer will be using.\"), mdx(\"p\", null, \"This shall be our public interface:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Concept\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" ReturnType \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"operator\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" ReturnType \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"operator\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"~\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Concept\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"And for any callable type with a given signature:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"F\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Model\"), \" final \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" Concept\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \\n  F f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Model\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"F \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"f\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n    \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" ReturnType \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"operator\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"f\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" ReturnType \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"operator\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"f\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"~\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Model\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"Now we can use it the following way:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"auto\"), \" lambda \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), \" x\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" x\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"using\"), \" lambdaType \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"decltype\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"lambda\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\nSFConcept\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" functor \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" Model\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"lambdaType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"lambda\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"This is quite cumbersome and error prone. The next step will be a container.\"), mdx(\"h3\", null, \"PImpl\"), mdx(\"p\", null, \"PImpl seperates, hides, manages the lifetime of an actual implementation and exposes a limited public API.\"), mdx(\"p\", null, \"A straightforward implementation could look like this:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Function\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"shared_ptr\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"Concept\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">>\"), \" pimpl\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Function\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"F\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Function\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"F \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"pimpl\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" SFModel\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"F\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// heap allocation\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"~\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Function\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"default\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"This is more or less how std::function is implemented.\"), mdx(\"p\", null, \"So how do we remove the heap allocation?\"), mdx(\"h3\", null, \"Placement-new\"), mdx(\"p\", null, \"Placement-new allocates memory at a given address. For example:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), \" memorypool\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"64\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" a \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"memorypool\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"4\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" b \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"memorypool \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"sizeof\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"4\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"4\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"assert\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"a\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"==\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"memorypool\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"assert\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"b\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"==\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"memorypool\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"32\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"h3\", null, \"Putting it All Together\"), mdx(\"p\", null, \"Now we only need to do minor changes to remove the heap allocation:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"SmallFun\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), \" memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"SIZE\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"F\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"SmallFun\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"F \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" Model\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"F\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"assert\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"sizeof\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Model\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"F\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \" SIZE \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"~\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"SmallFun\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"allocated\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"concept\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \"memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"->\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"~\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"concept\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \" \\n\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\")), mdx(\"p\", null, \"As you may noticed, if the Model<...>\\u2019s size is greater than SIZE, bad things will happen! An assert will only catch this at run-time, when it is to late\\u2026 Luckily, this can be caught at compile-time using enable_if_t.\"), mdx(\"p\", null, \"But first, what about the copy constructor?\"), mdx(\"h3\", null, \"Copy Constructor\"), mdx(\"p\", null, \"Unlike the implementation of std::function, we cannot just copy or move a std::shared_ptr. We also cannot just copy bitwise the memory, since the lambda may manage a resource that can only be released once due to a side-effect. Therefore, we need to make the model able to copy-construct itself for a given memory location.\"), mdx(\"p\", null, \"We just need to add:\"), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// ...\"), \"\\n\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"virtual\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"copy\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"void\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" Model\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"F\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" ReturnType\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"f\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"template\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"unsigned\"), \" rhsSize\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" std\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"::\"), \"enable_if_t\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"rhsSize \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<=\"), \" size\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"bool\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"SmallFun\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"SmallFun\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ReturnType\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"Xs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" rhsSize\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"const\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"&\"), \" rhs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    rhs\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"copy\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"memory\", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n \\n  \", mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// ...\"), \"\\n\")), mdx(\"h2\", null, \"Further Remarks\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"As we saw, we can verify at compile-time if a Lambda will fit in our memory. If it does not, we could provide a fallback to heap allocation.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A more generic implementation of SmallFun would take a generic allocator.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We noticed that we cannot copy the memory just by copying the memory bitwise. However using type-traits, we could check if\\nthe underlying data-type is POD and then copy bitwise.\"))), mdx(\"h2\", null, \"Since You\\u2019re Here\\u2026\"), mdx(\"p\", null, \"We created \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/LoopPerfect/buckaroo\"\n  }), \"Buckaroo\"), \" to make it easier to integrate C++ libraries. If you would like try it out, the best place to start is \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://buckaroo.readthedocs.io/en/latest/\"\n  }), \"the documentation\"), \". You can browse the existing packages on \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://buckaroo.pm/\"\n  }), \"Buckaroo.pm\"), \" or request more over on \", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/LoopPerfect/buckaroo-wishlist\"\n  }), \"the wishlist\"), \".\\n\", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Approaches to C++ Dependency Management, or Why We Built Buckaroo\"), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"C++ is an unusual language in that it does not yet have a dominant package manager (we\\u2019re working on it!). As a result\\u2026\"), \"hackernoon.com\"), \"\\n\", mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hackernoon.com/error-handling-in-c-or-why-you-should-use-eithers-in-favor-of-exceptions-and-error-codes-f0640912eb45\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Error Handling in C++ or: Why You Should Use Eithers in Favor of Exceptions and Error-codes\"), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"TL;DR\"), \"hackernoon.com\")));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}