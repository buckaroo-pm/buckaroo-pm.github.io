{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '/home/gaetano/projects/buckaroo-pm.github.io/layouts/index';\nexport const frontMatter = {\n  title: 'A Tour of C++ 17: If Constexpr',\n  created: '2017-05-31T22:00:00.000Z',\n  author: 'Team Buckaroo',\n  banner: '/posts/tour2017.jpeg',\n  __resourcePath: 'blog/a-tour-of-cpp17-constexpr-if.md',\n  __scans: {},\n  layout: 'index'\n};\nconst layoutProps = {\n  frontMatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `We are excited to see that if-constexpr has made it into C++ 17! In this post, we will look at some C++ 14 code and show how we can make it simpler and more concise using this new language feature.`), mdx(\"h2\", null, `Introduction`), mdx(\"p\", null, `Before diving into `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), `, it might be useful to have a quick recap of constexpr. Introduced in C++ 11, constexpr is a keyword that marks an expression or function as having a `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `compile-time constant result`), `.`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `square`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), ` \n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `*`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `main`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `square`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `4`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `And, of course, this will optimized away by the compiler:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-nasm\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-nasm\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token label function\"\n  }), `main:`), ` \n    mov     `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token register variable\"\n  }), `eax`), `, `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `16`), `\n    ret\n`)), mdx(\"p\", null, `OK, so you might be wondering what the purpose of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` is. After all, isn’t the compiler smart enough to optimize functions like this, even when they are not marked as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), `?`), mdx(\"p\", null, `The real value of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` is as a `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `guarantee`), ` that the function will be computable at compile-time. This prevents nasty side-effects sneaking into your code as it evolves, and it allows the compiler to do some clever things:`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Unlike templates and preprocessor macros, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` allows for loops and recursion at compile-time without extreme boilerplate.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` functions can be used as regular functions, although internally they have greater restrictions.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` functions can easily be converted into regular functions as requirements change.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `constexpr`), ` functions compile much quicker than the equivalent template-based solutions, which scale linearly with the depth of the template-recursion.`))), mdx(\"h3\", null, `Compile-time Fibonacci`), mdx(\"p\", null, `As an example, take a look at these two compile-time implementations of the Fibonacci sequence:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Fibonacci`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `static`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` value `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` Fibonacci`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `+`), ` Fibonacci`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `2`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `static`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` value `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `static`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` value `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `main`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` Fibonacci`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `5`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `   \n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `?`), ` \n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `:`), ` \n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `x `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `+`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `x `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `2`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `main`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fibonacci`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `5`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"h3\", null, `So what is `, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, `if-constexpr`), `?`), mdx(\"p\", null, `In short, `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), ` extends the compile-time subset of the C++ language to include if-statements. What’s more, if a branch of the `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), ` is not hit, then it will not even be compiled.`), mdx(\"p\", null, `With `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), ` at your disposal, you don’t need to resort to elaborate meta-programming techniques like template pattern-matching and SFINAE.`), mdx(\"p\", null, `Let’s look at some examples.`), mdx(\"h2\", null, `Example 1 — getting the nth-arg`), mdx(\"p\", null, `Many template meta-programs operate on variadic-type-lists. In C++ 14, getting the nth-type of an argument lists is often implemented using complex templating:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Arg`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `X`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), `Xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `operator`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `X x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` Xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), `xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` Arg`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Arg`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `X`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), `Xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `operator`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `X x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` Xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` arg `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` Arg`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `// arg<2>(0, 1, 2, 3, 4, 5) == 2;`), `\n`)), mdx(\"p\", null, `C++ 17 makes this much more intuitive:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `unsigned`), ` n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `Get`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `X`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), `…Xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `operator`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `X x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` Xs…xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `if`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `sizeof`), `…`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `xs`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n     `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `else`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `if`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n     `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` Get`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `-`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `xs…`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `else`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n     `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`)), mdx(\"h2\", null, `Example 2 — API-shimming`), mdx(\"p\", null, `Sometimes you want to support an alternative API. C++ 14 provides an easy way to check if an object can be used in a certain way:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `T`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `supportsAPI`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `->`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `decltype`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `Method1`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `Method2`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` true_type`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `supportsAPI`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `->`), ` false_type `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `Then, implementing custom behaviour in C++ 14 can be done like this:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `T`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `compute`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `->`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `decltype`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), ` enable_if_t`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `supportsAPI`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `Method`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `T`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `compute`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `->`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `decltype`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), ` enable_if_t`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `!`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `supportsAPI`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `The C++17 equivalent is much less verbose:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `T`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `int`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `compute`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `if`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `supportsAPI`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `T`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `// only gets compiled if the condition is true`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` x`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `Method`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `else`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n   `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `0`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `This is very convenient as code that belongs semantically together is not scattered across multiple functions. Furthermore, you can even define lambdas containing `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), `.`), mdx(\"h2\", null, `Example 3 — Compile-time algorithm-picking`), mdx(\"p\", null, `Often you need to find the best algorithm based on the properties of a type. There are many solutions. For instance, the STL uses “type tags” to pick the right algorithm for some given iterators:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `FooTag`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `BarTag`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFF`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldBF`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldBB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `A`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `/* ... */`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `using`), ` tag `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` FooTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `B`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `/* ... */`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `using`), ` tag `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` BarTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fold`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `L l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` R r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` FooTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` BarTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `/* more dispatching functions*/`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fold`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `L l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` R r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fold`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` \n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `typename`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `typename`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `However, once you have more complex rules, you might need a more powerful solution — `, mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.cppreference.com/w/cpp/language/sfinae\"\n  }), `SFINAE`), `:`), mdx(\"p\", null, `C++ 14:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `struct`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `BazTag`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `:`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token base-clause\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `FooTag`), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `BarTag`)), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), `\n  enable_if_t`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `\n   is_same`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `L`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` FooTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `&&`), ` \n   is_base_of`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `R`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` BarTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fold`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `L l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` R r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `With** **C++ 17 you can describe these rules with less boilerplate and in a clearer way:`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-cpp\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `template`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `class`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `auto`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `fold`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `L l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` R r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `using`), ` lTag `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `typename`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `L`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `using`), ` rTag `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `typename`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), `R`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `tag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `if`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `is_base_of`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `rTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` BarTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `if`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `constexpr`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `is_same`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `<`), `lTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` FooTag`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `>`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `::`), `value`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n      `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `else`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n      `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldBB`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `l`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` r`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `else`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n    `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `return`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `foldFF`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), `\n`)), mdx(\"p\", null, `This is very practical as working with if-statements is more intuitive than using a variety of language-features.`), mdx(\"p\", null, `Refactoring meta-functions becomes as simple as ordinary code. With `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `if-constexpr`), `, worrying about ambiguous overloads and other unexpected complications is a thing of the past.`));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}