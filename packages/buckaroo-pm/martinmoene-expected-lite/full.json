{
  "packageName": "buckaroo-pm/martinmoene-expected-lite",
  "name": "martinmoene/expected-lite",
  "licence": "BSL-1.0",
  "description": "Expected objects for C++11 and later (and later perhaps C++98)",
  "readme": "expected lite - expected objects for C++11 and later\n====================================================\n[![Language](https://img.shields.io/badge/language-C++-blue.svg)](https://isocpp.org/)  [![Standard](https://img.shields.io/badge/c%2B%2B-11-blue.svg)](https://en.wikipedia.org/wiki/C%2B%2B#Standardization) [![License](https://img.shields.io/badge/license-BSL-blue.svg)](https://opensource.org/licenses/BSL-1.0) [![Build Status](https://travis-ci.org/martinmoene/expected-lite.svg?branch=master)](https://travis-ci.org/martinmoene/expected-lite) [![Build status](https://ci.appveyor.com/api/projects/status/sle31w7obrm8lhe1?svg=true)](https://ci.appveyor.com/project/martinmoene/expected-lite) [![Version](https://badge.fury.io/gh/martinmoene%2Fexpected-lite.svg)](https://github.com/martinmoene/expected-lite/releases) [![download](https://img.shields.io/badge/latest%20version%20%20-download-blue.svg)](https://raw.githubusercontent.com/martinmoene/expected-lite/master/include/nonstd/expected.hpp) [![Conan](https://img.shields.io/badge/conan-download-blue.svg)](https://bintray.com/martinmoene/nonstd-lite/expected-lite%3Anonstd-lite/_latestVersion) [![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](https://wandbox.org/permlink/bUsuVeJsKRr5Cw10)\n\n*expected lite* is a single-file header-only library for objects that either represent a valid value or an error that you can pass by value. It is intended for use with C++11 and later. The library is based on the [std:&#58;expected](https://github.com/viboes/std-make/blob/master/doc/proposal/expected/DXXXXR0_expected.pdf) proposal [1] .\n\n**Contents**  \n- [Example usage](#example-usage)\n- [In a nutshell](#in-a-nutshell)\n- [License](#license)\n- [Dependencies](#dependencies)\n- [Installation](#installation)\n- [Synopsis](#synopsis)\n- [Comparison with like types](#comparison)\n- [Reported to work with](#reported-to-work-with)\n- [Implementation notes](#implementation-notes)\n- [Other implementations of expected](#other-implementations-of-expected)\n- [Notes and references](#notes-and-references)\n- [Appendix](#appendix)\n\n\nExample usage\n-------------\n```C++\n#include \"expected.hpp\"\n\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nusing namespace nonstd;\nusing namespace std::literals;\n\nauto to_int( char const * const text ) -> expected<int, std::string> \n{\n    char * pos = nullptr;\n    auto value = strtol( text, &pos, 0 );\n\n    if ( pos != text ) return value;\n    else               return make_unexpected( \"'\"s + text + \"' isn't a number\" );\n}\n\nint main( int argc, char * argv[] )\n{\n    auto text = argc > 1 ? argv[1] : \"42\";\n\n    auto ei = to_int( text );\n\n    if ( ei ) std::cout << \"'\" << text << \"' is \" << *ei << \", \";\n    else      std::cout << \"Error: \" << ei.error();\n}\n```\n### Compile and run\n```\nprompt> g++ -std=c++14 -Wall -I../include/nonstd -o 01-basic.exe 01-basic.cpp && 01-basic.exe 123 && 01-basic.exe abc\n'123' is 123, Error: 'abc' isn't a number\n```\n\nIn a nutshell\n-------------\n**expected lite** is a single-file header-only library to represent value objects that either contain a valid value or an error. The library is a partly implementation of the  proposal for [std:&#58;expected](http://wg21.link/p0323) [1,2,3] for use with C++11 and later.\n\n**Some Features and properties of expected lite** are ease of installation (single header), default and explicit construction of an expected, construction and assignment from a value that is convertible to the underlying type, copy- and move-construction and copy- and move-assignment from another expected of the same type, testing for the presence of a value, operators for unchecked access to the value or the error (pointer or reference), value() and value_or() for checked access to the value, relational operators, swap() and various factory functions.\n\n*expected lite* shares the approach to in-place tags with [any-lite](https://github.com/martinmoene/any-lite), [optional-lite](https://github.com/martinmoene/optional-lite) and with [variant-lite](https://github.com/martinmoene/variant-lite) and these libraries can be used together.\n\n**Not provided** are reference-type expecteds. *expected lite* doesn't handle overloaded *address of* operators.\n\nFor more examples, see [1].\n\n\nLicense\n-------\n*expected lite* is distributed under the [Boost Software License](https://github.com/martinmoene/XXXX-lite/blob/master/LICENSE.txt).\n\n\nDependencies\n------------\n*expected lite* has no other dependencies than the [C++ standard library](http://en.cppreference.com/w/cpp/header).\n\n\nInstallation\n------------\n\n*expected lite* is a single-file header-only library. Put `expected.hpp` directly into the project source tree or somewhere reachable from your project.\n\n\nSynopsis\n--------\n\n**Contents**  \n- [Configuration macros](#configuration-macros)\n- [Types in namespace nonstd](#types-in-namespace-nonstd)  \n- [Interface of expected](#interface-of-expected)  \n- [Algorithms for expected](#algorithms-for-expected)  \n- [Interface of unexpected_type](#interface-of-unexpected_type)  \n- [Algorithms for unexpected_type](#algorithms-for-unexpected_type)  \n\n### Configuration macros\n\n\\-D<b>nsel\\_CONFIG\\_CONFIRMS\\_COMPILATION\\_ERRORS</b>=0  \nDefine this macro to 1 to experience the by-design compile-time errors of the library in the test suite. Default is 0.\n\n### Types in namespace nonstd\n\n| Purpose         | Type | Object |\n|-----------------|------|--------|\n| To be, or not   | template< typename T, typename E = std::exception_ptr ><br>class **expected**; |&nbsp;|\n| Error type      | template< typename E ><br>class **unexpected_type**; | &nbsp; |\n| Traits          | template< typename E ><br>struct **is_unexpected**;  | &nbsp; |\n| In-place value construction | struct **in_place_t**;            | in_place_t in_place{}; |\n| In-place error construction | struct **in_place_unexpected_t**; | in_place_unexpected_t<br>unexpect{}; |\n| In-place error construction | struct **in_place_unexpected_t**; | in_place_unexpected_t<br>in_place_unexpected{}; |\n| Error reporting             | class **bad_expected_access**;    |&nbsp; |\n\n### Interface of expected\n\n| Kind         | Method                                                              | Result |\n|--------------|---------------------------------------------------------------------|--------|\n| Construction | [constexpr] **expected**() noexcept(...)                                | an object with default value |\n| &nbsp;       | [constexpr] **expected**( expected const & other )                      | initialize to contents of other |\n| &nbsp;       | [constexpr] **expected**( expected && other )                           | move contents from other |\n| &nbsp;       | [constexpr] **expected**( value_type const & value )                    | initialize to value |\n| &nbsp;       | [constexpr] **expected**( value_type && value ) noexcept(...)           | move from value |\n| &nbsp;       | [constexpr] explicit **expected**( in_place_t, Args&&... args )         | construct value in-place from args |\n| &nbsp;       | [constexpr] explicit **expected**( in_place_t,<br>&emsp;std::initializer_list&lt;U> il, Args&&... args ) | construct value in-place from args |\n| &nbsp;       | [constexpr] **expected**( unexpected_type<E> const & error )            | initialize to error |\n| &nbsp;       | [constexpr] **expected**( unexpected_type<E> && error )                 | move from error |\n| &nbsp;       | [constexpr] explicit **expected**( in_place_unexpected_t,<br>&emsp;Args&&... args ) | construct error in-place from args |\n| &nbsp;       | [constexpr] explicit **expected**( in_place_unexpected_t,<br>&emsp;std::initializer_list&lt;U> il, Args&&... args )| construct error in-place from args |\n| Destruction  | ~**expected**()                                                         | destruct current content |\n| Assignment   | expected **operator=**( expected const & other )                        | assign contents of other;<br>destruct current content, if any |\n| &nbsp;       | expected & **operator=**( expected && other ) noexcept(...)             | move contents of other |\n| &nbsp;       | expected & **operator=**( U && v )                                      | move value from v |\n| &nbsp;       | expected & **operator=**( unexpected_type<E> const & u )                | initialize to unexpected |\n| &nbsp;       | expected & **operator=**( unexpected_type<E> && u )                     | move from unexpected |\n| &nbsp;       | template< typename... Args ><br>void **emplace**( Args &&... args )     | emplace from args |\n| &nbsp;       | template< typename U, typename... Args ><br>void **emplace**( std::initializer_list&lt;U> il, Args &&... args )  | emplace from args |\n| Swap         | void **swap**( expected & other ) noexcept                              | swap with other  |\n| Observers    | constexpr value_type const \\* **operator->**() const                    | pointer to current content (const);<br>must contain value |\n| &nbsp;       | value_type \\* **operator->**()                                          | pointer to current content (non-const);<br>must contain value |\n| &nbsp;       | constexpr value_type const & **operator \\***() const &                   | the current content (const ref);<br>must contain value |\n| &nbsp;       | constexpr value_type && **operator \\***() &&                             | the current content (non-const ref);<br>must contain value |\n| &nbsp;       | constexpr explicit operator **bool**() const noexcept                   | true if contains value |\n| &nbsp;       | constexpr **has_value**() const noexcept                                | true if contains value |\n| &nbsp;       | constexpr value_type const & **value**() const &                        | current content (const ref);<br>see [note 1](#note1) |\n| &nbsp;       | value_type & **value**() &                                              | current content (non-const ref);<br>see [note 1](#note1) |\n| &nbsp;       | constexpr value_type && **value**() &&                                  | move from current content;<br>see [note 1](#note1) |\n| &nbsp;       | constexpr error_type const & **error**() const &                        | current error (const ref);<br>must contain error |\n| &nbsp;       | error_type & **error**() &                                              | current error (non-const ref);<br>must contain error |\n| &nbsp;       | constexpr error_type && **error**() &&                                  | move from current error;<br>must contain error |\n| &nbsp;       | constexpr unexpected_type<E> **get_unexpected**() const                 | the error as unexpected&lt;>;<br>must contain error |\n| &nbsp;       | template< typename Ex ><br>bool **has_exception**() const               | true of contains exception (as base) |\n| &nbsp;       | value_type **value_or**( U && v ) const &                               | value or move from v |\n| &nbsp;       | value_type **value_or**( U && v ) &&                                    | move from value or move from v |\n| &nbsp;       | ... | &nbsp; |\n\n<a id=\"note1\"></a>Note 1: checked access: if no content, for std::exception_ptr rethrows error(), otherwise throws bad_expected_access(error()).\n\n### Algorithms for expected\n\n| Kind                   | Function |\n|------------------------|----------|\n| Relational operators   | &nbsp;   | \n| ==&ensp;!=&ensp;<&ensp;>&ensp;<=&ensp;>= | template< typename T, typename E ><br>constexpr bool operator ***op***(<br>&emsp;expected&lt;T,E> const & x,<br>&emsp;expected&lt;T,E> const & y ) |\n| Comparison with unexpected_type | &nbsp; | \n| ==&ensp;!=&ensp;<&ensp;>&ensp;<=&ensp;>= | template< typename T, typename E ><br>constexpr bool operator ***op***(<br>&emsp;expected&lt;T,E> const & x,<br>&emsp;unexpected_type&lt;E> const & u ) | \n| &nbsp;                                   | template< typename T, typename E ><br>constexpr bool operator ***op***(<br>&emsp;unexpected_type&lt;E> const & u,<br>&emsp;expected&lt;T,E> const & x ) | \n| Comparison with T                        | &nbsp;   | \n| ==&ensp;!=&ensp;<&ensp;>&ensp;<=&ensp;>= | template< typename T, typename E ><br>constexpr bool operator ***op***(<br>&emsp;expected&lt;T,E> const & x,<br>&emsp;T const & v ) | \n| &nbsp;                                   | template< typename T, typename E ><br>constexpr bool operator ***op***(<br>&emsp;T const & v,<br>&emsp;expected&lt;T,E> const & x ) | \n| Specialized algorithms | &nbsp;   | \n| Swap                   | template< typename T, typename E ><br>void **swap**(<br>&emsp;expected&lt;T,E> & x,<br>&emsp;expected&lt;T,E> & y )&emsp;noexcept( noexcept( x.swap(y) ) ) | \n| Make expected from     | &nbsp;   | \n| &emsp;Value            | template< typename T><br>constexpr auto **make_expected**( T && v ) -><br>&emsp;expected< typename std::decay&lt;T>::type > | \n| &emsp;Nothing          | auto **make_expected**() -> expected&lt;void> | \n| &emsp;Current exception| template< typename T><br>constexpr auto **make_expected_from_current_exception**() -> expected&lt;T> | \n| &emsp;Exception        | template< typename T><br>auto **make_expected_from_exception**( std::exception_ptr v ) -> expected&lt;T>| \n| &emsp;Error            | template< typename T, typename E ><br>constexpr auto **make_expected_from_error**( E e ) -><br>&emsp;expected&lt;T, typename std::decay&lt;E>::type> | \n| &emsp;Call             | template< typename F ><br>auto **make_expected_from_call**( F f ) -><br>&emsp;expected< typename std::result_of&lt;F()>::type >| \n| &emsp;Call, void specialization | template< typename F ><br>auto **make_expected_from_call**( F f ) -> expected&lt;void> | \n\n### Interface of unexpected_type\n\n| Kind         | Method                                                    | Result |\n|--------------|-----------------------------------------------------------|--------|\n| Construction | **unexpected_type**() = delete;                           | no default construction |\n| &nbsp;       | constexpr explicit **unexpected_type**( E const & error ) | copy-constructed from an E |\n| &nbsp;       | constexpr explicit **unexpected_type**( E && error )      | move-constructed from an E |\n| Observers    | constexpr error_type const & **value**() const            | can observe contained error |\n| &nbsp;       | error_type & **value**()                                  | can modify contained error |\n\n### Algorithms for unexpected_type\n\n| Kind                   | Function |\n|------------------------|----------|\n| Relational operators   | &nbsp;   | \n| ==&ensp;!=&ensp;<&ensp;>&ensp;<=&ensp;>= | template< typename E ><br>constexpr bool operator ***op***(<br>&emsp;unexpected_type&lt;E> const & x,<br>&emsp;unexpected_type&lt;E> const & y ) |\n| ==&ensp;!=&ensp;<&ensp;>&ensp;<=&ensp;>= | constexpr bool operator ***op***(<br>&emsp;unexpected_type&lt;std::exception_ptr> const & x,<br>&emsp;unexpected_type&lt;std::exception_ptr> const & y ) |\n| Specialized algorithms | &nbsp;   | \n| Make unexpected from   | &nbsp;   | \n| &emsp;Current exception| [constexpr] auto **make_unexpected_from_current_exception**() -><br>&emsp;unexpected_type< std::exception_ptr >| \n| &emsp;Error            | template< typename E><br>[constexpr] auto **make_unexpected**( E && v) -><br>&emsp;unexpected_type< typename std::decay&lt;E>::type >| \n\n\n<a id=\"comparison\"></a>\nComparison with like types\n--------------------------\n\n|Feature               |<br>std::pair|std:: optional |std:: expected |nonstd:: expected |Boost. Expected |Nonco expected |Andrei Expected |Hagan required |\n|----------------------|-------------|---------------|---------------|------------------|----------------|---------------|----------------|---------------|\n|More information      | see [14]    | see [5]       | see [1]       | this work        | see [4]        | see [7]       | see [8]        | see [13]      |\n|                      |             |               |               |                  |                |               |                |               |\n| C++03                | yes         | no            | no            | no/not yet       | no (union)     | no            | no             | yes           |\n| C++11                | yes         | no            | no            | yes              | yes            | yes           | yes            | yes           |\n| C++14                | yes         | no            | no            | yes              | yes            | yes           | yes            | yes           |\n| C++17                | yes         | yes           | no            | yes              | yes            | yes           | yes            | yes           |\n|                      |             |               |               |                  |                |               |                |               |\n|DefaultConstructible  | T param     | yes           | yes           | yes              | yes            | no            | no             | no            |\n|In-place construction | no          | yes           | yes           | yes              | yes            | yes           | no             | no            |\n|Literal type          | yes         | yes           | yes           | yes              | yes            | no            | no             | no            |\n|                      |             |               |               |                  |                |               |                |               |\n|Disengaged information| possible    | no            | yes           | yes              | yes            | yes           | yes            | no            |\n|Vary disengaged type  | yes         | no            | yes           | yes              | yes            | no            | no             | no            |\n|Engaged nonuse throws | no          | no            | no            | no               | error_traits   | no            | no             | yes           |\n|Disengaged use throws | no          | yes, value()  | yes, value()  | yes, value()     | yes,<br>value()| yes,<br>get() | yes,<br>get()  | n/a           |\n|                      |             |               |               |                  |                |               |                |               |\n|Proxy (rel.ops)       | no          | yes           | yes           | yes              | yes            | no            | no             | no            |\n|References            | no          | yes           | no/not yet    | no/not yet       | no/not yet     | yes           | no             | no            |\n|Chained visitor(s)    | no          | no            | yes           | maybe            | yes            | no            | no             | no            |\n\nNote 1: std:&#58;*experimental*:&#58;expected\n\nNote 2: sources for [Nonco expected](https://github.com/martinmoene/spike-expected/tree/master/nonco), [Andrei Expected](https://github.com/martinmoene/spike-expected/tree/master/alexandrescu) and [Hagan required](https://github.com/martinmoene/spike-expected/tree/master/hagan) can befound in the [spike-expected](https://github.com/martinmoene/spike-expected) repository.\n\n\nReported to work with\n---------------------\n\n\nImplementation notes\n--------------------\n\n\nOther implementations of expected\n---------------------------------\n- Simon Brand. [C++11/14/17 std::expected with functional-style extensions](https://github.com/TartanLlama/expected). Single-header.\n- Isabella Muerte. [MNMLSTC Core](https://github.com/mnmlstc/core) (C++11).\n- Vicente J. Botet Escriba. [stdmake's expected](https://github.com/viboes/std-make/tree/master/include/experimental/fundamental/v3/expected) (C++17).\n- Facebook. [ Folly's Expected.h](https://github.com/facebook/folly/blob/master/folly/Expected.h) (C++14).\n\n\nNotes and references\n--------------------\n[1] Vicente J. Botet Escriba. [p0323 - A proposal to add a utility class to represent expected object (latest)](http://wg21.link/p0323) (HTML). ([r6](http://wg21.link/p0323r6), [r5](http://wg21.link/p0323r5), [r4](http://wg21.link/p0323r4), [r3](http://wg21.link/p0323r3), [r2](http://wg21.link/p0323r2), [r1](http://wg21.link/n4109), [r0](http://wg21.link/n4015), [draft](https://github.com/viboes/std-make/blob/master/doc/proposal/expected/DXXXXR0_expected.pdf)).\n\n[2] Vicente J. Botet Escriba. [JASEL: Just a simple experimental library for C++](https://github.com/viboes/std-make). Reference implementation of [expected](https://github.com/viboes/std-make/tree/master/include/experimental/fundamental/v3/expected).\n\n[3] Vicente J. Botet Escriba. [Expected - An exception-friendly Error Monad](https://www.youtube.com/watch?v=Zdlt1rgYdMQ). C++Now 2014. 24 September 2014.  \n\n[4] Pierre Talbot. [Boost.Expected. Unofficial Boost candidate](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/trademark/25002). 5 May 2013. [GitHub](https://github.com/TrademarkPewPew/Boost.Expected), [GSoC 2013 Proposal](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/trademark/25002), [boost@lists.boost.org](http://permalink.gmane.org/gmane.comp.lib.boost.devel/240056 ).  \n\n[5] Fernando Cacciola and Andrzej Krzemieński. [A proposal to add a utility class to represent optional objects (Revision 4)](http://isocpp.org/files/papers/N3672.html). ISO/IEC JTC1 SC22 WG21 N3672 2013-04-19.  \n\n[6] Andrzej Krzemieński, [Optional library implementation in C++11](https://github.com/akrzemi1/Optional/).  \n\n[7] Anto Nonco. [Extending expected<T> to deal with references](http://anto-nonco.blogspot.nl/2013/03/extending-expected-to-deal-with.html). 27 May 2013.  \n\n[8] Andrei Alexandrescu. Systematic Error Handling in C++. Prepared for The C++and Beyond Seminar 2012. [Video](http://channel9.msdn.com/Shows/Going+Deep/C-and-Beyond-2012-Andrei-Alexandrescu-Systematic-Error-Handling-in-C). [Slides](http://sdrv.ms/RXjNPR).  \n\n[9] Andrei Alexandrescu. [Choose your Poison: Exceptions or Error Codes? (PDF)](http://accu.org/content/conf2007/Alexandrescu-Choose_Your_Poison.pdf). ACCU Conference 2007.  \n\n[10] Andrei Alexandrescu. [The Power of None (PPT)](http://nwcpp.org/static/talks/2006/The_Power_of_None.ppt). Northwest C++ Users' Group. [May 17th, 2006](http://nwcpp.org/may-2006.html).  \n\n[11] Jon Jagger. [A Return Type That Doesn't Like Being Ignored](http://accu.org/var/uploads/journals/overload53-FINAL.pdf#page=18). Overload issue 53, February 2003.  \n\n[12] Andrei Alexandrescu. [Error Handling in C++: Are we inching towards a total solution?](http://accu.org/index.php/conferences/2002/speakers2002). ACCU Conference 2002.  \n\n[13] Ken Hagan et al. [Exploding return codes](https://groups.google.com/d/msg/comp.lang.c++.moderated/BkZqPfoq3ys/H_PMR8Sat4oJ). comp.lang.c++.moderated. 11 February 2000.  \n\n[14] [std::pair](http://en.cppreference.com/w/cpp/utility/pair). cppreference.com\n\n[15] Niall Douglas. [Outcome](https://ned14.github.io/outcome/). Very lightweight outcome&lt;T> and result&lt;T> (non-Boost edition). \n\nAppendix\n--------\n### A.1 expected lite test specification\n\n```\nunexpected_type<>: Disallows default construction\nunexpected_type<>: Disallows default construction, std::exception_ptr specialization\nunexpected_type<>: Allows to copy-construct from error_type\nunexpected_type<>: Allows to copy-construct from error_type, std::exception_ptr specialization\nunexpected_type<>: Allows to move-construct from error_type\nunexpected_type<>: Allows to move-construct from error_type, std::exception_ptr specialization\nunexpected_type<>: Allows to copy-construct from an exception, std::exception_ptr specialization\nunexpected_type<>: Allows to observe its value\nunexpected_type<>: Allows to observe its value, std::exception_ptr specialization\nunexpected_type<>: Allows to modify its value\nunexpected_type<>: Allows to modify its value, std::exception_ptr specialization\nunexpected_type<>: Provides relational operators\nunexpected_type<>: Provides relational operators, std::exception_ptr specialization\nmake_unexpected(): Allows to create an unexpected_type<E> from an E\nunexpected<>: C++17 and later provide unexpected_type as unexpected\nbad_expected_access<>: Disallows default construction\nbad_expected_access<>: Allows construction from error_type\nbad_expected_access<>: Allows to observe its error\nbad_expected_access<>: Allows to change its error\nexpected<>: Allows default construction\nexpected<>: Allows to copy-construct from value_type\nexpected<>: Allows to move-construct from value_type\nexpected<>: Allows to copy-construct from expected<>\nexpected<>: Allows to move-construct from expected<>\nexpected<>: Allows to in-place-construct value_type\nexpected<>: Allows to copy-construct from unexpected_type<>\nexpected<>: Allows to move-construct from unexpected_type<>\nexpected<>: Allows to in-place-construct unexpected_type<>\nexpected<>: Allows to copy-assign from expected<>\nexpected<>: Allows to move-assign from expected<>\nexpected<>: Allows to copy-assign from type convertible to value_type\nexpected<>: Allows to move-assign from type convertible to value_type\nexpected<>: Allows to be swapped\nexpected<>: Allows to observe its value via a pointer\nexpected<>: Allows to observe its value via a pointer to constant\nexpected<>: Allows to modify its value via a pointer\nexpected<>: Allows to observe its value via a reference\nexpected<>: Allows to observe its value via a r-value reference\nexpected<>: Allows to modify its value via a reference\nexpected<>: Allows to observe if it contains a value (or error)\nexpected<>: Allows to observe its value\nexpected<>: Allows to modify its value\nexpected<>: Allows to move its value\nexpected<>: Allows to observe its error\nexpected<>: Allows to modify its error\nexpected<>: Allows to move its error\nexpected<>: Allows to observe its error as unexpected<>\nexpected<>: Allows to observe its value if available, or obtain a specified value otherwise\nexpected<>: Allows to move its value if available, or obtain a specified value otherwise\nexpected<void>: Allows to default-construct\nexpected<void>: Allows to copy-construct from expected<void>\nexpected<void>: Allows to move-construct from expected<void>\nexpected<void>: Allows to in-place-construct\nexpected<void>: Allows to copy-construct from unexpected_type<>\nexpected<void>: Allows to move-construct from unexpected_type<>\nexpected<void>: Allows to in-place-construct unexpected_type<>\nexpected<void>: Allows to copy-assign from expected<>\nexpected<void>: Allows to move-assign from expected<>\nexpected<void>: Allows to be swapped\nexpected<void>: Allows to observe if it contains a value (or error)\nexpected<void>: Allows to observe its error\nexpected<void>: Allows to modify its error\nexpected<void>: Allows to move its error\nexpected<void>: Allows to observe its error as unexpected<>\noperator op: Provides relational operators\n```\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:expected-lite\" ]\n",
      "lockFile": "",
      "buck": "prebuilt_cxx_library(\n  name = 'expected-lite', \n  header_namespace = '', \n  header_only = True, \n  exported_headers = subdir_glob([\n    ('include/nonstd', '**/*.hpp'), \n  ]), \n  visibility = [\n    'PUBLIC', \n  ], \n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2018-11-21T14:35:45Z",
  "updatedUpstream": "2020-12-30T02:47:26Z",
  "contributors": [
    {
      "login": "mabraham",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/112395?v=4"
    },
    {
      "login": "1082008",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/1082008?u=62e24ecf545e49d64ec9e433a08a072f8aca58a3&v=4"
    },
    {
      "login": "rnburn",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/1923871?u=4c5a77f977cc624eaec0e6593ddc5d113f56b57e&v=4"
    },
    {
      "login": "martinmoene",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/1999290?v=4"
    },
    {
      "login": "spease",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/2825204?v=4"
    },
    {
      "login": "lethe555",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/8001254?u=6768c6d06d041669bffc9ef675d3832c463fee63&v=4"
    },
    {
      "login": "hubslave",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/29800872?v=4"
    },
    {
      "login": "kelvinyangis",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/35412753?u=f09f4ea565de4899a6b171851a2b132338ac68d6&v=4"
    },
    {
      "login": "fbdtemme",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/69114541?v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 155,
  "forks": 12,
  "topics": [
    "cpp11",
    "header-only",
    "single-file",
    "no-dependencies",
    "expected-implementations"
  ]
}