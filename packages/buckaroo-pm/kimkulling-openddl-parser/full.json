{
  "packageName": "buckaroo-pm/kimkulling-openddl-parser",
  "name": "kimkulling/openddl-parser",
  "licence": "MIT",
  "description": "A simple and fast OpenDDL Parser",
  "readme": "The OpenDDL-Parser\n==================\n\nThe OpenDDL-Parser is a small and easy to use library for OpenDDL-file-format-parsing. OpenDDL is the shortcut for Open Data Description Language, a data-declaration language introduced by Eric Lengyel. Please check http://openddl.org/ if you want to learn more about it.\n\nBuild status\n============\nLinux build status: [![Build Status](https://travis-ci.org/kimkulling/openddl-parser.png)](https://travis-ci.org/kimkulling/openddl-parser)\nCurrent coverity check status:\n<a href=\"https://scan.coverity.com/projects/5606\">\n  <img alt=\"Coverity Scan Build Status\"\n       src=\"https://scan.coverity.com/projects/5606/badge.svg\"/>\n</a>\nCurrent test coverage:[![Coverage Status](https://coveralls.io/repos/github/kimkulling/openddl-parser/badge.svg?branch=master)](https://coveralls.io/github/kimkulling/openddl-parser?branch=cpp_coveralls)\nGet the source code\n===================\nYou can get the code from our git repository, which is located at GitHub. You can clone the repository with the following command:\n\n> git clone https://github.com/kimkulling/openddl-parser.git\n\nBuilding the source from the GitHub-Repo\n========================================\nTo build the library you need to install cmake first ( see http://www.cmake.org/ for more information ). Make also sure that a compiler tool-chain is installed on your machine.\nAfter installing it you can open a console and enter:\n\n> cmake CMakeLists.txt\n\nThis command will generate a build environment for your preferred build tool ( for Visual-Studio-users the project files will be generated, for gcc-users the makefiles will be generated ).\nWhen using an IDE open the IDE and run the build. When using GNU-make type in your console:\n\n> make\n\nand that's all.\n\nWhen using Visual Studio CMake will generate you a solution for ythe library. Just build it there.\n\nUse the library\n===============\nTo use the OpenDDL-parser you need to build the lib first. Now add the \n> <Repo-folder>/include \n\nto your include-path and the \n\n> <Repo-folder>/lib\n\nto your lib-folder. Link the openddl.lib to your application. \n\nHere is a small example how to use the lib:\n\n```cpp\n\n#include <iostream>\n#include <cassert>\n#include <openddlparser/OpenDDLParser.h>\n\nUSE_ODDLPARSER_NS;\n\nint main( int argc, char *argv[] ) {\n    if( argc < 3 ) {\n        return 1;\n    }\n\n    char *filename( nullptr );\n    if( 0 == strncmp( FileOption, argv[ 1 ], strlen( FileOption ) ) ) {\n        filename = argv[ 2 ];\n    }\n    std::cout << \"file to import: \" << filename << std::endl;   \n    if( nullptr == filename ) {\n        std::cerr << \"Invalid filename.\" << std::endl;\n        return Error;\n    }\n\n    FILE *fileStream = fopen( filename, \"r+\" );\n    if( NULL == filename ) {\n        std::cerr << \"Cannot open file \" << filename << std::endl;\n        return 1;\n    }\n\n    // obtain file size:\n    fseek( fileStream, 0, SEEK_END );\n    const size_t size( ftell( fileStream ) );   \n    rewind( fileStream );   \n    if( size > 0 ) {\n        char *buffer = new char[ size ];\n        const size_t readSize( fread( buffer, sizeof( char ), size, fileStream ) );\n        assert( readSize == size );\n        OpenDDLParser theParser;\n        theParser.setBuffer( buffer, size );\n        const bool result( theParser.parse() );\n        if( !result ) {\n            std::cerr << \"Error while parsing file \" << filename << \".\" << std::endl;\n        }\n    }\n    return 0;\n}\n\n```\n\nHow to access the imported data\n===============================\nThe data is organized as a tree. You can get the root-node of the tree with the following code:\n\n```cpp\nOpenDDLParser theParser;\ntheParser.setBuffer( buffer, size );\nconst bool result( theParser.parse() );\nif ( result ) {\n    DDLNode *root = theParser.getRoot();\n    DDLNode::DllNodeList childs = root->getChildNodeList();\n    for ( size_t i=0; i<childs.size(); i++ ) {\n        DDLNode *child = childs[ i ];\n        Property *prop   = child->getProperty(); // to get properties\n        std::string type = child->getType();     // to get the node type\n        Value *values    = child->getValue();    // to get the data;\n        \n        // to loop through all values\n        while ( values != ddl_nullptr ) {\n            int current = values->getInt32();\n            values = value->getNext();\n        }\n    }\n}\n\n```\n\nThe node instance called root contains the data.\n\nAll data lists are organized as linked lists.\n\nReference documentation\n=======================\nPlease check http://kimkulling.github.io/openddl-parser/doxygen_html/index.html.\n\nProjects using OpenDDL-Parser\n=============================\n- Asset Importer Lib: https://github.com/assimp/assimp .\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:openddlparser\" ]\n",
      "lockFile": "manifest = \"975e39c3d81b709a040fab682989810808ae60002996520a1cf3d8730c1ff739\"\n\n",
      "buck": "load('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'openddlparser',\n  header_namespace = 'openddlparser',\n  exported_headers = subdir_glob([\n    ('include/openddlparser', '**/*.h'),\n  ]),\n  srcs = glob([\n    'code/**/*.cpp',\n  ]),\n  visibility = ['PUBLIC'],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-25T11:43:31Z",
  "updatedUpstream": "2020-10-27T09:13:00Z",
  "contributors": [
    {
      "login": "henrya2",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/959309?u=d87a045ad90c36372a90afc4a755e48e26c62e12&v=4"
    },
    {
      "login": "wise86-android",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/1309172?v=4"
    },
    {
      "login": "kimkulling",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/2323156?u=b9dbe9412e050771885a4438b0bbacf4850b217c&v=4"
    },
    {
      "login": "FredrikHson",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/5708558?u=c18777e3adcad83500f719df2051675b60639699&v=4"
    },
    {
      "login": "pkholland",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/8400193?u=a0057d822f289f194fc5da2f796a0c180252bd3c&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 22,
  "forks": 11,
  "topics": [
    "openddl-parser",
    "c-plus-plus",
    "cmake"
  ]
}