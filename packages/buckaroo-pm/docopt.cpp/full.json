{
  "packageName": "buckaroo-pm/docopt.cpp",
  "name": "docopt/docopt.cpp",
  "licence": "NOASSERTION",
  "description": "C++11 port of docopt",
  "readme": "``docopt.cpp``: A C++11 Port\n============================\ndocopt creates *beautiful* command-line interfaces\n--------------------------------------------------\n\nIsn't it awesome how ``getopt`` (and ``boost::program_options`` for you fancy\nfolk!) generate help messages based on your code?! These timeless functions\nhave been around for decades and have proven we don't need anything better, right?\n\n*Hell no!*  You know what's awesome?  It's when the option parser *is*\ngenerated based on the beautiful help message that you write yourself!\nThis way you don't need to write this stupid repeatable parser-code,\nand instead can write only the help message--*the way you want it*.\n\n**docopt** helps you create most beautiful command-line interfaces\n*easily*:\n\n.. code:: c++\n\n    #include \"docopt.h\"\n\n    #include <iostream>\n\n    static const char USAGE[] =\n    R\"(Naval Fate.\n\n        Usage:\n          naval_fate ship new <name>...\n          naval_fate ship <name> move <x> <y> [--speed=<kn>]\n          naval_fate ship shoot <x> <y>\n          naval_fate mine (set|remove) <x> <y> [--moored | --drifting]\n          naval_fate (-h | --help)\n          naval_fate --version\n\n        Options:\n          -h --help     Show this screen.\n          --version     Show version.\n          --speed=<kn>  Speed in knots [default: 10].\n          --moored      Moored (anchored) mine.\n          --drifting    Drifting mine.\n    )\";\n\n    int main(int argc, const char** argv)\n    {\n        std::map<std::string, docopt::value> args\n            = docopt::docopt(USAGE,\n                             { argv + 1, argv + argc },\n                             true,               // show help if requested\n                             \"Naval Fate 2.0\");  // version string\n\n        for(auto const& arg : args) {\n            std::cout << arg.first <<  arg.second << std::endl;\n        }\n\n        return 0;\n    }\n\nBeat that! The option parser is generated based on the docstring above\nthat is passed to ``docopt::docopt`` function.  ``docopt`` parses the usage\npattern (``\"Usage: ...\"``) and option descriptions (lines starting\nwith dash \"``-``\") and ensures that the program invocation matches the\nusage pattern; it parses options, arguments and commands based on\nthat. The basic idea is that *a good help message has all necessary\ninformation in it to make a parser*.\n\nC++11 port details\n---------------------------------------------------\n\nThis is a port of the ``docopt.py`` module (https://github.com/docopt/docopt),\nand we have tried to maintain full feature parity (and code structure) as the\noriginal.\n\nThis port is written in C++11 and also requires a good C++11 standard library\n(in particular, one with ``regex`` support). The following compilers are known\nto work with docopt:\n\n- Clang 3.3 and later\n- GCC 4.9\n- Visual C++ 2015 RC\n\nGCC-4.8 can work, but the std::regex module needs to be replaced with ``Boost.Regex``.\nIn that case, you will need to define ``DOCTOPT_USE_BOOST_REGEX`` when compiling\ndocopt, and link your code with the appropriated Boost libraries. A relativley\nrecent version of Boost is needed: 1.55 works, but 1.46 does not for example.\n\nThis port is licensed under the MIT license, just like the original module.\nHowever, we are also dual-licensing this code under the Boost License, version 1.0,\nas this is a popular C++ license. The licenses are similar and you are free to\nuse this code under the terms of either license.\n\nThe differences from the Python port are:\n\n* the addition of a ``docopt_parse`` function, which does not terminate\n  the program on error\n* a ``docopt::value`` type to hold the various value types that can be parsed.\n  We considered using boost::variant, but it seems better to have no external\n  dependencies (beyond a good STL).\n* because C++ is statically-typed and Python is not, we had to make some\n  changes to the interfaces of the internal parse tree types.\n* because ``std::regex`` does not have an equivalent to Python's regex.split,\n  some of the regex's had to be restructured and additional loops used.\n\nAPI\n---------------------------------------------------\n\n.. code:: c++\n\n    docopt::docopt(doc, argv, help /* =true */, version /* =\"\" */, options_first /* =false */)\n\n``docopt`` takes 2 required and 3 optional arguments:\n\n- ``doc`` is a string that contains a **help message** that will be parsed to\n  create the option parser.  The simple rules of how to write such a\n  help message are given in next sections.  Here is a quick example of\n  such a string (note that this example uses the \"raw string literal\" feature\n  that was added to C++11):\n\n.. code:: c++\n\n    R\"(Usage: my_program [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n    )\"\n\n- ``argv`` is a vector of strings representing the args passed. Although\n  main usually takes a ``(int argc, const char** argv)`` pair, you can\n  pass the value ``{argv+1, argv+argc}`` to generate the vector automatically.\n  (Note we skip the argv[0] argument!) Alternatively you can supply a list of\n  strings like ``{ \"--verbose\", \"-o\", \"hai.txt\" }``.\n\n- ``help``, by default ``true``, specifies whether the parser should\n  automatically print the help message (supplied as ``doc``) and\n  terminate, in case ``-h`` or ``--help`` option is encountered\n  (options should exist in usage pattern, more on that below). If you\n  want to handle ``-h`` or ``--help`` options manually (as other\n  options), set ``help=false``.\n\n- ``version``, by default empty, is an optional argument that\n  specifies the version of your program. If supplied, then, (assuming\n  ``--version`` option is mentioned in usage pattern) when parser\n  encounters the ``--version`` option, it will print the supplied\n  version and terminate.  ``version`` could be any printable object,\n  but most likely a string, e.g. ``\"2.1.0rc1\"``.\n\n    Note, when ``docopt`` is set to automatically handle ``-h``,\n    ``--help`` and ``--version`` options, you still need to mention\n    them in usage pattern for this to work (also so your users to\n    know about them!)\n\n- ``options_first``, by default ``false``.  If set to ``true`` will\n  disallow mixing options and positional argument.  I.e. after first\n  positional argument, all arguments will be interpreted as positional\n  even if the look like options.  This can be used for strict\n  compatibility with POSIX, or if you want to dispatch your arguments\n  to other programs.\n\nThe **return** value is a ``map<string, docopt::value>`` with options,\narguments and commands as keys, spelled exactly like in your help message.\nLong versions of options are given priority. For example, if you invoke the\ntop example as::\n\n    naval_fate ship Guardian move 100 150 --speed=15\n\nthe return dictionary will be:\n\n.. code:: python\n\n    {\"--drifting\": false,    \"mine\": false,\n     \"--help\": false,        \"move\": true,\n     \"--moored\": false,      \"new\": false,\n     \"--speed\": \"15\",        \"remove\": false,\n     \"--version\": false,     \"set\": false,\n     \"<name>\": [\"Guardian\"], \"ship\": true,\n     \"<x>\": \"100\",           \"shoot\": false,\n     \"<y>\": \"150\"}\n\nIf any parsing error (in either the usage, or due to incorrect user inputs) is\nencountered, the program will exit with exit code -1.\n\nNote that there is another function that does not exit on error, and instead will\npropogate an exception that you can catch and process as you like. See the docopt.h file\nfor information on the exceptions and usage:\n\n.. code:: c++\n\n    docopt::docopt_parse(doc, argv, help /* =true */, version /* =true */, options_first /* =false)\n\n\nHelp message format\n---------------------------------------------------\n\nHelp message consists of 2 parts:\n\n- Usage pattern, e.g.::\n\n    Usage: my_program [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n- Option descriptions, e.g.::\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n\nTheir format is described below; other text is ignored.\n\nUsage pattern format\n----------------------------------------------------------------------\n\n**Usage pattern** is a substring of ``doc`` that starts with\n``usage:`` (case *insensitive*) and ends with a *visibly* empty line.\nMinimum example:\n\n.. code:: python\n\n    \"\"\"Usage: my_program\n\n    \"\"\"\n\nThe first word after ``usage:`` is interpreted as your program's name.\nYou can specify your program's name several times to signify several\nexclusive patterns:\n\n.. code:: python\n\n    \"\"\"Usage: my_program FILE\n              my_program COUNT FILE\n\n    \"\"\"\n\nEach pattern can consist of the following elements:\n\n- **<arguments>**, **ARGUMENTS**. Arguments are specified as either\n  upper-case words, e.g. ``my_program CONTENT-PATH`` or words\n  surrounded by angular brackets: ``my_program <content-path>``.\n- **--options**.  Options are words started with dash (``-``), e.g.\n  ``--output``, ``-o``.  You can \"stack\" several of one-letter\n  options, e.g. ``-oiv`` which will be the same as ``-o -i -v``. The\n  options can have arguments, e.g.  ``--input=FILE`` or ``-i FILE`` or\n  even ``-iFILE``. However it is important that you specify option\n  descriptions if you want your option to have an argument, a default\n  value, or specify synonymous short/long versions of the option (see\n  next section on option descriptions).\n- **commands** are words that do *not* follow the described above\n  conventions of ``--options`` or ``<arguments>`` or ``ARGUMENTS``,\n  plus two special commands: dash \"``-``\" and double dash \"``--``\"\n  (see below).\n\nUse the following constructs to specify patterns:\n\n- **[ ]** (brackets) **optional** elements.  e.g.: ``my_program\n  [-hvqo FILE]``\n- **( )** (parens) **required** elements.  All elements that are *not*\n  put in **[ ]** are also required, e.g.: ``my_program\n  --path=<path> <file>...`` is the same as ``my_program\n  (--path=<path> <file>...)``.  (Note, \"required options\" might be not\n  a good idea for your users).\n- **|** (pipe) **mutually exclusive** elements. Group them using **(\n  )** if one of the mutually exclusive elements is required:\n  ``my_program (--clockwise | --counter-clockwise) TIME``. Group\n  them using **[ ]** if none of the mutually-exclusive elements are\n  required: ``my_program [--left | --right]``.\n- **...** (ellipsis) **one or more** elements. To specify that\n  arbitrary number of repeating elements could be accepted, use\n  ellipsis (``...``), e.g.  ``my_program FILE ...`` means one or\n  more ``FILE``-s are accepted.  If you want to accept zero or more\n  elements, use brackets, e.g.: ``my_program [FILE ...]``. Ellipsis\n  works as a unary operator on the expression to the left.\n- **[options]** (case sensitive) shortcut for any options.  You can\n  use it if you want to specify that the usage pattern could be\n  provided with any options defined below in the option-descriptions\n  and do not want to enumerate them all in usage-pattern.\n- \"``[--]``\". Double dash \"``--``\" is used by convention to separate\n  positional arguments that can be mistaken for options. In order to\n  support this convention add \"``[--]``\" to your usage patterns.\n- \"``[-]``\". Single dash \"``-``\" is used by convention to signify that\n  ``stdin`` is used instead of a file. To support this add \"``[-]``\"\n  to your usage patterns. \"``-``\" acts as a normal command.\n\nIf your pattern allows to match argument-less option (a flag) several\ntimes::\n\n    Usage: my_program [-v | -vv | -vvv]\n\nthen number of occurrences of the option will be counted. I.e.\n``args['-v']`` will be ``2`` if program was invoked as ``my_program\n-vv``. Same works for commands.\n\nIf your usage patterns allows to match same-named option with argument\nor positional argument several times, the matched arguments will be\ncollected into a list::\n\n    Usage: my_program <file> <file> --path=<path>...\n\nI.e. invoked with ``my_program file1 file2 --path=./here\n--path=./there`` the returned dict will contain ``args['<file>'] ==\n['file1', 'file2']`` and ``args['--path'] == ['./here', './there']``.\n\n\nOption descriptions format\n----------------------------------------------------------------------\n\n**Option descriptions** consist of a list of options that you put\nbelow your usage patterns.\n\nIt is necessary to list option descriptions in order to specify:\n\n- synonymous short and long options,\n- if an option has an argument,\n- if option's argument has a default value.\n\nThe rules are as follows:\n\n- Every line in ``doc`` that starts with ``-`` or ``--`` (not counting\n  spaces) is treated as an option description, e.g.::\n\n    Options:\n      --verbose   # GOOD\n      -o FILE     # GOOD\n    Other: --bad  # BAD, line does not start with dash \"-\"\n\n- To specify that option has an argument, put a word describing that\n  argument after space (or equals \"``=``\" sign) as shown below. Follow\n  either <angular-brackets> or UPPER-CASE convention for options'\n  arguments.  You can use comma if you want to separate options. In\n  the example below, both lines are valid, however you are recommended\n  to stick to a single style.::\n\n    -o FILE --output=FILE       # without comma, with \"=\" sign\n    -i <file>, --input <file>   # with comma, without \"=\" sing\n\n- Use two spaces to separate options with their informal description::\n\n    --verbose More text.   # BAD, will be treated as if verbose option had\n                           # an argument \"More\", so use 2 spaces instead\n    -q        Quit.        # GOOD\n    -o FILE   Output file. # GOOD\n    --stdout  Use stdout.  # GOOD, 2 spaces\n\n- If you want to set a default value for an option with an argument,\n  put it into the option-description, in form ``[default:\n  <my-default-value>]``::\n\n    --coefficient=K  The K coefficient [default: 2.95]\n    --output=FILE    Output file [default: test.txt]\n    --directory=DIR  Some directory [default: ./]\n\n- If the option is not repeatable, the value inside ``[default: ...]``\n  will be interpreted as string.  If it *is* repeatable, it will be\n  splited into a list on whitespace::\n\n    Usage: my_program [--repeatable=<arg> --repeatable=<arg>]\n                         [--another-repeatable=<arg>]...\n                         [--not-repeatable=<arg>]\n\n    # will be ['./here', './there']\n    --repeatable=<arg>          [default: ./here ./there]\n\n    # will be ['./here']\n    --another-repeatable=<arg>  [default: ./here]\n\n    # will be './here ./there', because it is not repeatable\n    --not-repeatable=<arg>      [default: ./here ./there]\n\nExamples\n----------------------------------------------------------------------\n\nWe have an extensive list of `examples\n<https://github.com/docopt/docopt/tree/master/examples>`_ which cover\nevery aspect of functionality of **docopt**.  Try them out, read the\nsource if in doubt.\n\nThere are also very intersting applications and ideas at that page.\nCheck out the sister project for more information!\n\nSubparsers, multi-level help and *huge* applications (like git)\n----------------------------------------------------------------------\n\nIf you want to split your usage-pattern into several, implement\nmulti-level help (with separate help-screen for each subcommand),\nwant to interface with existing scripts that don't use **docopt**, or\nyou're building the next \"git\", you will need the new ``options_first``\nparameter (described in API section above). To get you started quickly\nwe implemented a subset of git command-line interface as an example:\n`examples/git\n<https://github.com/docopt/docopt/tree/master/examples/git>`_\n\nCompiling the example / Running the tests\n----------------------------------------------------------------------\nThe original Python module includes some language-agnostic unit tests,\nand these can be run with this port as well.\n\nThe tests are a Python driver that uses the testcases.docopt file to then invoke\na C++ test case runner (run_testcase.cpp)::\n\n  $ clang++ --std=c++11 --stdlib=libc++ docopt.cpp run_testcase.cpp -o run_testcase\n  $ python run_tests.py\n  PASS (175)\n\nYou can also compile the example shown at the start (included as example.cpp)::\n\n  $ clang++ --std=c++11 --stdlib=libc++ -I . docopt.cpp examples/naval_fate.cpp -o naval_fate\n  $ ./naval_fate --help\n   [ ... ]\n  $ ./naval_fate ship Guardian move 100 150 --speed=15\n  --drifting: false\n  --help: false\n  --moored: false\n  --speed: \"15\"\n  --version: false\n  <name>: [\"Guardian\"]\n  <x>: \"100\"\n  <y>: \"150\"\n  mine: false\n  move: true\n  new: false\n  remove: false\n  set: false\n  ship: true\n  shoot: false\n\nDevelopment\n---------------------------------------------------\n\nComments and suggestions are *very* welcome! If you find issues, please\nfile them and help improve our code!\n\nPlease note, however, that we have tried to stay true to the original\nPython code. If you have any major patches, structural changes, or new features,\nwe might want to first negotiate these changes into the Python code first.\nHowever, bring it up! Let's hear it!\n\nChangelog\n---------------------------------------------------\n\n**docopt** follows `semantic versioning <http://semver.org>`_.  The\nfirst release with stable API will be 1.0.0 (soon).\n\n- 0.6.2 Bugfix release (still based on docopt 0.6.1)\n- 0.6.1 The initial C++ port of docopt.py (based on docopt 0.6.1)\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:docopt\" ]",
      "lockFile": "manifest = \"34a0154be815a605b0d65188e75ce97745010448866f8924386582027b2b9cdd\"\n\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'docopt',\n  header_namespace = '',\n  exported_headers = glob([\n    '*.h',\n  ]),\n  srcs = glob([\n    '*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-22T12:00:56Z",
  "updatedUpstream": "2021-01-04T15:20:06Z",
  "contributors": [
    {
      "login": "arthurschreiber",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/2195?v=4"
    },
    {
      "login": "elindsey",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/47579?u=d6c0753f905c10e8f44dbe7d713f44d3c5b39522&v=4"
    },
    {
      "login": "mboersma",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/73019?u=0a935670af1d4f1518e7e37a13a447f1ef63ca62&v=4"
    },
    {
      "login": "johari",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/114077?u=804b77fcdadfa705116f7436b12830a4b537820c&v=4"
    },
    {
      "login": "MattPD",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/130135?u=6a6e11d3465c18379c56bd288594abe27e87138d&v=4"
    },
    {
      "login": "nikodemus",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/153172?v=4"
    },
    {
      "login": "kblomqvist",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/206775?u=947f51d4039d779ef6d09aa17842b1b8ce3c9b62&v=4"
    },
    {
      "login": "rwtolbert",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/283685?v=4"
    },
    {
      "login": "shabbyrobe",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/288426?v=4"
    },
    {
      "login": "kbatten",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/306007?v=4"
    },
    {
      "login": "oprypin",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/371383?u=15bebff6355ea30ca42820fd1c775466ddd85b4e&v=4"
    },
    {
      "login": "kipanshi",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/413509?u=9203ed4ca4de836ea46953423f66c8b952587cbf&v=4"
    },
    {
      "login": "acgetchell",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/434849?v=4"
    },
    {
      "login": "BurntSushi",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/456674?v=4"
    },
    {
      "login": "hoxnox",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/468881?v=4"
    },
    {
      "login": "mrkline",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/493463?u=0abf4a651831478b1e6c1bf5856a0ba441b86a11&v=4"
    },
    {
      "login": "edwindj",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/542492?u=2c64924288cc80bbf6970b95ffc247d9bc3df23b&v=4"
    },
    {
      "login": "keleshev",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/619158?v=4"
    },
    {
      "login": "martinhansdk",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/837014?v=4"
    },
    {
      "login": "GamePad64",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/837953?v=4"
    },
    {
      "login": "chrisdembia",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/846001?u=bdb212239b6a4682a42e3688db3c0cbbfaf11346&v=4"
    },
    {
      "login": "ryanartecona",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/889991?v=4"
    },
    {
      "login": "bicycle1885",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/905683?u=7517f83b075a8fdef3b24d14aded3898d7cb2ebb&v=4"
    },
    {
      "login": "voieducode",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/999472?v=4"
    },
    {
      "login": "toch",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1059797?v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 868,
  "forks": 115,
  "topics": []
}