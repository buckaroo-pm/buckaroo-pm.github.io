{
  "packageName": "buckaroo-pm/mapbox-rapidjson",
  "name": "mapbox/rapidjson",
  "licence": "NOASSERTION",
  "description": "A fast JSON parser/generator for C++ with both SAX/DOM style API",
  "readme": "![](doc/logo/rapidjson.png)\n\n![](https://img.shields.io/badge/release-v1.1.0-blue.png)\n\n## A fast JSON parser/generator for C++ with both SAX/DOM style API \n\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip. All rights reserved.\n\n* [RapidJSON GitHub](https://github.com/miloyip/rapidjson/)\n* RapidJSON Documentation\n  * [English](http://rapidjson.org/)\n  * [简体中文](http://rapidjson.org/zh-cn/)\n  * [GitBook](https://www.gitbook.com/book/miloyip/rapidjson/) with downloadable PDF/EPUB/MOBI, without API reference.\n\n## Build status\n\n| [Linux][lin-link] | [Windows][win-link] | [Coveralls][cov-link] |\n| :---------------: | :-----------------: | :-------------------: |\n| ![lin-badge]      | ![win-badge]        | ![cov-badge]          |\n\n[lin-badge]: https://travis-ci.org/miloyip/rapidjson.png?branch=master \"Travis build status\"\n[lin-link]:  https://travis-ci.org/miloyip/rapidjson \"Travis build status\"\n[win-badge]: https://ci.appveyor.com/api/projects/status/u658dcuwxo14a8m9/branch/master \"AppVeyor build status\"\n[win-link]:  https://ci.appveyor.com/project/miloyip/rapidjson/branch/master \"AppVeyor build status\"\n[cov-badge]: https://coveralls.io/repos/miloyip/rapidjson/badge.png?branch=master\n[cov-link]:  https://coveralls.io/r/miloyip/rapidjson?branch=master\n\n## Introduction\n\nRapidJSON is a JSON parser and generator for C++. It was inspired by [RapidXml](http://rapidxml.sourceforge.net/).\n\n* RapidJSON is **small** but **complete**. It supports both SAX and DOM style API. The SAX parser is only a half thousand lines of code.\n\n* RapidJSON is **fast**. Its performance can be comparable to `strlen()`. It also optionally supports SSE2/SSE4.2 for acceleration.\n\n* RapidJSON is **self-contained** and **header-only**. It does not depend on external libraries such as BOOST. It even does not depend on STL.\n\n* RapidJSON is **memory-friendly**. Each JSON value occupies exactly 16 bytes for most 32/64-bit machines (excluding text string). By default it uses a fast memory allocator, and the parser allocates memory compactly during parsing.\n\n* RapidJSON is **Unicode-friendly**. It supports UTF-8, UTF-16, UTF-32 (LE & BE), and their detection, validation and transcoding internally. For example, you can read a UTF-8 file and let RapidJSON transcode the JSON strings into UTF-16 in the DOM. It also supports surrogates and \"\\u0000\" (null character).\n\nMore features can be read [here](doc/features.md).\n\nJSON(JavaScript Object Notation) is a light-weight data exchange format. RapidJSON should be in fully compliance with RFC7159/ECMA-404, with optional support of relaxed syntax. More information about JSON can be obtained at\n* [Introducing JSON](http://json.org/)\n* [RFC7159: The JavaScript Object Notation (JSON) Data Interchange Format](http://www.ietf.org/rfc/rfc7159.txt)\n* [Standard ECMA-404: The JSON Data Interchange Format](http://www.ecma-international.org/publications/standards/Ecma-404.htm)\n\n## Highlights in v1.1 (2016-8-25)\n\n* Added [JSON Pointer](doc/pointer.md)\n* Added [JSON Schema](doc/schema.md)\n* Added [relaxed JSON syntax](doc/dom.md) (comment, trailing comma, NaN/Infinity)\n* Iterating array/object with [C++11 Range-based for loop](doc/tutorial.md)\n* Reduce memory overhead of each `Value` from 24 bytes to 16 bytes in x86-64 architecture.\n\nFor other changes please refer to [change log](CHANGELOG.md).\n\n## Compatibility\n\nRapidJSON is cross-platform. Some platform/compiler combinations which have been tested are shown as follows.\n* Visual C++ 2008/2010/2013 on Windows (32/64-bit)\n* GNU C++ 3.8.x on Cygwin\n* Clang 3.4 on Mac OS X (32/64-bit) and iOS\n* Clang 3.4 on Android NDK\n\nUsers can build and run the unit tests on their platform/compiler.\n\n## Installation\n\nRapidJSON is a header-only C++ library. Just copy the `include/rapidjson` folder to system or project's include path.\n\nRapidJSON uses following software as its dependencies:\n* [CMake](https://cmake.org/) as a general build tool\n* (optional)[Doxygen](http://www.doxygen.org) to build documentation\n* (optional)[googletest](https://github.com/google/googletest) for unit and performance testing\n\nTo generate user documentation and run tests please proceed with the steps below:\n\n1. Execute `git submodule update --init` to get the files of thirdparty submodules (google test).\n2. Create directory called `build` in rapidjson source directory.\n3. Change to `build` directory and run `cmake ..` command to configure your build. Windows users can do the same with cmake-gui application.\n4. On Windows, build the solution found in the build directory. On Linux, run `make` from the build directory.\n\nOn successfull build you will find compiled test and example binaries in `bin`\ndirectory. The generated documentation will be available in `doc/html`\ndirectory of the build tree. To run tests after finished build please run `make\ntest` or `ctest` from your build tree. You can get detailed output using `ctest\n-V` command.\n\nIt is possible to install library system-wide by running `make install` command\nfrom the build tree with administrative privileges. This will install all files\naccording to system preferences.  Once RapidJSON is installed, it is possible\nto use it from other CMake projects by adding `find_package(RapidJSON)` line to\nyour CMakeLists.txt.\n\n## Usage at a glance\n\nThis simple example parses a JSON string into a document (DOM), make a simple modification of the DOM, and finally stringify the DOM to a JSON string.\n\n~~~~~~~~~~cpp\n// rapidjson/example/simpledom/simpledom.cpp`\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n#include <iostream>\n\nusing namespace rapidjson;\n\nint main() {\n    // 1. Parse a JSON string into DOM.\n    const char* json = \"{\\\"project\\\":\\\"rapidjson\\\",\\\"stars\\\":10}\";\n    Document d;\n    d.Parse(json);\n\n    // 2. Modify it by DOM.\n    Value& s = d[\"stars\"];\n    s.SetInt(s.GetInt() + 1);\n\n    // 3. Stringify the DOM\n    StringBuffer buffer;\n    Writer<StringBuffer> writer(buffer);\n    d.Accept(writer);\n\n    // Output {\"project\":\"rapidjson\",\"stars\":11}\n    std::cout << buffer.GetString() << std::endl;\n    return 0;\n}\n~~~~~~~~~~\n\nNote that this example did not handle potential errors.\n\nThe following diagram shows the process.\n\n![simpledom](doc/diagram/simpledom.png)\n\nMore [examples](https://github.com/miloyip/rapidjson/tree/master/example) are available:\n\n* DOM API\n * [tutorial](https://github.com/miloyip/rapidjson/blob/master/example/tutorial/tutorial.cpp): Basic usage of DOM API.\n\n* SAX API\n * [simplereader](https://github.com/miloyip/rapidjson/blob/master/example/simplereader/simplereader.cpp): Dumps all SAX events while parsing a JSON by `Reader`.\n * [condense](https://github.com/miloyip/rapidjson/blob/master/example/condense/condense.cpp): A command line tool to rewrite a JSON, with all whitespaces removed.\n * [pretty](https://github.com/miloyip/rapidjson/blob/master/example/pretty/pretty.cpp): A command line tool to rewrite a JSON with indents and newlines by `PrettyWriter`.\n * [capitalize](https://github.com/miloyip/rapidjson/blob/master/example/capitalize/capitalize.cpp): A command line tool to capitalize strings in JSON.\n * [messagereader](https://github.com/miloyip/rapidjson/blob/master/example/messagereader/messagereader.cpp): Parse a JSON message with SAX API.\n * [serialize](https://github.com/miloyip/rapidjson/blob/master/example/serialize/serialize.cpp): Serialize a C++ object into JSON with SAX API.\n * [jsonx](https://github.com/miloyip/rapidjson/blob/master/example/jsonx/jsonx.cpp): Implements a `JsonxWriter` which stringify SAX events into [JSONx](https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html) (a kind of XML) format. The example is a command line tool which converts input JSON into JSONx format.\n\n* Schema\n * [schemavalidator](https://github.com/miloyip/rapidjson/blob/master/example/schemavalidator/schemavalidator.cpp) : A command line tool to validate a JSON with a JSON schema.\n \n* Advanced\n * [prettyauto](https://github.com/miloyip/rapidjson/blob/master/example/prettyauto/prettyauto.cpp): A modified version of [pretty](https://github.com/miloyip/rapidjson/blob/master/example/pretty/pretty.cpp) to automatically handle JSON with any UTF encodings.\n * [parsebyparts](https://github.com/miloyip/rapidjson/blob/master/example/parsebyparts/parsebyparts.cpp): Implements an `AsyncDocumentParser` which can parse JSON in parts, using C++11 thread.\n * [filterkey](https://github.com/miloyip/rapidjson/blob/master/example/filterkey/filterkey.cpp): A command line tool to remove all values with user-specified key.\n * [filterkeydom](https://github.com/miloyip/rapidjson/blob/master/example/filterkeydom/filterkeydom.cpp): Same tool as above, but it demonstrates how to use a generator to populate a `Document`.\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:rapidjson\" ]",
      "lockFile": "",
      "buck": "prebuilt_cxx_library(\n  name = 'rapidjson', \n  header_namespace = 'rapidjson', \n  header_only = True, \n  exported_headers = subdir_glob([\n    ('include/rapidjson', '**/*.h'), \n  ]), \n  visibility = [\n    'PUBLIC', \n  ], \n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2018-11-13T12:08:28Z",
  "updatedUpstream": "2018-12-13T19:45:46Z",
  "contributors": [
    {
      "login": "kkaefer",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/52399?u=7b3a53dfef51246b5c1342108a664842b4ea3571&v=4"
    },
    {
      "login": "willwhite",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/93564?u=3e17a4a45e3ce686ca811d9ed79257db04ff345f&v=4"
    },
    {
      "login": "cmulli",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/475316?u=b1c7a2d06598e9e7943eb92ec24f4e2506b0e663&v=4"
    },
    {
      "login": "rclark",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/515424?v=4"
    },
    {
      "login": "ArpitaBiswas",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/3260021?u=a05ba5a53cae750c4df144e4d9e1fe5d001098e3&v=4"
    },
    {
      "login": "npeternel",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/10649205?u=7001985db8cddc3bfc9ba581aaee4473a5909e18&v=4"
    },
    {
      "login": "jlin12358",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/18368871?v=4"
    },
    {
      "login": "Hotelkin",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/19272678?u=b5924fce2af6b92a26335a7f5ad28ab4f32f5f38&v=4"
    },
    {
      "login": "trevorspecht",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/29611310?u=0a53808c4bb714c22424f2da07022122de64f58e&v=4"
    },
    {
      "login": "platanosf",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/44051572?v=4"
    },
    {
      "login": "cole-seph-work",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/53199598?u=c71e5b7a71747e17a316b7cc14b9bf127ca8ea35&v=4"
    },
    {
      "login": "mapboxit",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/55812960?v=4"
    },
    {
      "login": "shaina43",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/57018853?u=214f118fb6981a1a81b126f0301f3fc50c73fa83&v=4"
    },
    {
      "login": "mapbox-machine-integration",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/57966702?v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 0,
  "forks": 3,
  "topics": []
}