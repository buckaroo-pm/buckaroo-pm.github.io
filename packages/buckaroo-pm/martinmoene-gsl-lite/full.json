{
  "packageName": "buckaroo-pm/martinmoene-gsl-lite",
  "name": "gsl-lite/gsl-lite",
  "licence": "MIT",
  "description": "gsl lite - A single-file header-only version of ISO C++ Guideline Support Library (GSL) for C++98, C++11 and later",
  "readme": "# GSL Lite: Guidelines Support Library for C++98, C++11 up\n\n[![Language](https://img.shields.io/badge/C%2B%2B-98/11/14/17-blue.svg)](https://en.wikipedia.org/wiki/C%2B%2B#Standardization) [![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT) [![Build Status](https://travis-ci.org/martinmoene/gsl-lite.svg?branch=master)](https://travis-ci.org/martinmoene/gsl-lite) [![Build status](https://ci.appveyor.com/api/projects/status/1ha3wnxtam547m8p?svg=true)](https://ci.appveyor.com/project/martinmoene/gsl-lite) [![Version](https://badge.fury.io/gh/martinmoene%2Fgsl-lite.svg)](https://github.com/martinmoene/gsl-lite/releases) [![download](https://img.shields.io/badge/latest-download-blue.svg)](https://raw.githubusercontent.com/martinmoene/gsl-lite/master/include/gsl/gsl-lite.hpp) [![Conan](https://img.shields.io/badge/on-conan-blue.svg)](https://bintray.com/agauniyal/nonstd-lite/gsl-lite%3Anonstd-lite/_latestVersion) [![Try it on wandbox](https://img.shields.io/badge/on-wandbox-blue.svg)](https://wandbox.org/permlink/jsvAM5JFhlYHVOIN) [![Try it on godbolt online](https://img.shields.io/badge/on-godbolt-blue.svg)](https://godbolt.org/g/iEAxnY)\n\n\nGSL Lite is based on the [Microsoft Guidelines Support Library (GSL)](https://github.com/microsoft/gsl). \n\n**Contents**  \n- [Example usage](#example-usage)\n- [In a nutshell](#in-a-nutshell)\n- [License](#license)\n- [Dependencies](#dependencies)\n- [Installation and use](#installation-and-use)\n- [Synopsis](#synopsis)\n- [Features](#features)\n- [Deprecation](#deprecation)\n- [Reported to work with](#reported-to-work-with)\n- [Building the tests](#building-the-tests)\n- [Other GSL implementations](#other-gsl-implementations)\n- [Notes and references](#notes-and-references)\n- [Appendix](#appendix)\n\n\nExample usage\n-------------\n\n```Cpp\n#include \"gsl-lite.hpp\"\n\nusing namespace gsl;\n\nint * use( not_null<int *> p ) \n{\n    // use p knowing it's not nullptr, NULL or 0.\n    \n    return p;\n}\n\nstruct Widget\n{\n    Widget() : owned_ptr( new int(42) ) {}\n    ~Widget() { delete owned_ptr; }\n\n    void work() { non_owned_ptr = use( owned_ptr ); }\n    \n    owner<int *> owned_ptr;\t// if alias template support\n//  Owner(int *) owned_ptr;\t// C++98 up\n    int * non_owned_ptr;\n};\n\nint main()\n{\n    Widget w;\n    w.work();\n}\n```\n\n### Compile and run\n\n```\nprompt>g++ -std=c++03 -Wall -I../include/gsl -o 01-basic.exe 01-basic.cpp && 01-basic.exe\n```\n\nIn a nutshell\n-------------\n**gsl-lite** is a single-file header-only variant of Microsoft's implementation of the [Guidelines Support Library (GSL)](https://github.com/Microsoft/GSL) adapted for C++98, C++03. It should also work when compiled as C++11, C++14, C++17.\n\nThe Guidelines Support Library (GSL) contains functions and types that are suggested for use by the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines) maintained by the [Standard C++ Foundation](https://isocpp.org/). The library includes types like `owner<>`, `not_null<>`, `span<>`, `string_span` and [others](#features).\n\n*gsl-lite* recognizes when it is compiled for the CUDA platform and decorates functions (methods) with `__host__` and `__device__`. See also section [API macro](#api-macro).\n\n\nLicense\n-------\n*gsl-lite* uses the [MIT](LICENSE) license.\n \n\nDependencies\n------------\n*gsl-lite* has no other dependencies than the [C++ standard library](http://en.cppreference.com/w/cpp/header).\n\n\nInstallation and use\n--------------------\n*gsl-lite* is a single-file header-only library. There are various ways to use it in your project. \n\n**Contents**  \n- [As copied header](#as-copied-header)\n- [As external Git project](#as-external-git-project)\n- [As CMake package](#as-cmake-package)\n- [As Conan package](#as-conan-package)\n\n### As copied header\n\nPut a copy of [`gsl-lite.hpp`](include/gsl/gsl-lite.hpp) located in folder [include/gsl](include/gsl) directly into the project source tree or somewhere reachable from your project, for example in *project-root*/include/gsl. If you like to refer to gsl-lite as `gsl`, also copy the file [`gsl`](include/gsl/gsl). A minimal CMake setup using this header might look as follows.\n\nIn project root folder:\n\n```CMake\ncmake_minimum_required( VERSION 3.5 )\n\nproject( use-gsl-lite LANGUAGES CXX )\n\n# Provide #include access to gsl-lite as 'gsl/gsl' and as 'gsl/gsl-lite.hpp': \n\nset( GSL_LITE_INCLUDE_DIR include )  # adapt as necessary\nadd_library( gsl INTERFACE )\ntarget_include_directories( gsl INTERFACE ${GSL_LITE_INCLUDE_DIR} )\n\n# Build program from src:\n\nadd_subdirectory( src ) \n```\n\nIn folder src:\n\n```CMake\ncmake_minimum_required( VERSION 3.5 )\n\nproject( program-using-gsl-lite LANGUAGES CXX )\n\n# Make program executable:\n\nset( SOURCES main.cpp)\nadd_executable( program ${SOURCES} )\ntarget_link_libraries( program PRIVATE gsl )\n```\n\n### As external Git project\n\nAnother approach is to automatically fetch the entire *gsl-lite* repository from github and configure it as an external project.\n\n```CMake\ncmake_minimum_required( VERSION 3.5 )\n\nproject( use-gsl-lite LANGUAGES CXX )\n\n# Set default ExternalProject root directory and add gsl-lite:\n\nset( GSL_LITE_URL https://github.com/martinmoene/gsl-lite.git )\n\ninclude( ExternalProject )\nfind_package( Git REQUIRED )\n\nset_directory_properties( PROPERTIES EP_PREFIX ${CMAKE_BINARY_DIR}/3rd_party )\n\nExternalProject_Add(\n    gsl-extern\n    GIT_REPOSITORY ${GSL_LITE_URL}\n    TIMEOUT 10\n    UPDATE_COMMAND ${GIT_EXECUTABLE} pull\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND \"\"\n    INSTALL_COMMAND \"\"\n    LOG_DOWNLOAD ON\n   )\n\n# Provide #include access to gsl-lite as 'gsl/gsl' and as 'gsl/gsl-lite.hpp': \n\nExternalProject_Get_Property( gsl-extern SOURCE_DIR )\nset( GSL_LITE_INCLUDE_DIR ${SOURCE_DIR}/include CACHE INTERNAL \"Include folder for gsl-lite\")\n\nadd_library( gsl INTERFACE )\ntarget_include_directories( gsl INTERFACE ${GSL_LITE_INCLUDE_DIR} )\n\n# Build program from src:\n\nadd_subdirectory( src ) \n```\n\nIn folder src:\n```CMake\ncmake_minimum_required( VERSION 3.5 )\n\nproject( program-using-gsl-lite LANGUAGES CXX )\n\n# Make program executable:\n\nset( SOURCES main.cpp)\nadd_executable( program ${SOURCES} )\ntarget_link_libraries( program PRIVATE gsl )\n```\n\nThis setup brings in more than you need, but also makes it easy to update *gsl-lite* to the latest version.  See [example/cmake-extern](example/cmake-extern) for a complete example.\n\n\n### As CMake package\n\n1. First install the *gsl-lite* CMake package from its source, for example:\n\n\t\tcd ./gsl-lite\n\t\tcmake -H. -B../_build -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=\"~/dev/native/gsl-lite/gsl-lite-0.29.0\"\n\t\tcmake --build ../_build --target install\n\n\tSee also [script/install-gsl-pkg.py](script/install-gsl-pkg.py) that can perform these steps for you. It also lets you control compiler and build configuration.\n\n2. Next, you can use the *gsl-lite* CMake package, for example:\n\n\t```CMake\n\tcmake_minimum_required( VERSION 3.5 )\n\t\n\tfind_package( gsl-lite \"0.29\" REQUIRED )\n\t\n\tproject( program-using-gsl-lite LANGUAGES CXX )\n\t\n\tadd_executable(        program main.cpp )\n\ttarget_link_libraries( program PRIVATE gsl-lite::gsl-lite )\n\t```\n\tConfigure and build:\n\n\t\tcd ./gsl-lite/example/cmake-pkg\n\t\tcmake -H. -B../_build -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=_stage -Dgsl-lite_DIR=\"~/dev/native/gsl-lite/gsl-lite-0.29.0/lib/cmake/gsl-lite\"\n\t\tcmake --build ../_build\n\n\tHere, variable `gsl-lite_DIR` lets you specify the path to the CMake Package Configuration file of *gsl-lite*. See [example/cmake-pkg](example/cmake-pkg) for a complete example.\n\n### As Conan package\n\nFor the [conan package manager](https://www.conan.io/), follow these steps:\n\n1. Add *nonstd-lite* to the conan remotes:\n\n        conan remote add nonstd-lite https://api.bintray.com/conan/agauniyal/nonstd-lite\n\n2. Add a reference to *gsl-lite* to the *requires* section of your project's `conanfile.txt` file:\n\n        [requires]\n        gsl-lite/0.26.0@nonstd-lite/stable\n\n3. Run conan's install command:\n\n        conan install\n\n\nSynopsis\n--------\n\n**Contents**  \n- [API macro](#api-macro)\n- [Standard selection macro](#standard-selection-macro)\n- [Feature selection macros](#feature-selection-macros)\n- [Contract violation response macros](#contract-violation-response-macros)\n- [Microsoft GSL compatibility macros](#microsoft-gsl-compatibility-macros)\n- [Other configuration macros](#other-configuration-macros)\n\n### API macro\n\n\\-D<b>gsl\\_api</b>=\"\"  \nFunctions (methods) are decorated with `gsl_api`. At default `gsl_api` is defined empty for non-CUDA platforms and `__host__ __device__` for the CUDA platform. Define this macro to specify your own function decoration. \n\n### Standard selection macro\n\n\\-D<b>gsl\\_CPLUSPLUS</b>=199711L\nDefine this macro to override the auto-detection of the supported C++ standard, if your compiler does not set the `__cpluplus` macro correctly.\n\n### Feature selection macros\n\n\\-D<b>gsl\\_FEATURE\\_WITH\\_CONTAINER\\_TO\\_STD</b>=99  \nDefine this to the highest C++ standard (98, 3, 11, 14, 17, 20) you want to include tagged-construction via `with_container`. Default is 99 for inclusion with any standard.\n\n\\-D<b>gsl\\_FEATURE\\_MAKE\\_SPAN\\_TO\\_STD</b>=99  \nDefine this to the highest C++ standard (98, 3, 11, 14, 17, 20) you want to include `make_span()` creator functions. Default is 99 for inclusion with any standard.\n\n\\-D<b>gsl\\_FEATURE\\_BYTE\\_SPAN\\_TO\\_STD</b>=99  \nDefine this to the highest C++ standard (98, 3, 11, 14, 17, 20) you want to include `byte_span()` creator functions. Default is 99 for inclusion with any standard.\n\n\\-D<b>gsl\\_FEATURE\\_HAVE\\_IMPLICIT\\_MACRO</b>=1  \nDefine this macro to 0 to omit the `implicit` macro. Default is 1.\n\n\\-D<b>gsl\\_FEATURE\\_HAVE\\_OWNER\\_MACRO</b>=1  \nAt default macro `Owner()` is defined for all C++ versions. This may be useful to transition  from a compiler that doesn't provide alias templates to one that does. Define this macro to 0 to omit the `Owner()` macro. Default is 1.\n\n\\-D<b>gsl\\_FEATURE\\_EXPERIMENTAL\\_RETURN\\_GUARD</b>=0  \nProvide experimental types `final_action_return` and `final_action_error` and convenience functions `on_return()` and `on_error()`. Default is 0.\n\n### Contract violation response macros\n\n*gsl-lite* provides contract violation response control as suggested in proposal [N4415](http://wg21.link/n4415).\n\n\\-D<b>gsl\\_CONFIG\\_CONTRACT\\_LEVEL\\_ON</b>  \nDefine this macro to include both `Expects` and `Ensures` in the code. This is the default case.\n \n\\-D<b>gsl\\_CONFIG\\_CONTRACT\\_LEVEL\\_OFF</b>  \nDefine this macro to exclude both `Expects` and `Ensures` from the code.\n\n\\-D<b>gsl\\_CONFIG_CONTRACT\\_LEVEL\\_EXPECTS\\_ONLY</b>  \nDefine this macro to include `Expects` in the code and exclude `Ensures` from the code.\n\n\\-D<b>gsl\\_CONFIG\\_CONTRACT\\_LEVEL\\_ENSURES\\_ONLY</b>  \nDefine this macro to exclude `Expects` from the code and include `Ensures` in the code.\n\n\\-D<b>gsl\\_CONFIG\\_CONTRACT\\_VIOLATION\\_TERMINATES</b>  \nDefine this macro to call `std::terminate()` on a GSL contract violation in `Expects`, `Ensures` and `narrow`. This is the default case.\n\n\\-D<b>gsl\\_CONFIG\\_CONTRACT\\_VIOLATION\\_THROWS</b>  \nDefine this macro to throw a std::runtime_exception-derived exception `gsl::fail_fast` instead of calling `std::terminate()` on a GSL contract violation in `Expects`, `Ensures` and throw a std::exception-derived exception `narrowing_error` on discarding  information in `narrow`.\n\n### Microsoft GSL compatibility macros\n\n\\-D<b>GSL_UNENFORCED_ON_CONTRACT_VIOLATION</b>  \nEquivalent to -Dgsl_CONFIG_CONTRACT_LEVEL_OFF.\n\n\\-D<b>GSL\\_THROW\\_ON\\_CONTRACT\\_VIOLATION</b>  \nEquivalent to -Dgsl\\_CONFIG\\_CONTRACT\\_VIOLATION\\_THROWS.\n\n\\-D<b>GSL\\_TERMINATE\\_ON\\_CONTRACT\\_VIOLATION</b>  \nEquivalent to -Dgsl\\_CONFIG\\_CONTRACT\\_VIOLATION\\_TERMINATES.\n\n### Other configuration macros\n\n\\-D<b>gsl\\_CONFIG\\_DEPRECATE\\_TO\\_LEVEL</b>=0  \nDefine this to and including the level you want deprecation; see table [Deprecation](#deprecation) below. Default is 0 for no deprecation.\n\n\\-D<b>gsl\\_CONFIG\\_SPAN\\_INDEX\\_TYPE</b>=size_t  \nDefine this macro to the type to use for indices in `span` and `basic_string_span`. Microsoft's GSL uses `std::ptrdiff_t`. Default for *gsl lite* is `size_t`.\n\n\\-D<b>gsl\\_CONFIG\\_NOT\\_NULL\\_EXPLICIT\\_CTOR</b>=0  \nDefine this macro to 1 to make `not_null`'s constructor explicit. Default is 0. Note that in Microsoft's GSL the constructor is explicit. For implicit construction you can also use the *gsl lite*-specific `not_null`-derived class `not_null_ic`.\n\n\\-D<b>gsl\\_CONFIG\\_NOT\\_NULL\\_GET_BY\\_CONST\\_REF</b>=0  \nDefine this macro to 1 to have `not_null<>::get()` and relatives return by `T const &` instead of `T`. This may improve performance with types that have an expensive copy-constructor. Default is 0 for `T`. \n\n\\-D<b>gsl\\_CONFIG\\_ALLOWS\\_NONSTRICT\\_SPAN\\_COMPARISON</b>=1  \nDefine this macro to 0 to omit the ability to compare spans of different types, e.g. of different const-volatile-ness. To be able to compare a string_span with a cstring_span, non-strict span comparison must be available. Default is 1.\n\n\\-D<b>gsl\\_CONFIG\\_ALLOWS\\_UNCONSTRAINED\\_SPAN\\_CONTAINER\\_CTOR</b>=0  \nDefine this macro to 1 to add the unconstrained span constructor for containers for pre-C++11 compilers that cannot constrain the constructor. This constructor may prove too greedy and interfere with other constructors. Default is 0.\n\nNote: an alternative is to use the constructor tagged `with_container`: span&lt;_value_type_> *s*(with_container, *cont*). \n\n\\-D<b>gsl\\_CONFIG\\_CONFIRMS\\_COMPILATION\\_ERRORS</b>=0  \nDefine this macro to 1 to experience the by-design compile-time errors of the GSL components in the test suite. Default is 0.\n\n\nFeatures\n--------\nSee also section [GSL: Guidelines Support Library](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#S-gsl) of the C++ Core Guidelines [9]. \n\nFeature / library           | GSL     | M-GSL   | GSL-Lite| Notes |\n----------------------------|:-------:|:-------:|:-------:|:------|\n**1.Lifetime&nbsp;safety**  | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\n**1.1 Indirection**         | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nnot_null<>                  | &#10003;| &#10003;| &#10003;| Wrap any indirection and enforce non-null,<br>see also [Other configuration macros](#other-configuration-macros) |\nnot_null_ic<>               | -       | -       | &#10003;| not_null with implicit constructor, allowing [copy-initialization](https://en.cppreference.com/w/cpp/language/copy_initialization) |\n**1.2 Ownership**           | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nowner<>                     | &#10003;| &#10003;| >=C++11 | Owned raw pointers |\nOwner()                     | -       | -       | &#10003;| Macro for pre-C++11;<br>see also [Feature selection macros](#feature-selection-macros) |\nunique_ptr<>                | &#10003;| &#10003;| >=C++11 | std::unique_ptr<> |\nunique_ptr<>                | -       | -       | < C++11 | VC10, VC11 |\nshared_ptr<>                | &#10003;| &#10003;| >=C++11 | std::shared_ptr<> |\nshared_ptr<>                | -       | -       | < C++11 | VC10, VC11<br>see also [Extract Boost smart pointers](#a1-extract-boost-smart-pointers) |\nstack_array<>               | &#10003;| -       | -       | A stack-allocated array, fixed size |\ndyn_array<>                 | ?       | -       | -       | A heap-allocated array, fixed size |\n**2.Bounds&nbsp;safety**    | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\n**2.1 Tag Types**           | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nzstring                     | &#10003;| &#10003;| &#10003;| a char* (C-style string) |\nwzstring                    | -       | &#10003;| &#10003;| a wchar_t* (C-style string) |\nczstring                    | &#10003;| &#10003;| &#10003;| a const char* (C-style string) |\ncwzstring                   | -       | &#10003;| &#10003;| a const wchar_t* (C-style string) |\n**2.2 Views**               | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nspan<>                      | &#10003;| &#10003;| 1D views| A view of contiguous T's, replace (*,len),<br>see also proposal [p0122](http://wg21.link/p0122) |\nspan_p<>                    | &#10003;| -       | -       | A view of contiguous T's that ends at the first element for which predicate(*p) is true |\nmake_span()                 | -       | &#10003;| &#10003;| Create a span |\nbyte_span()                 | -       | -       | &#10003;| Create a span of bytes from a single object |\nas_bytes()                  | -       | &#10003;| &#10003;| A span as bytes |\nas_writeable_bytes          | -       | &#10003;| &#10003;| A span as writeable bytes |\nbasic_string_span<>         | -       | &#10003;| &#10003;| See also proposal [p0123](http://wg21.link/p0123) |\nstring_span                 | &#10003;| &#10003;| &#10003;| basic_string_span&lt;char> |\nwstring_span                | -       | &#10003;| &#10003;| basic_string_span&lt;wchar_t > |\ncstring_span                | &#10003;| &#10003;| &#10003;| basic_string_span&lt;const char> |\ncwstring_span               | -       | &#10003;| &#10003;| basic_string_span&lt;const wchar_t > |\nensure_z()                  | -       | &#10003;| &#10003;| Create a cstring_span or cwstring_span |\nto_string()                 | -       | &#10003;| &#10003;| Convert a string_span to std::string or std::wstring |\n**2.3 Indexing**            | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nat()                        | &#10003;| &#10003;| >=C++11 | Bounds-checked way of accessing<br>static arrays, std::array, std::vector |\nat()                        | -       | -       | < C++11 | static arrays, std::vector<br>std::array : VC11 |\n**3. Assertions**           | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nExpects()                   | &#10003;| &#10003;| &#10003;| Precondition assertion |\nEnsures()                   | &#10003;| &#10003;| &#10003;| Postcondition assertion |\n**4. Utilities**            | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\nindex                       | &#10003;| &#10003;| &#10003;| type for container indexes, subscripts, sizes,<br>see [Other configuration macros](#other-configuration-macros) |\nbyte                        | -       | &#10003;| &#10003;| byte type, see also proposal [p0298](http://wg21.link/p0298) |\nfinal_action<>              | &#10003;| &#10003;| >=C++11 | Action at the end of a scope |\nfinal_action                | -       | -       | < C++11 | Currently only void(*)() |\nfinally()                   | &#10003;| &#10003;| >=C++11 | Make a final_action<> |\nfinally()                   | -       | -       | < C++11 | Make a final_action |\nfinal_action_return         | -       | -       | < C++11 | Currently only void(*)(), [experimental](#feature-selection-macros) |\non_return()                 | -       | -       | >=C++11 | Make a final_action_return<>, [experimental](#feature-selection-macros) |\non_return()                 | -       | -       | < C++11 | Make a final_action_return, [experimental](#feature-selection-macros) |\nfinal_action_error          | -       | -       | < C++11 | Currently only void(*)(), [experimental](#feature-selection-macros) |\non_error()                  | -       | -       | >=C++11 | Make a final_action_error<>, [experimental](#feature-selection-macros) |\non_error()                  | -       | -       | < C++11 | Make a final_action_error, [experimental](#feature-selection-macros) |\nnarrow_cast<>               | &#10003;| &#10003;| &#10003;| Searchable narrowing casts of values |\nnarrow()                    | &#10003;| &#10003;| &#10003;| Checked version of narrow_cast() |\nimplicit                    | &#10003;| -       | &#10003;| Symmetric with explicit |\nmove_owner                  | ?       | -       | -       | ... |\n**5. Algorithms**           | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\ncopy()                      | &nbsp;  | &nbsp;  | &nbsp;  | Copy from source span to destination span |\n**6. Concepts**             | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\n...                         | &nbsp;  | &nbsp;  | &nbsp;  | &nbsp; |\n\nNote: GSL Lite treats VC12 (VS2013) and VC14 (VS2015) as C++11 (gsl_CPP11_OR_GREATER: 1).\n\n\nDeprecation\n---------------------\nThe following features are deprecated since the indicated version. See macro [`gsl_CONFIG_DEPRECATE_TO_LEVEL`](#other-configuration-macros) on how to control deprecation using the indicated level.\n\nVersion | Level | Feature / Notes |\n-------:|:-----:|:----------------|\n0.31.0  |   5   | span( std::nullptr_t, index_type ) |\n&nbsp;  |&nbsp; | span( pointer, index_type ) is used |\n0.31.0  |   5   | span( U *, index_type size ) |\n&nbsp;  |&nbsp; | span( pointer, index_type ) is used |\n0.31.0  |   5   | span( U (&arr)[N] ) |\n&nbsp;  |&nbsp; | span( element_type (&arr)[N] ) is used |\n0.31.0  |   5   | span( std::array< U, N > [const] & arr ) |\n&nbsp;  |&nbsp; | span( std::array< value_type, N > [const] & arr ) is used |\n0.29.0  |   4   | span::span( std::shared_ptr<T> const & p ) |\n&nbsp;  |&nbsp; | Use span( p.get(), p.get() ? 1 : 0 ) or equivalent |\n0.29.0  |   4   | span::span( std::unique_ptr<T> const & p ) |\n&nbsp;  |&nbsp; | Use Use span( p.get(), p.get() ? 1 : 0 ) or equivalent  |\n0.29.0  |   3   | span::length() |\n&nbsp;  |&nbsp; | Use span::size() |\n0.29.0  |   3   | span::length_bytes() |\n&nbsp;  |&nbsp; | Use span::size_bytes() |\n0.17.0  |   2   | member span::as_bytes(), span::as_writeable_bytes() |\n&nbsp;  |&nbsp; | &mdash; |\n0.7.0   |   1   | gsl_CONFIG_ALLOWS_SPAN_CONTAINER_CTOR |\n&nbsp;  |&nbsp; | Use gsl_CONFIG_ALLOWS_UNCONSTRAINED_SPAN_CONTAINER_CTOR,<br>or consider span(with_container, cont). |\n\n\nReported to work with\n---------------------\nThe table below mentions the compiler versions *gsl-lite* is reported to work with.\n\nOS           | Compiler   | Where  | Versions |\n------------:|:-----------|-------:|----------|\n**GNU/Linux**| Clang/LLVM | Travis | 3.4, 3.4, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0 |\n&nbsp;       | GCC        | Travis | 5.4.1, 6.3.0, 7.2.0 |\n**OS X**     | ?          | &nbsp; | ? |\n**Windows**  | Clang/LLVM | &nbsp; | ? |\n&nbsp;       | GCC        | Local  |4.8.4, 4.9.2, 5.2.0, 7.2.0 |\n&nbsp;       | Visual C++<br>(Visual Studio)| Local<br>Local<br>AppVeyor | 6 (6) via header [gsl-lite-vc6.hpp](include/gsl/gsl-lite-vc6.hpp) (not up to date)<br>8 (2005),<br> 10 (2010), 11 (2012), 12 (2013), 14 (2015), 15 (2017) |\n**DOSBox**   | DJGPP      | Local  | DJGPP for GCC 7.2.0 |\n**FreeDOS**  | DJGPP      | Local  | DJGPP for GCC 7.2.0 |\n\n\nBuilding the tests\n------------------\nTo build the tests you need:\n\n- [CMake](http://cmake.org), version 3.0 or later to be installed and in your PATH.\n- A [suitable compiler](#reported-to-work-with). \n\nThe [*lest* test framework](https://github.com/martinmoene/lest)  is included in the [test folder](test).\n \nThe following steps assume that the [GSL Lite source code](https://github.com/martinmoene/gsl-lite) has been cloned into a directory named `c:\\gsl-lite`.\n\n1. Create a directory for the build outputs for a particular architecture.  \nHere we use c:\\gsl-lite\\build-win-x86-vc10.\n\n        cd c:\\gsl-lite\n        md build-win-x86-vc10\n        cd build-win-x86-vc10\n\n2. Configure CMake to use the compiler of your choice (run `cmake --help` for a list).\n\n        cmake -G \"Visual Studio 10 2010\" ..\n\n3. Build the test suite in the Debug configuration (alternatively use Release).    \n\n        cmake --build . --config Debug\n\n4. Run the test suite.    \n\n        ctest -V -C Debug\n\nAll tests should pass, indicating your platform is supported and you are ready to use *gsl-lite*. See the table with [supported types and functions](#features).\n\n\nOther GSL implementations\n-------------------------\n- Microsoft. [Guidelines Support Library (GSL)](https://github.com/microsoft/gsl).\n- Vicente J. Botet Escriba. [Guidelines Support Library (GSL)](https://github.com/viboes/GSL).\n- Mattia Basaglia. CxxMiscLib [gsl.hpp](https://github.com/mbasaglia/Cxx-MiscLib/blob/master/include/misclib/gsl.hpp), [tests](https://github.com/mbasaglia/Cxx-MiscLib/blob/master/test/gsl.cpp).\n\n\nNotes and references\n--------------------\n### Proposals, specification\n[1] [span on cppreference](http://en.cppreference.com/w/cpp/string/span).  \n[2] [span in C++20 Working Draft](http://eel.is/c++draft/views).  \n[3] [p0091 - Template argument deduction for class templates](http://wg21.link/p0091).  \n[4] [p0122 - span: bounds-safe views for sequences of objects](http://wg21.link/p0122).  \n[5] [p0123 - string_span: bounds-safe views for sequences of characters ](http://wg21.link/p0123).  \n[6] [p0298 - A byte type definition](http://wg21.link/p0298).  \n[7] [p0805 - Comparing Containers](http://wg21.link/p0805).  \n\n### Articles\n[8] [Standard C++ Foundation](https://isocpp.org/).  \n[9] Standard C++ Foundation. [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines).  \n[10] Microsoft. [Guidelines Support Library (GSL)](https://github.com/microsoft/gsl).  \n[11] Bjarne Stroustrup. [Writing good C++14 (PDF)](https://github.com/isocpp/CppCoreGuidelines/raw/master/talks/Stroustrup%20-%20CppCon%202015%20keynote.pdf) &mdash; [Video](https://www.youtube.com/watch?t=9&v=1OEu9C51K2A). CppCon 2015.  \n[12] Herb Sutter. [Writing good C++14&hellip; By default (PDF)](https://github.com/isocpp/CppCoreGuidelines/raw/master/talks/Sutter%20-%20CppCon%202015%20day%202%20plenary%20.pdf) &mdash; [Video](https://www.youtube.com/watch?v=hEx5DNLWGgA). CppCon 2015.  \n[13] Gabriel Dos Reis. [Contracts for Dependable C++ (PDF)](https://github.com/isocpp/CppCoreGuidelines/raw/master/talks/Contracts-for-Dependable-C%2B%2B.pdf)  &mdash; Video. CppCon 2015.  \n[14] Bjarne Stroustrup et al. [A brief introduction to C++’s model for type- and resource-safety](https://github.com/isocpp/CppCoreGuidelines/raw/master/docs/Introduction%20to%20type%20and%20resource%20safety.pdf).  \n[15] Herb Sutter and Neil MacIntosh. [Lifetime Safety: Preventing Leaks and Dangling](https://github.com/isocpp/CppCoreGuidelines/raw/master/docs/Lifetimes%20I%20and%20II%20-%20v0.9.1.pdf). 21 Sep 2015.\n\n### Compiler feature testing\n[16] cppreference.com. [Feature Test Recommendations](http://en.cppreference.com/w/cpp/experimental/feature_test).  \n[17] cppreference.com. [Feature testing macros](http://en.cppreference.com/w/User:D41D8CD98F/feature_testing_macros).  \n\n### C++ features in various Visual C++ compilers\n[18] Visual CPP Team. [C++0x Core Language Features In VC10: The Table](http://blogs.msdn.com/b/vcblog/archive/2010/04/06/c-0x-core-language-features-in-vc10-the-table.aspx). Microsoft. 6 April 2010.  \n[19] Visual CPP Team. [C++11 Features in Visual C++ 11](http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx). Microsoft. 12 September 2011.  \n[20] Joel Coehoorn. [C++11 features in Visual Studio 2012](http://stackoverflow.com/a/7422058/437272). StackOverflow. 14 September 2011.  \n[21] Stephan T. Lavavej. [C++11/14 Features In Visual Studio 14 CTP3](http://blogs.msdn.com/b/vcblog/archive/2014/08/21/c-11-14-features-in-visual-studio-14-ctp3.aspx). Microsoft. 21 August 2014.  \n[22] Stephan T. Lavavej. [C++11/14/17 Features In VS 2015 RTM](http://blogs.msdn.com/b/vcblog/archive/2015/06/19/c-11-14-17-features-in-vs-2015-rtm.aspx). Microsoft. 19 June 2015.  \n\nAppendix\n--------\n### A.1 Extract Boost smart pointers\n\nTo obtain a subset of Boost only containing the smart pointers, use the [bcp command](http://www.boost.org/doc/libs/1_59_0/tools/bcp/doc/html/index.html) like:\n\n    C:\\Libraries\\boost\\boost_1_51>bin\\bcp scoped_ptr.hpp shared_ptr.hpp weak_ptr.hpp make_shared.hpp C:\\Libraries\\boost-shared_ptr\n\nThe smart pointers of Boost 1.51 can be used with VC6.\n\n### A.2 GSL Lite test specification\n\n```\nExpects(): Allows a true expression\nEnsures(): Allows a true expression\nExpects(): Terminates on a false expression\nEnsures(): Terminates on a false expression\nat(): Terminates access to non-existing C-array elements\nat(): Terminates access to non-existing std::array elements (C++11)\nat(): Terminates access to non-existing std::vector elements\nat(): Terminates access to non-existing std::initializer_list elements (C++11)\nat(): Terminates access to non-existing gsl::span elements\nat(): Allows to access existing C-array elements\nat(): Allows to access existing std::array elements (C++11)\nat(): Allows to access existing std::vector elements\nat(): Allows to access std::initializer_list elements (C++11)\nat(): Allows to access gsl::span elements\nbyte: Allows to construct from integral via static cast (C++17)\nbyte: Allows to construct from integral via byte() (C++17)\nbyte: Allows to construct from integral via to_byte()\nbyte: Allows to convert to integral via to_integer()\nbyte: Allows comparison operations\nbyte: Allows bitwise or operation\nbyte: Allows bitwise and operation\nbyte: Allows bitwise x-or operation\nbyte: Allows bitwise or assignment\nbyte: Allows bitwise and assignment\nbyte: Allows bitwise x-or assignment\nbyte: Allows shift-left operation\nbyte: Allows shift-right operation\nbyte: Allows shift-left assignment\nbyte: Allows shift-right assignment\nbyte: Provides constexpr non-assignment operations (C++11)\nbyte: Provides constexpr assignment operations (C++14)\nbyte: Provides hash support (C++11)\nnot_null<>: Disallows default construction (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nnot_null<>: Disallows construction from nullptr_t, NULL or 0 (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nnot_null<>: Disallows construction from a unique pointer to underlying type (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nnot_null<>: Disallows assignment from unrelated pointers (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nnot_null<>: Terminates construction from a null pointer value\nnot_null<>: Terminates construction from related pointer types for null pointer value\nnot_null<>: Terminates assignment from a null pointer value\nnot_null<>: Terminates assignment from related pointer types for null pointer value\nnot_null<>: Allows to construct from a non-null underlying pointer\nnot_null<>: Allows to construct from a non-null user-defined ref-counted type\nnot_null<>: Allows to construct from a non-null related pointer\nnot_null<>: Allows to construct from a not_null related pointer type\nnot_null<>: Allows assignment from a not_null related pointer type\nnot_null<>: Allows assignment from a non-null bare recast pointer\nnot_null<>: Allows implicit conversion to underlying type\nnot_null<>: Allows indirect member access\nnot_null<>: Allows dereferencing\nnot_null<>: Allows to compare equal to another not_null of the same type\nnot_null<>: Allows to compare unequal to another not_null of the same type\nnot_null<>: Allows to compare less than another not_null of the same type\nnot_null<>: Allows to compare less than or equal to another not_null of the same type\nnot_null<>: Allows to compare greater than another not_null of the same type\nnot_null<>: Allows to compare greater than or equal to another not_null of the same type\nnot_null<>: Allows to compare equal to a raw pointer of the same type\nnot_null<>: Allows to compare unequal to a raw pointer of the same type\nnot_null<>: Allows to compare less than a raw pointer of the same type\nnot_null<>: Allows to compare less than or equal to a raw pointer of the same type\nnot_null<>: Allows to compare greater than a raw pointer of the same type\nnot_null<>: Allows to compare greater than or equal to a raw pointer of the same type\nowner<>: Disallows construction from a non-pointer type (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nowner<>: Allows its use as the (pointer) type it stands for\nOwner(): Allows its use as the (pointer) type it stands for\nspan<>: Disallows construction from a temporary value (C++11) (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nspan<>: Disallows construction from a C-array of incompatible type (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nspan<>: Disallows construction from a std::array of incompatible type (C++11) (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nspan<>: Terminates construction from a nullptr and a non-zero size (C++11)\nspan<>: Terminates construction from two pointers in the wrong order\nspan<>: Terminates construction from a null pointer and a non-zero size\nspan<>: Terminates creation of a sub span of the first n elements for n exceeding the span\nspan<>: Terminates creation of a sub span of the last n elements for n exceeding the span\nspan<>: Terminates creation of a sub span outside the span\nspan<>: Terminates access outside the span\nspan<>: Allows to default-construct\nspan<>: Allows to construct from a nullptr and a zero size (C++11)\nspan<>: Allows to construct from a single object (C++11)\nspan<>: Allows to construct from a const single object (C++11)\nspan<>: Allows to construct from two pointers\nspan<>: Allows to construct from two pointers to const\nspan<>: Allows to construct from a non-null pointer and a size\nspan<>: Allows to construct from a non-null pointer to const and a size\nspan<>: Allows to construct from a temporary pointer and a size\nspan<>: Allows to construct from a temporary pointer to const and a size\nspan<>: Allows to construct from any pointer and a zero size\nspan<>: Allows to construct from a C-array\nspan<>: Allows to construct from a const C-array\nspan<>: Allows to construct from a C-array with size via decay to pointer (potentially dangerous)\nspan<>: Allows to construct from a const C-array with size via decay to pointer (potentially dangerous)\nspan<>: Allows to construct from a std::array<> (C++11)\nspan<>: Allows to construct from a std::array<> with const data (C++11) [deprecated-5]\nspan<>: Allows to construct from a container (std::vector<>)\nspan<>: Allows to construct from a temporary container (potentially dangerous)\nspan<>: Allows to tag-construct from a container (std::vector<>)\nspan<>: Allows to tag-construct from a temporary container (potentially dangerous)\nspan<>: Allows to construct from an empty gsl::shared_ptr (C++11) [deprecated-4]\nspan<>: Allows to construct from an empty gsl::unique_ptr (C++11) [deprecated-4]\nspan<>: Allows to construct from an empty gsl::unique_ptr (array, C++11) [deprecated-4]\nspan<>: Allows to construct from a non-empty gsl::shared_ptr (C++11) [deprecated-4]\nspan<>: Allows to construct from a non-empty gsl::unique_ptr (C++11) [deprecated-4]\nspan<>: Allows to construct from a non-empty gsl::unique_ptr (array, C++11) [deprecated-4]\nspan<>: Allows to copy-construct from another span of the same type\nspan<>: Allows to copy-construct from another span of a compatible type\nspan<>: Allows to move-construct from another span of the same type (C++11)\nspan<>: Allows to copy-assign from another span of the same type\nspan<>: Allows to move-assign from another span of the same type (C++11)\nspan<>: Allows to create a sub span of the first n elements\nspan<>: Allows to create a sub span of the last n elements\nspan<>: Allows to create a sub span starting at a given offset\nspan<>: Allows to create a sub span starting at a given offset with a given length\nspan<>: Allows to create an empty sub span at full offset\nspan<>: Allows to create an empty sub span at full offset with zero length\nspan<>: Allows forward iteration\nspan<>: Allows const forward iteration\nspan<>: Allows reverse iteration\nspan<>: Allows const reverse iteration\nspan<>: Allows to observe an element via array indexing\nspan<>: Allows to observe an element via call indexing\nspan<>: Allows to observe an element via at()\nspan<>: Allows to observe an element via data()\nspan<>: Allows to change an element via array indexing\nspan<>: Allows to change an element via call indexing\nspan<>: Allows to change an element via at()\nspan<>: Allows to change an element via data()\nspan<>: Allows to compare equal to another span of the same type\nspan<>: Allows to compare unequal to another span of the same type\nspan<>: Allows to compare less than another span of the same type\nspan<>: Allows to compare less than or equal to another span of the same type\nspan<>: Allows to compare greater than another span of the same type\nspan<>: Allows to compare greater than or equal to another span of the same type\nspan<>: Allows to compare to another span of the same type and different cv-ness (non-standard)\nspan<>: Allows to compare empty spans as equal\nspan<>: Allows to test for empty span via empty(), empty case\nspan<>: Allows to test for empty span via empty(), non-empty case\nspan<>: Allows to obtain the number of elements via size()\nspan<>: Allows to obtain the number of elements via length() [deprecated-3]\nspan<>: Allows to obtain the number of bytes via size_bytes()\nspan<>: Allows to obtain the number of bytes via length_bytes() [deprecated-3]\nspan<>: Allows to swap with another span of the same type\nspan<>: Allows to view the elements as read-only bytes [deprecated-2 as member]\nspan<>: Allows to view and change the elements as writable bytes [deprecated-2 as member]\nspan<>: Allows to view the elements as a span of another type\nspan<>: Allows to change the elements from a span of another type\nspan<>: Allows to copy a span to another span of the same element type\nspan<>: Allows to copy a span to another span of a different element type\nmake_span(): (gsl_FEATURE_MAKE_SPAN=1)\nmake_span(): Allows to build from two pointers\nmake_span(): Allows to build from two const pointers\nmake_span(): Allows to build from a non-null pointer and a size\nmake_span(): Allows to build from a non-null const pointer and a size\nmake_span(): Allows to build from a C-array\nmake_span(): Allows to build from a const C-array\nmake_span(): Allows to build from a std::array<> (C++11)\nmake_span(): Allows to build from a const std::array<> (C++11)\nmake_span(): Allows to build from a container (std::vector<>)\nmake_span(): Allows to build from a const container (std::vector<>)\nmake_span(): Allows to build from a temporary container (potentially dangerous)\nmake_span(): Allows to tag-build from a container (std::vector<>)\nmake_span(): Allows to tag-build from a temporary container (potentially dangerous)\nmake_span(): Allows to build from an empty gsl::shared_ptr (C++11) [deprecated-4]\nmake_span(): Allows to build from an empty gsl::unique_ptr (C++11) [deprecated-4]\nmake_span(): Allows to build from an empty gsl::unique_ptr (array, C++11) [deprecated-4]\nmake_span(): Allows to build from a non-empty gsl::shared_ptr (C++11) [deprecated-4]\nmake_span(): Allows to build from a non-empty gsl::unique_ptr (C++11) [deprecated-4]\nmake_span(): Allows to build from a non-empty gsl::unique_ptr (array, C++11) [deprecated-4]\nbyte_span() (gsl_FEATURE_BYTE_SPAN=1)\nbyte_span(): Allows to build a span of gsl::byte from a single object\nbyte_span(): Allows to build a span of const gsl::byte from a single const object\nstring_span: Disallows construction of a string_span from a cstring_span (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nstring_span: Disallows construction of a string_span from a const std::string (define gsl_CONFIG_CONFIRMS_COMPILATION_ERRORS)\nstring_span: Allows to default-construct\nstring_span: Allows to construct from a nullptr (C++11)\nstring_span: Allows to construct a cstring_span from a const C-string\nstring_span: Allows to construct a string_span from a non-const C-string and size\nstring_span: Allows to construct a string_span from a non-const C-string begin and end pointer\nstring_span: Allows to construct a string_span from a non-const C-array\nstring_span: Allows to construct a string_span from a non-const std::string\nstring_span: Allows to construct a string_span from a non-const std::array (C++11)\nstring_span: Allows to construct a string_span from a non-const container (std::vector)\nstring_span: Allows to construct a string_span from a non-const container, via a tag (std::vector)\nstring_span: Allows to construct a cstring_span from a non-const C-string and size\nstring_span: Allows to construct a cstring_span from a non-const C-string begin and end pointer\nstring_span: Allows to construct a cstring_span from a non-const C-array\nstring_span: Allows to construct a cstring_span from a non-const std::string\nstring_span: Allows to construct a cstring_span from a non-const std::array (C++11)\nstring_span: Allows to construct a cstring_span from a non-const container (std::vector)\nstring_span: Allows to construct a cstring_span from a non-const container, via a tag (std::vector)\nstring_span: Allows to construct a cstring_span from a const C-string and size\nstring_span: Allows to construct a cstring_span from a non-const C-string begin and end pointer\nstring_span: Allows to construct a cstring_span from a const C-array\nstring_span: Allows to construct a cstring_span from a const std::string\nstring_span: Allows to construct a cstring_span from a const std::array (C++11)\nstring_span: Allows to construct a cstring_span from a const container (std::vector)\nstring_span: Allows to construct a cstring_span from a const container, via a tag (std::vector)\nstring_span: Allows to construct a wstring_span from a non-const C-string and size\nstring_span: Allows to construct a wstring_span from a non-const C-string begin and end pointer\nstring_span: Allows to construct a wstring_span from a non-const C-array\nstring_span: Allows to construct a wstring_span from a non-const std::wstring\nstring_span: Allows to construct a wstring_span from a non-const std::array (C++11)\nstring_span: Allows to construct a wstring_span from a non-const container (std::vector)\nstring_span: Allows to construct a wstring_span from a non-const container, via a tag (std::vector)\nstring_span: Allows to construct a cwstring_span from a non-const C-string and size\nstring_span: Allows to construct a cwstring_span from a non-const C-string begin and end pointer\nstring_span: Allows to construct a cwstring_span from a non-const C-array\nstring_span: Allows to construct a cwstring_span from a non-const std::wstring\nstring_span: Allows to construct a cwstring_span from a non-const std::array (C++11)\nstring_span: Allows to construct a cwstring_span from a non-const container (std::vector)\nstring_span: Allows to construct a cwstring_span from a non-const container, via a tag (std::vector)\nstring_span: Allows to construct a cwstring_span from a const C-string and size\nstring_span: Allows to construct a cwstring_span from a const C-string begin and end pointer\nstring_span: Allows to construct a cwstring_span from a const C-array\nstring_span: Allows to construct a cwstring_span from a const std::wstring\nstring_span: Allows to construct a cwstring_span from a const std::array (C++11)\nstring_span: Allows to construct a cwstring_span from a const container (std::vector)\nstring_span: Allows to construct a cwstring_span from a const container, via a tag (std::vector)\nstring_span: Allows to copy-construct from another span of the same type\nstring_span: Allows to copy-construct from another span of a compatible type\nstring_span: Allows to move-construct from another span of the same type (C++11)\nstring_span: Allows to copy-assign from another span of the same type\nstring_span: Allows to move-assign from another span of the same type (C++11)\nstring_span: Allows to create a sub span of the first n elements\nstring_span: Allows to create a sub span of the last n elements\nstring_span: Allows to create a sub span starting at a given offset\nstring_span: Allows to create a sub span starting at a given offset with a given length\nstring_span: Allows to create an empty sub span at full offset\nstring_span: Allows to create an empty sub span at full offset with zero length\nstring_span: Allows forward iteration\nstring_span: Allows const forward iteration\nstring_span: Allows reverse iteration\nstring_span: Allows const reverse iteration\nstring_span: Allows to observe an element via array indexing\nstring_span: Allows to observe an element via call indexing\nstring_span: Allows to observe an element via data()\nstring_span: Allows to change an element via array indexing\nstring_span: Allows to change an element via call indexing\nstring_span: Allows to change an element via data()\nstring_span: Allows to compare a string_span with another string_span\nstring_span: Allows to compare empty span to non-empty span\nstring_span: Allows to compare a string_span with a cstring_span\nstring_span: Allows to compare with types convertible to string_span\nstring_span: Allows to test for empty span via empty(), empty case\nstring_span: Allows to test for empty span via empty(), non-empty case\nstring_span: Allows to obtain the number of elements via length()\nstring_span: Allows to obtain the number of elements via size()\nstring_span: Allows to obtain the number of bytes via length_bytes()\nstring_span: Allows to obtain the number of bytes via size_bytes()\nstring_span: Allows to view the elements as read-only bytes\nto_string(): Allows to explicitly convert from string_span to std::string\nto_string(): Allows to explicitly convert from cstring_span to std::string\nto_string(): Allows to explicitly convert from wstring_span to std::wstring\nto_string(): Allows to explicitly convert from cwstring_span to std::wstring\nensure_z(): Disallows to build a string_span from a const C-string\nensure_z(): Disallows to build a wstring_span from a const wide C-string\nensure_z(): Allows to build a string_span from a non-const C-string\nensure_z(): Allows to build a cstring_span from a non-const C-string\nensure_z(): Allows to build a cstring_span from a const C-string\nensure_z(): Allows to build a wstring_span from a non-const wide C-string\nensure_z(): Allows to build a cwstring_span from a non-const wide C-string\nensure_z(): Allows to build a cwstring_span from a const wide C-string\nensure_z(): Allows to specify ultimate location of the sentinel and ensure its presence\noperator<<: Allows printing a string_span to an output stream\noperator<<: Allows printing a cstring_span to an output stream\noperator<<: Allows printing a wstring_span to an output stream\noperator<<: Allows printing a cwstring_span to an output stream\nfinally: Allows to run lambda on leaving scope\nfinally: Allows to run function (bind) on leaving scope\nfinally: Allows to run function (pointer) on leaving scope\nfinally: Allows to move final_action\non_return: Allows to perform action on leaving scope without exception (gsl_FEATURE_EXPERIMENTAL_RETURN_GUARD)\non_error: Allows to perform action on leaving scope via an exception (gsl_FEATURE_EXPERIMENTAL_RETURN_GUARD)\nnarrow_cast<>: Allows narrowing without value loss\nnarrow_cast<>: Allows narrowing with value loss\nnarrow<>(): Allows narrowing without value loss\nnarrow<>(): Terminates when narrowing with value loss\nnarrow<>(): Terminates when narrowing with sign loss\n```\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:gsl-lite\" ]",
      "lockFile": "manifest = \"f0370a2c945ad1ed496ddb8a3b7a4c7a39547cdd4c1340e313a466c13f9c8203\"\n\n",
      "buck": "load('//:subdir_glob.bzl', 'subdir_glob')\n\nprebuilt_cxx_library(\n  name = 'gsl-lite',\n  header_only = True,\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n  ]),\n  licenses = [\n    'LICENSE',\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2020-01-24T12:32:26Z",
  "updatedUpstream": "2021-01-04T12:48:29Z",
  "contributors": [
    {
      "login": "alexeyr",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/24733?u=79ccff5846e0334da2a407f5b5340f80cdb2503d&v=4"
    },
    {
      "login": "fehmud",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/110664?v=4"
    },
    {
      "login": "dvd0101",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/129572?v=4"
    },
    {
      "login": "elnull",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/169721?v=4"
    },
    {
      "login": "ned14",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/230408?v=4"
    },
    {
      "login": "tadeu",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/955251?v=4"
    },
    {
      "login": "KazDragon",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1019356?v=4"
    },
    {
      "login": "Maximus5",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1222388?u=e7acddfb3ef52e93f48f40603840f2f05411efb8&v=4"
    },
    {
      "login": "yachoor",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1234074?v=4"
    },
    {
      "login": "exjam",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/1302758?u=0170992c5dcd5aaa707c9e2e98c7e006f177ed65&v=4"
    },
    {
      "login": "FlorianWolters",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/1318837?v=4"
    },
    {
      "login": "poconbhui",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1926202?v=4"
    },
    {
      "login": "martinmoene",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/1999290?v=4"
    },
    {
      "login": "mbeutel",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/2574896?v=4"
    },
    {
      "login": "nathanaelg",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/2712036?u=037af7cfc52d6c8688624e6932520e22149ff5d3&v=4"
    },
    {
      "login": "chan-lee",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/2712594?v=4"
    },
    {
      "login": "patstew",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/4478567?v=4"
    },
    {
      "login": "codecircuit",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/4549533?u=34f41e9b8da312de79b5baaf6d36de475808bff6&v=4"
    },
    {
      "login": "kugelrund",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/6236137?u=fffaf32ff217282cfe279aec699b8c4f26d38d1c&v=4"
    },
    {
      "login": "Magnutic",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/6660448?u=e40ab733ac56d6c516ae8a317879e28321ec728d&v=4"
    },
    {
      "login": "agauniyal",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/7630575?u=0cc8856bf0f3b02980d639f042df4265e0988cba&v=4"
    },
    {
      "login": "amerry",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/8223327?v=4"
    },
    {
      "login": "petamas",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/8342512?v=4"
    },
    {
      "login": "MikeLankamp",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/14944419?v=4"
    },
    {
      "login": "AraHaan",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/15173749?u=dd6dc43d4604d6153271796284e9c9d800b7d7f8&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 607,
  "forks": 76,
  "topics": [
    "gsl",
    "cpp98",
    "cpp11",
    "cpp14",
    "cpp17",
    "header-only",
    "single-file",
    "gsl-implementations",
    "no-dependencies"
  ]
}