{
  "packageName": "buckaroo-pm/compile-time-regular-expressions",
  "name": "hanickadot/compile-time-regular-expressions",
  "licence": "MIT",
  "description": "A Compile time PCRE (almost) compatible regular expression matcher.",
  "readme": "# Compile time regular expressions v2\n\n[![Build Status](https://travis-ci.org/hanickadot/compile-time-regular-expressions.svg?branch=master)](https://travis-ci.org/hanickadot/compile-time-regular-expressions)\n\nFast compile-time regular expression with support for matching/searching/capturing in compile-time or runtime.\n\n## What this library can do?\n\n```c++\nctre::match<\"REGEX\">(subject); // C++20\n\"REGEX\"_ctre.match(subject); // C++17 + N3599 extension\n```\n\n* Matching\n* Searching\n* Capturing content (named captures are supported too)\n\nThe library is implementing most of the PCRE syntax with a few exceptions:\n\n* atomic groups\n* boundaries other than `^$`\n* callouts\n* character properties\n* comments\n* conditional patterns\n* control characters (`\\cX`)\n* horizontal / vertical character classes (`\\h\\H\\v\\V)\n* match point reset (`\\K`)\n* named characters\n* octal numbers\n* options / modes\n* subroutines\n* unicode grapheme cluster (`\\X`) \n\nMore documentation on [pcre.org](https://www.pcre.org/current/doc/html/pcre2syntax.html). \n\n### What can be subject (input)?\n\n* `std::string`-like object (`std::string_view` or your own string if it's providing `begin`/`end` functions with forward iterators)\n* pair of forward iterators\n\n## Supported compilers\n\n* clang 5.0+ (template UDL, C++17 syntax)\n* gcc 7.2+ (template UDL, C++17 syntax)\n* gcc 9.0+ (C++17 & C++20 cNTTP syntax, trampolining a.k.a. long patterns are not supported due compiler bug)\n* MSVC 15.8.8+ (C++17 syntax only)\n\n#### Template UDL syntax\n\nCompiler must support N3599 extension (as GNU extension in gcc and clang).\n\n#### C++17 syntax\n\nYou can provide pattern as a `constexpr ctll::basic_fixed_string` variable.\n\n```c++\nstatic constexpr auto pattern = ctll::basic_fixed_string{ \"h.*\" };\n\nconstexpr auto match(std::string_view sv) noexcept {\n\treturn ctre::re<pattern>().match(sv);\n}\n```\n\n(this is tested in MSVC 15.8.8)\n\n#### C++20 syntax\n\nCurrently only compiler which supports cNTTP syntax `ctre::match<PATTERN>(subject)` is GCC 9+. Use `-DEXPERIMENTAL_GCC_9` flag to disable trampolining (which crash compiler on ICE).\n\nAlso there is [known bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88534) in current GCC 9 with debug symbols and cNTTP, you can avoid it if you disable generating debug symbols (`-g0`). \n\n## Examples\n\n#### Extracting number from input\n```c++\nstd::optional<std::string_view> extract_number(std::string_view s) noexcept {\n    using namespace ctre::literals;\n    if (auto m = \"^[a-z]++([0-9]++)$\"_ctre.match(s)) {\n        return m.get<1>().to_view();\n    } else {\n        return std::nullopt;\n    }\n}\n```\n[link to compiler explorer](https://godbolt.org/z/xi5ulD)\n\n\n#### Extracting values from date\n```c++\nstruct date { std::string_view year; std::string_view month; std::string_view day; };\n\nconstexpr std::optional<date> extract_date(std::string_view s) noexcept {\n    using namespace ctre::literals;\n    if (auto [whole, year, month, day] = \"^([0-9]{4})/([0-9]{1,2}+)/([0-9]{1,2}+)$\"_ctre.match(s); whole\n    ) {\n        return date{year.to_view(), month.to_view(), day.to_view()};\n    } else {\n        return std::nullopt;\n    }\n}\n\nstatic_assert(extract_date(\"2018/08/27\"sv).has_value());\nstatic_assert((*extract_date(\"2018/08/27\"sv)).year == \"2018\"sv);\nstatic_assert((*extract_date(\"2018/08/27\"sv)).month == \"08\"sv);\nstatic_assert((*extract_date(\"2018/08/27\"sv)).day == \"27\"sv);\n```\n[link to compiler explorer](https://godbolt.org/z/QJ6Ecb)\n\n#### Lexer\n```c++\nenum class type {\n    unknown, identifier, number\n};\n\nstruct lex_item {\n    type t;\n    std::string_view c;\n};\n\nconstexpr std::optional<lex_item> lexer(std::string_view v) noexcept {\n    using namespace ctre::literals;\n    if (auto [m,id,num] = \"^([a-z]++)|([0-9]++)$\"_ctre.match(v); m) {\n        if (id) {\n            return lex_item{type::identifier, id};\n        } else if (num) {\n            return lex_item{type::number, num};\n        }\n    }\n    return std::nullopt;\n}\n```\n[link to compiler explorer](https://godbolt.org/z/iSgFiK)\n\n#### Range over input\n\nThis support is preliminary and probably the API will be changed.\n\n```c++\nauto input = \"123,456,768\"sv;\n\nusing namespace ctre::literals;\nfor (auto match: ctre::range(input,\"[0-9]++\"_ctre)) {\n\tstd::cout << std::string_view{match} << \"\\n\";\n}\n```\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:ctre\" ]",
      "lockFile": "manifest = \"b4b5554704aad4dc7c9baa213a9c55b130e3aa0f7fd1066eade517fb03e20f0a\"\n\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\nprebuilt_cxx_library(\n  name = 'ctre',\n  header_only = True,\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.gram'),\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-18T17:39:08Z",
  "updatedUpstream": "2021-01-13T15:15:10Z",
  "contributors": [
    {
      "login": "slurps-mad-rips",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/63051?u=de7e019322eda075f5bc46b74a2c6fe6d0981257&v=4"
    },
    {
      "login": "leni536",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/84045?v=4"
    },
    {
      "login": "mordante",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/1362617?v=4"
    },
    {
      "login": "jgsogo",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1406456?u=b056762d4b8488fb294022c204d8b79389debe76&v=4"
    },
    {
      "login": "cor3ntin",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1409019?v=4"
    },
    {
      "login": "TartanLlama",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/1856614?u=3e1e2f008d32be2d8be2a42b68cbace7d1298665&v=4"
    },
    {
      "login": "Cqoicebordel",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/2286246?u=a118a88a754b23b053ee3fe9483c8524ce645aff&v=4"
    },
    {
      "login": "kunaltyagi",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/2657068?v=4"
    },
    {
      "login": "uilianries",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/4870173?u=4da785f36e3fca58a19ba19779bdfcfd348dd77d&v=4"
    },
    {
      "login": "RabsRincon",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/5364255?u=1b2a8263db33c7906c65cd447567ab0639712be0&v=4"
    },
    {
      "login": "hanickadot",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/6557263?u=d85f643ba14b75c8bb46820db101ff44b48f999e&v=4"
    },
    {
      "login": "matbech",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/6642109?v=4"
    },
    {
      "login": "pkerichang",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/7808212?v=4"
    },
    {
      "login": "MerryMage",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/8682882?u=1661639b618e3f9b4642e94174d014fd08e532d7&v=4"
    },
    {
      "login": "johelegp",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/21071787?v=4"
    },
    {
      "login": "Andersama",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/25020235?u=27cc825fb61118eff38bdaf74c6faee8d7dd6afe&v=4"
    },
    {
      "login": "0xdead4ead",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/31285459?u=4bab86278ffd91cc60b6005b806e2d9817d97006&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 1722,
  "forks": 88,
  "topics": [
    "regular-expression",
    "cpp17",
    "cpp20",
    "header-only",
    "constexpr",
    "compile-time",
    "awesome",
    "template-udl",
    "pcre"
  ]
}