{
  "packageName": "buckaroo-pm/xz",
  "name": "buckaroo-pm/xz",
  "licence": "NOASSERTION",
  "description": "Buckaroo mirror of xz. Contains lzma. ",
  "readme": "\nXZ Utils\n========\n\n    0. Overview\n    1. Documentation\n       1.1. Overall documentation\n       1.2. Documentation for command-line tools\n       1.3. Documentation for liblzma\n    2. Version numbering\n    3. Reporting bugs\n    4. Translating the xz tool\n    5. Other implementations of the .xz format\n    6. Contact information\n\n\n0. Overview\n-----------\n\n    XZ Utils provide a general-purpose data-compression library plus\n    command-line tools. The native file format is the .xz format, but\n    also the legacy .lzma format is supported. The .xz format supports\n    multiple compression algorithms, which are called \"filters\" in the\n    context of XZ Utils. The primary filter is currently LZMA2. With\n    typical files, XZ Utils create about 30 % smaller files than gzip.\n\n    To ease adapting support for the .xz format into existing applications\n    and scripts, the API of liblzma is somewhat similar to the API of the\n    popular zlib library. For the same reason, the command-line tool xz\n    has a command-line syntax similar to that of gzip.\n\n    When aiming for the highest compression ratio, the LZMA2 encoder uses\n    a lot of CPU time and may use, depending on the settings, even\n    hundreds of megabytes of RAM. However, in fast modes, the LZMA2 encoder\n    competes with bzip2 in compression speed, RAM usage, and compression\n    ratio.\n\n    LZMA2 is reasonably fast to decompress. It is a little slower than\n    gzip, but a lot faster than bzip2. Being fast to decompress means\n    that the .xz format is especially nice when the same file will be\n    decompressed very many times (usually on different computers), which\n    is the case e.g. when distributing software packages. In such\n    situations, it's not too bad if the compression takes some time,\n    since that needs to be done only once to benefit many people.\n\n    With some file types, combining (or \"chaining\") LZMA2 with an\n    additional filter can improve the compression ratio. A filter chain may\n    contain up to four filters, although usually only one or two are used.\n    For example, putting a BCJ (Branch/Call/Jump) filter before LZMA2\n    in the filter chain can improve compression ratio of executable files.\n\n    Since the .xz format allows adding new filter IDs, it is possible that\n    some day there will be a filter that is, for example, much faster to\n    compress than LZMA2 (but probably with worse compression ratio).\n    Similarly, it is possible that some day there is a filter that will\n    compress better than LZMA2.\n\n    XZ Utils doesn't support multithreaded compression or decompression\n    yet. It has been planned though and taken into account when designing\n    the .xz file format.\n\n\n1. Documentation\n----------------\n\n1.1. Overall documentation\n\n    README              This file\n\n    INSTALL.generic     Generic install instructions for those not familiar\n                        with packages using GNU Autotools\n    INSTALL             Installation instructions specific to XZ Utils\n    PACKAGERS           Information to packagers of XZ Utils\n\n    COPYING             XZ Utils copyright and license information\n    COPYING.GPLv2       GNU General Public License version 2\n    COPYING.GPLv3       GNU General Public License version 3\n    COPYING.LGPLv2.1    GNU Lesser General Public License version 2.1\n\n    AUTHORS             The main authors of XZ Utils\n    THANKS              Incomplete list of people who have helped making\n                        this software\n    NEWS                User-visible changes between XZ Utils releases\n    ChangeLog           Detailed list of changes (commit log)\n    TODO                Known bugs and some sort of to-do list\n\n    Note that only some of the above files are included in binary\n    packages.\n\n\n1.2. Documentation for command-line tools\n\n    The command-line tools are documented as man pages. In source code\n    releases (and possibly also in some binary packages), the man pages\n    are also provided in plain text (ASCII only) and PDF formats in the\n    directory \"doc/man\" to make the man pages more accessible to those\n    whose operating system doesn't provide an easy way to view man pages.\n\n\n1.3. Documentation for liblzma\n\n    The liblzma API headers include short docs about each function\n    and data type as Doxygen tags. These docs should be quite OK as\n    a quick reference.\n\n    I have planned to write a bunch of very well documented example\n    programs, which (due to comments) should work as a tutorial to\n    various features of liblzma. No such example programs have been\n    written yet.\n\n    For now, if you have never used liblzma, libbzip2, or zlib, I\n    recommend learning the *basics* of the zlib API. Once you know that,\n    it should be easier to learn liblzma.\n\n        http://zlib.net/manual.html\n        http://zlib.net/zlib_how.html\n\n\n2. Version numbering\n--------------------\n\n    The version number format of XZ Utils is X.Y.ZS:\n\n      - X is the major version. When this is incremented, the library\n        API and ABI break.\n\n      - Y is the minor version. It is incremented when new features\n        are added without breaking the existing API or ABI. An even Y\n        indicates a stable release and an odd Y indicates unstable\n        (alpha or beta version).\n\n      - Z is the revision. This has a different meaning for stable and\n        unstable releases:\n\n          * Stable: Z is incremented when bugs get fixed without adding\n            any new features. This is intended to be convenient for\n            downstream distributors that want bug fixes but don't want\n            any new features to minimize the risk of introducing new bugs.\n\n          * Unstable: Z is just a counter. API or ABI of features added\n            in earlier unstable releases having the same X.Y may break.\n\n      - S indicates stability of the release. It is missing from the\n        stable releases, where Y is an even number. When Y is odd, S\n        is either \"alpha\" or \"beta\" to make it very clear that such\n        versions are not stable releases. The same X.Y.Z combination is\n        not used for more than one stability level, i.e. after X.Y.Zalpha,\n        the next version can be X.Y.(Z+1)beta but not X.Y.Zbeta.\n\n\n3. Reporting bugs\n-----------------\n\n    Naturally it is easiest for me if you already know what causes the\n    unexpected behavior. Even better if you have a patch to propose.\n    However, quite often the reason for unexpected behavior is unknown,\n    so here are a few things to do before sending a bug report:\n\n      1. Try to create a small example how to reproduce the issue.\n\n      2. Compile XZ Utils with debugging code using configure switches\n         --enable-debug and, if possible, --disable-shared. If you are\n         using GCC, use CFLAGS='-O0 -ggdb3'. Don't strip the resulting\n         binaries.\n\n      3. Turn on core dumps. The exact command depends on your shell;\n         for example in GNU bash it is done with \"ulimit -c unlimited\",\n         and in tcsh with \"limit coredumpsize unlimited\".\n\n      4. Try to reproduce the suspected bug. If you get \"assertion failed\"\n         message, be sure to include the complete message in your bug\n         report. If the application leaves a coredump, get a backtrace\n         using gdb:\n           $ gdb /path/to/app-binary   # Load the app to the debugger.\n           (gdb) core core   # Open the coredump.\n           (gdb) bt   # Print the backtrace. Copy & paste to bug report.\n           (gdb) quit   # Quit gdb.\n\n    Report your bug via email or IRC (see Contact information below).\n    Don't send core dump files or any executables. If you have a small\n    example file(s) (total size less than 256 KiB), please include\n    it/them as an attachment. If you have bigger test files, put them\n    online somewhere and include a URL to the file(s) in the bug report.\n\n    Always include the exact version number of XZ Utils in the bug report.\n    If you are using a snapshot from the git repository, use \"git describe\"\n    to get the exact snapshot version. If you are using XZ Utils shipped\n    in an operating system distribution, mention the distribution name,\n    distribution version, and exact xz package version; if you cannot\n    repeat the bug with the code compiled from unpatched source code,\n    you probably need to report a bug to your distribution's bug tracking\n    system.\n\n\n4. Translating the xz tool\n--------------------------\n\n    The messages from the xz tool have been translated into a few\n    languages. Before starting to translate into a new language, ask\n    the author whether someone else hasn't already started working on it.\n\n    Test your translation. Testing includes comparing the translated\n    output to the original English version by running the same commands\n    in both your target locale and with LC_ALL=C. Ask someone to\n    proof-read and test the translation.\n\n    Testing can be done e.g. by installing xz into a temporary directory:\n\n        ./configure --disable-shared --prefix=/tmp/xz-test\n        # <Edit the .po file in the po directory.>\n        make -C po update-po\n        make install\n        bash debug/translation.bash | less\n        bash debug/translation.bash | less -S  # For --list outputs\n\n    Repeat the above as needed (no need to re-run configure though).\n\n    Note especially the following:\n\n      - The output of --help and --long-help must look nice on\n        an 80-column terminal. It's OK to add extra lines if needed.\n\n      - In contrast, don't add extra lines to error messages and such.\n        They are often preceded with e.g. a filename on the same line,\n        so you have no way to predict where to put a \\n. Let the terminal\n        do the wrapping even if it looks ugly. Adding new lines will be\n        even uglier in the generic case even if it looks nice in a few\n        limited examples.\n\n      - Be careful with column alignment in tables and table-like output\n        (--list, --list --verbose --verbose, --info-memory, --help, and\n        --long-help):\n\n          * All descriptions of options in --help should start in the\n            same column (but it doesn't need to be the same column as\n            in the English messages; just be consistent if you change it).\n            Check that both --help and --long-help look OK, since they\n            share several strings.\n\n          * --list --verbose and --info-memory print lines that have\n            the format \"Description:   %s\". If you need a longer\n            description, you can put extra space between the colon\n            and %s. Then you may need to add extra space to other\n            strings too so that the result as a whole looks good (all\n            values start at the same column).\n\n          * The columns of the actual tables in --list --verbose --verbose\n            should be aligned properly. Abbreviate if necessary. It might\n            be good to keep at least 2 or 3 spaces between column headings\n            and avoid spaces in the headings so that the columns stand out\n            better, but this is a matter of opinion. Do what you think\n            looks best.\n\n      - Be careful to put a period at the end of a sentence when the\n        original version has it, and don't put it when the original\n        doesn't have it. Similarly, be careful with \\n characters\n        at the beginning and end of the strings.\n\n      - Read the TRANSLATORS comments that have been extracted from the\n        source code and included in xz.pot. If they suggest testing the\n        translation with some type of command, do it. If testing needs\n        input files, use e.g. tests/files/good-*.xz.\n\n      - When updating the translation, read the fuzzy (modified) strings\n        carefully, and don't mark them as updated before you actually\n        have updated them. Reading through the unchanged messages can be\n        good too; sometimes you may find a better wording for them.\n\n      - If you find language problems in the original English strings,\n        feel free to suggest improvements. Ask if something is unclear.\n\n      - The translated messages should be understandable (sometimes this\n        may be a problem with the original English messages too). Don't\n        make a direct word-by-word translation from English especially if\n        the result doesn't sound good in your language.\n\n    In short, take your time and pay attention to the details. Making\n    a good translation is not a quick and trivial thing to do. The\n    translated xz should look as polished as the English version.\n\n\n5. Other implementations of the .xz format\n------------------------------------------\n\n    7-Zip and the p7zip port of 7-Zip support the .xz format starting\n    from the version 9.00alpha.\n\n        http://7-zip.org/\n        http://p7zip.sourceforge.net/\n\n    XZ Embedded is a limited implementation written for use in the Linux\n    kernel, but it is also suitable for other embedded use.\n\n        https://tukaani.org/xz/embedded.html\n\n\n6. Contact information\n----------------------\n\n    If you have questions, bug reports, patches etc. related to XZ Utils,\n    contact Lasse Collin <lasse.collin@tukaani.org> (in Finnish or English).\n    I'm sometimes slow at replying. If you haven't got a reply within two\n    weeks, assume that your email has got lost and resend it or use IRC.\n\n    You can find me also from #tukaani on Freenode; my nick is Larhzu.\n    The channel tends to be pretty quiet, so just ask your question and\n    someone may wake up.\n\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//src/liblzma:lzma\" ]",
      "lockFile": "manifest = \"d8e194ae179456c63336c16c87c35e53150ac28232c23d71f1e08835967c2dc2\"\n\n",
      "buck": "",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-25T16:48:38Z",
  "updatedUpstream": "2019-01-25T16:48:38Z",
  "contributors": [],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 0,
  "forks": 1,
  "topics": []
}