{
  "packageName": "buckaroo-pm/nodejs-http-parser",
  "name": "nodejs/http-parser",
  "licence": "MIT",
  "description": "http request/response parser for c",
  "readme": "HTTP Parser\n===========\n\n[![Build Status](https://api.travis-ci.org/nodejs/http-parser.svg?branch=master)](https://travis-ci.org/nodejs/http-parser)\n\nThis is a parser for HTTP messages written in C. It parses both requests and\nresponses. The parser is designed to be used in performance HTTP\napplications. It does not make any syscalls nor allocations, it does not\nbuffer data, it can be interrupted at anytime. Depending on your\narchitecture, it only requires about 40 bytes of data per message\nstream (in a web server that is per connection).\n\nFeatures:\n\n  * No dependencies\n  * Handles persistent streams (keep-alive).\n  * Decodes chunked encoding.\n  * Upgrade support\n  * Defends against buffer overflow attacks.\n\nThe parser extracts the following information from HTTP messages:\n\n  * Header fields and values\n  * Content-Length\n  * Request method\n  * Response status code\n  * Transfer-Encoding\n  * HTTP version\n  * Request URL\n  * Message body\n\n\nUsage\n-----\n\nOne `http_parser` object is used per TCP connection. Initialize the struct\nusing `http_parser_init()` and set the callbacks. That might look something\nlike this for a request parser:\n```c\nhttp_parser_settings settings;\nsettings.on_url = my_url_callback;\nsettings.on_header_field = my_header_field_callback;\n/* ... */\n\nhttp_parser *parser = malloc(sizeof(http_parser));\nhttp_parser_init(parser, HTTP_REQUEST);\nparser->data = my_socket;\n```\n\nWhen data is received on the socket execute the parser and check for errors.\n\n```c\nsize_t len = 80*1024, nparsed;\nchar buf[len];\nssize_t recved;\n\nrecved = recv(fd, buf, len, 0);\n\nif (recved < 0) {\n  /* Handle error. */\n}\n\n/* Start up / continue the parser.\n * Note we pass recved==0 to signal that EOF has been received.\n */\nnparsed = http_parser_execute(parser, &settings, buf, recved);\n\nif (parser->upgrade) {\n  /* handle new protocol */\n} else if (nparsed != recved) {\n  /* Handle error. Usually just close the connection. */\n}\n```\n\n`http_parser` needs to know where the end of the stream is. For example, sometimes\nservers send responses without Content-Length and expect the client to\nconsume input (for the body) until EOF. To tell `http_parser` about EOF, give\n`0` as the fourth parameter to `http_parser_execute()`. Callbacks and errors\ncan still be encountered during an EOF, so one must still be prepared\nto receive them.\n\nScalar valued message information such as `status_code`, `method`, and the\nHTTP version are stored in the parser structure. This data is only\ntemporally stored in `http_parser` and gets reset on each new message. If\nthis information is needed later, copy it out of the structure during the\n`headers_complete` callback.\n\nThe parser decodes the transfer-encoding for both requests and responses\ntransparently. That is, a chunked encoding is decoded before being sent to\nthe on_body callback.\n\n\nThe Special Problem of Upgrade\n------------------------------\n\n`http_parser` supports upgrading the connection to a different protocol. An\nincreasingly common example of this is the WebSocket protocol which sends\na request like\n\n        GET /demo HTTP/1.1\n        Upgrade: WebSocket\n        Connection: Upgrade\n        Host: example.com\n        Origin: http://example.com\n        WebSocket-Protocol: sample\n\nfollowed by non-HTTP data.\n\n(See [RFC6455](https://tools.ietf.org/html/rfc6455) for more information the\nWebSocket protocol.)\n\nTo support this, the parser will treat this as a normal HTTP message without a\nbody, issuing both on_headers_complete and on_message_complete callbacks. However\nhttp_parser_execute() will stop parsing at the end of the headers and return.\n\nThe user is expected to check if `parser->upgrade` has been set to 1 after\n`http_parser_execute()` returns. Non-HTTP data begins at the buffer supplied\noffset by the return value of `http_parser_execute()`.\n\n\nCallbacks\n---------\n\nDuring the `http_parser_execute()` call, the callbacks set in\n`http_parser_settings` will be executed. The parser maintains state and\nnever looks behind, so buffering the data is not necessary. If you need to\nsave certain data for later usage, you can do that from the callbacks.\n\nThere are two types of callbacks:\n\n* notification `typedef int (*http_cb) (http_parser*);`\n    Callbacks: on_message_begin, on_headers_complete, on_message_complete.\n* data `typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);`\n    Callbacks: (requests only) on_url,\n               (common) on_header_field, on_header_value, on_body;\n\nCallbacks must return 0 on success. Returning a non-zero value indicates\nerror to the parser, making it exit immediately.\n\nFor cases where it is necessary to pass local information to/from a callback,\nthe `http_parser` object's `data` field can be used.\nAn example of such a case is when using threads to handle a socket connection,\nparse a request, and then give a response over that socket. By instantiation\nof a thread-local struct containing relevant data (e.g. accepted socket,\nallocated memory for callbacks to write into, etc), a parser's callbacks are\nable to communicate data between the scope of the thread and the scope of the\ncallback in a threadsafe manner. This allows `http_parser` to be used in\nmulti-threaded contexts.\n\nExample:\n```c\n typedef struct {\n  socket_t sock;\n  void* buffer;\n  int buf_len;\n } custom_data_t;\n\n\nint my_url_callback(http_parser* parser, const char *at, size_t length) {\n  /* access to thread local custom_data_t struct.\n  Use this access save parsed data for later use into thread local\n  buffer, or communicate over socket\n  */\n  parser->data;\n  ...\n  return 0;\n}\n\n...\n\nvoid http_parser_thread(socket_t sock) {\n int nparsed = 0;\n /* allocate memory for user data */\n custom_data_t *my_data = malloc(sizeof(custom_data_t));\n\n /* some information for use by callbacks.\n * achieves thread -> callback information flow */\n my_data->sock = sock;\n\n /* instantiate a thread-local parser */\n http_parser *parser = malloc(sizeof(http_parser));\n http_parser_init(parser, HTTP_REQUEST); /* initialise parser */\n /* this custom data reference is accessible through the reference to the\n parser supplied to callback functions */\n parser->data = my_data;\n\n http_parser_settings settings; /* set up callbacks */\n settings.on_url = my_url_callback;\n\n /* execute parser */\n nparsed = http_parser_execute(parser, &settings, buf, recved);\n\n ...\n /* parsed information copied from callback.\n can now perform action on data copied into thread-local memory from callbacks.\n achieves callback -> thread information flow */\n my_data->buffer;\n ...\n}\n\n```\n\nIn case you parse HTTP message in chunks (i.e. `read()` request line\nfrom socket, parse, read half headers, parse, etc) your data callbacks\nmay be called more than once. `http_parser` guarantees that data pointer is only\nvalid for the lifetime of callback. You can also `read()` into a heap allocated\nbuffer to avoid copying memory around if this fits your application.\n\nReading headers may be a tricky task if you read/parse headers partially.\nBasically, you need to remember whether last header callback was field or value\nand apply the following logic:\n\n    (on_header_field and on_header_value shortened to on_h_*)\n     ------------------------ ------------ --------------------------------------------\n    | State (prev. callback) | Callback   | Description/action                         |\n     ------------------------ ------------ --------------------------------------------\n    | nothing (first call)   | on_h_field | Allocate new buffer and copy callback data |\n    |                        |            | into it                                    |\n     ------------------------ ------------ --------------------------------------------\n    | value                  | on_h_field | New header started.                        |\n    |                        |            | Copy current name,value buffers to headers |\n    |                        |            | list and allocate new buffer for new name  |\n     ------------------------ ------------ --------------------------------------------\n    | field                  | on_h_field | Previous name continues. Reallocate name   |\n    |                        |            | buffer and append callback data to it      |\n     ------------------------ ------------ --------------------------------------------\n    | field                  | on_h_value | Value for current header started. Allocate |\n    |                        |            | new buffer and copy callback data to it    |\n     ------------------------ ------------ --------------------------------------------\n    | value                  | on_h_value | Value continues. Reallocate value buffer   |\n    |                        |            | and append callback data to it             |\n     ------------------------ ------------ --------------------------------------------\n\n\nParsing URLs\n------------\n\nA simplistic zero-copy URL parser is provided as `http_parser_parse_url()`.\nUsers of this library may wish to use it to parse URLs constructed from\nconsecutive `on_url` callbacks.\n\nSee examples of reading in headers:\n\n* [partial example](http://gist.github.com/155877) in C\n* [from http-parser tests](http://github.com/joyent/http-parser/blob/37a0ff8/test.c#L403) in C\n* [from Node library](http://github.com/joyent/node/blob/842eaf4/src/http.js#L284) in Javascript\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:http-parser\" ]\n",
      "lockFile": "manifest = \"d5770c2cf71b6b0985fa3ded68267be1a32930b62a855b2c27cd3d348d736a96\"\n\n",
      "buck": "cxx_library(\n  name = 'http-parser',\n  header_namespace = '',\n  exported_headers = [\n    'http_parser.h'\n  ],\n  srcs = [\n    'http_parser.c',\n  ],\n  licenses = [\n    'LICENSE-MIT',\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n\ncxx_binary(\n  name = 'bench',\n  srcs = [\n    'bench.c',\n  ],\n  deps = [\n    ':http-parser',\n  ],\n)\n\ncxx_binary(\n  name = 'test',\n  srcs = [\n    'test.c',\n  ],\n  deps = [\n    ':http-parser',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-10T12:13:15Z",
  "updatedUpstream": "2021-01-13T12:28:02Z",
  "contributors": [
    {
      "login": "ry",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/80?v=4"
    },
    {
      "login": "sgala",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/2065?v=4"
    },
    {
      "login": "fmardini",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/2519?v=4"
    },
    {
      "login": "tmm1",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/2567?v=4"
    },
    {
      "login": "copiousfreetime",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/11256?v=4"
    },
    {
      "login": "felixge",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/15000?u=f9b953343c6ce2e8c88ce31e8fcc45940d098890&v=4"
    },
    {
      "login": "dpw",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/15074?v=4"
    },
    {
      "login": "sam-github",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/17607?u=742e8c56b91f17b08a5ca4d7d7126780b9be020b&v=4"
    },
    {
      "login": "apapirovski",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/20809?u=a6ea6631cd599d9be73d8521d82425161238f1ff&v=4"
    },
    {
      "login": "ice799",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/21102?v=4"
    },
    {
      "login": "temoto",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/27057?u=a2ca3f3d2759ab93a3579a8ba46d0654fdc65d60&v=4"
    },
    {
      "login": "ulikoehler",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/34971?v=4"
    },
    {
      "login": "a2800276",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/35631?v=4"
    },
    {
      "login": "chrisdickinson",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/37303?u=05dae5e735ecb5e198328996db361672bcb15fcf&v=4"
    },
    {
      "login": "gmiroshnykov",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/44974?u=d27c341980f94dc5785bfccc492016293581564d&v=4"
    },
    {
      "login": "ljharb",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/45469?u=6ab74b3b934f9659a90b588062c2c4328e40c6be&v=4"
    },
    {
      "login": "ewencp",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/47366?u=da0eb3f84760ca12c1ba99879aa4ba9b69cf49e9&v=4"
    },
    {
      "login": "misery",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/50925?u=1315ae31859465e66930e478edc60dee6eaebe1c&v=4"
    },
    {
      "login": "mcollina",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/52195?u=08bcafa24337a298e1b874279fde515e2fb8f81d&v=4"
    },
    {
      "login": "mscdex",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/54666?u=24c70ecc9905bb596bd98fa2b3f005f8d44c837e&v=4"
    },
    {
      "login": "TooTallNate",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/71256?u=d6a9598cd7963ae290923ab12afeff947f542f80&v=4"
    },
    {
      "login": "fhinkel",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/101553?u=ba04735186648afde39087bcc13d86e44c232a76&v=4"
    },
    {
      "login": "pquerna",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/110123?v=4"
    },
    {
      "login": "tomika",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/116955?u=92bd373b89a856a6561118794d737f6a188941e2&v=4"
    },
    {
      "login": "dolmen",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/129536?v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 5640,
  "forks": 1444,
  "topics": [
    "nodejs",
    "node"
  ]
}