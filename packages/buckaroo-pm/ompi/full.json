{
  "packageName": "buckaroo-pm/ompi",
  "name": "open-mpi/ompi",
  "licence": "NOASSERTION",
  "description": "Open MPI main development repository",
  "readme": "Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana\n                        University Research and Technology\n                        Corporation.  All rights reserved.\nCopyright (c) 2004-2007 The University of Tennessee and The University\n                        of Tennessee Research Foundation.  All rights\n                        reserved.\nCopyright (c) 2004-2008 High Performance Computing Center Stuttgart,\n                        University of Stuttgart.  All rights reserved.\nCopyright (c) 2004-2007 The Regents of the University of California.\n                        All rights reserved.\nCopyright (c) 2006-2018 Cisco Systems, Inc.  All rights reserved.\nCopyright (c) 2006-2011 Mellanox Technologies. All rights reserved.\nCopyright (c) 2006-2012 Oracle and/or its affiliates.  All rights reserved.\nCopyright (c) 2007      Myricom, Inc.  All rights reserved.\nCopyright (c) 2008-2018 IBM Corporation.  All rights reserved.\nCopyright (c) 2010      Oak Ridge National Labs.  All rights reserved.\nCopyright (c) 2011      University of Houston. All rights reserved.\nCopyright (c) 2013-2017 Intel, Inc. All rights reserved.\nCopyright (c) 2015      NVIDIA Corporation.  All rights reserved.\nCopyright (c) 2017-2018 Los Alamos National Security, LLC.  All rights\n                        reserved.\nCopyright (c) 2017      Research Organization for Information Science\n                        and Technology (RIST). All rights reserved.\n\n$COPYRIGHT$\n\nAdditional copyrights may follow\n\n$HEADER$\n\n===========================================================================\n\nWhen submitting questions and problems, be sure to include as much\nextra information as possible.  This web page details all the\ninformation that we request in order to provide assistance:\n\n     http://www.open-mpi.org/community/help/\n\nThe best way to report bugs, send comments, or ask questions is to\nsign up on the user's and/or developer's mailing list (for user-level\nand developer-level questions; when in doubt, send to the user's\nlist):\n\n        users@lists.open-mpi.org\n        devel@lists.open-mpi.org\n\nBecause of spam, only subscribers are allowed to post to these lists\n(ensure that you subscribe with and post from exactly the same e-mail\naddress -- joe@example.com is considered different than\njoe@mycomputer.example.com!).  Visit these pages to subscribe to the\nlists:\n\n     http://lists.open-mpi.org/mailman/listinfo/users\n     http://lists.open-mpi.org/mailman/listinfo/devel\n\nThanks for your time.\n\n===========================================================================\n\nMuch, much more information is also available in the Open MPI FAQ:\n\n    https://www.open-mpi.org/faq/\n\n===========================================================================\n\nQuick start\n-----------\n\nIn many cases, Open MPI can be built and installed by simply\nindicating the installation directory on the command line:\n\n$ tar xf openmpi-<version>.tar.bz2\n$ cd openmpi-<version>\n$ ./configure --prefix=<path> |& tee config.out\n...lots of output...\n$ make -j 8 |& tee make.out\n...lots of output...\n$ make install |& tee install.out\n...lots of output...\n\nNote that there are many, many configuration options to the\n\"./configure\" step.  Some of them may be needed for your particular\nenvironmnet; see below for desciptions of the options available.\n\nIf your installation prefix path is not writable by a regular user,\nyou may need to use sudo or su to run the \"make install\" step.  For\nexample:\n\n$ sudo make install |& tee install.out\n[sudo] password for jsquyres: <enter your password here>\n...lots of output...\n\nFinally, note that VPATH builds are fully supported.  For example:\n\n$ tar xf openmpi-<version>.tar.bz2\n$ cd openmpi-<version>\n$ mkdir build\n$ cd build\n$ ../configure --prefix=<path> |& tee config.out\n...etc.\n\nThe rest of this README file contains:\n\n- General release notes about Open MPI, including information about\n  platform, compiler, and run-time support, MPI and OpenSHMEM\n  functionality, network support, and MPI extensions.\n- Detailed information on building and installing Open MPI.\n- Open MPI version and library numbering policies, including how those\n  are related to backwards compatibility guarantees.\n- Information on how to both query and validate your Open MPI\n  installation.\n- Description of Open MPI extensions.\n- Examples showing how to compile and run Open MPI applications.\n- Summary information on the various plugin frameworks inside Open\n  MPI and OpenSHMEM.\n\n===========================================================================\n\nThe following abbreviated list of release notes applies to this code\nbase as of this writing (March 2017):\n\nGeneral notes\n-------------\n\n- Open MPI now includes two public software layers: MPI and OpenSHMEM.\n  Throughout this document, references to Open MPI implicitly include\n  both of these layers. When distinction between these two layers is\n  necessary, we will reference them as the \"MPI\" and \"OpenSHMEM\"\n  layers respectively.\n\n- OpenSHMEM is a collaborative effort between academia, industry, and\n  the U.S. Government to create a specification for a standardized API\n  for parallel programming in the Partitioned Global Address Space\n  (PGAS).  For more information about the OpenSHMEM project, including\n  access to the current OpenSHMEM specification, please visit:\n\n     http://openshmem.org/\n\n  This OpenSHMEM implementation will only work in Linux environments\n  with a restricted set of supported networks.\n\n- Open MPI includes support for a wide variety of supplemental\n  hardware and software package.  When configuring Open MPI, you may\n  need to supply additional flags to the \"configure\" script in order\n  to tell Open MPI where the header files, libraries, and any other\n  required files are located.  As such, running \"configure\" by itself\n  may not include support for all the devices (etc.) that you expect,\n  especially if their support headers / libraries are installed in\n  non-standard locations.  Network interconnects are an easy example\n  to discuss -- Libfabric and OpenFabrics networks, for example, both\n  have supplemental headers and libraries that must be found before\n  Open MPI can build support for them.  You must specify where these\n  files are with the appropriate options to configure.  See the\n  listing of configure command-line switches, below, for more details.\n\n- The majority of Open MPI's documentation is here in this file, the\n  included man pages, and on the web site FAQ\n  (https://www.open-mpi.org/).\n\n- Note that Open MPI documentation uses the word \"component\"\n  frequently; the word \"plugin\" is probably more familiar to most\n  users.  As such, end users can probably completely substitute the\n  word \"plugin\" wherever you see \"component\" in our documentation.\n  For what it's worth, we use the word \"component\" for historical\n  reasons, mainly because it is part of our acronyms and internal API\n  function calls.\n\n- The run-time systems that are currently supported are:\n  - rsh / ssh\n  - PBS Pro, Torque\n  - Platform LSF (tested with v9.1.1 and later)\n  - SLURM\n  - Cray XE, XC, and XK\n  - Oracle Grid Engine (OGE) 6.1, 6.2 and open source Grid Engine\n\n- Systems that have been tested are:\n  - Linux (various flavors/distros), 64 bit (x86), with gcc, Absoft,\n    Intel, and Portland (*)\n  - macOS (10.12), 64 bit (x85_64) with XCode compilers\n\n  (*) Be sure to read the Compiler Notes, below.\n\n- Other systems have been lightly (but not fully tested):\n  - Linux (various flavors/distros), 32 bit, with gcc\n  - Cygwin 32 & 64 bit with gcc\n  - ARMv6, ARMv7, ARMv8 (aarch64)\n  - Other 64 bit platforms (e.g., Linux on PPC64)\n  - Oracle Solaris 10 and 11, 32 and 64 bit (SPARC, i386, x86_64),\n    with Oracle Solaris Studio 12.5\n  - OpenBSD.  Requires configure options --enable-mca-no-build=patcher\n    and --disable-slopen with this release.\n  - Problems have been reported when building Open MPI on FreeBSD 11.1\n    using the clang-4.0 system compiler. A workaround is to build\n    Open MPI using the GNU compiler.\n\n- Open MPI has taken some steps towards Reproducible Builds\n  (https://reproducible-builds.org/).  Specifically, Open MPI's\n  \"configure\" and \"make\" process, by default, records some\n  system-specific information such as the hostname where Open MPI was\n  built and the username who built it.  If you desire a Reproducible\n  Build, set the $USER and $HOSTNAME environment variables before\n  invoking \"configure\" and \"make\", and Open MPI will use those values\n  instead of invoking \"whoami\" and/or \"hostname\", respectively.\n\nPlatform Notes\n--------------\n\n- N/A\n\nCompiler Notes\n--------------\n\n- Open MPI requires a C99-capable compiler to build.\n\n- Mixing compilers from different vendors when building Open MPI\n  (e.g., using the C/C++ compiler from one vendor and the Fortran\n  compiler from a different vendor) has been successfully employed by\n  some Open MPI users (discussed on the Open MPI user's mailing list),\n  but such configurations are not tested and not documented.  For\n  example, such configurations may require additional compiler /\n  linker flags to make Open MPI build properly.\n\n- In general, the latest versions of compilers of a given vendor's\n  series have the least bugs.  We have seen cases where Vendor XYZ's\n  compiler version A.B fails to compile Open MPI, but version A.C\n  (where C>B) works just fine.  If you run into a compile failure, you\n  might want to double check that you have the latest bug fixes and\n  patches for your compiler.\n\n- Users have reported issues with older versions of the Fortran PGI\n  compiler suite when using Open MPI's (non-default) --enable-debug\n  configure option.  Per the above advice of using the most recent\n  version of a compiler series, the Open MPI team recommends using the\n  latest version of the PGI suite, and/or not using the --enable-debug\n  configure option.  If it helps, here's what we have found with some\n  (not comprehensive) testing of various versions of the PGI compiler\n  suite:\n\n    pgi-8 : NO known good version with --enable-debug\n    pgi-9 : 9.0-4 known GOOD\n    pgi-10: 10.0-0 known GOOD\n    pgi-11: NO known good version with --enable-debug\n    pgi-12: 12.10 known BAD with -m32, but known GOOD without -m32\n            (and 12.8 and 12.9 both known BAD with --enable-debug)\n    pgi-13: 13.9 known BAD with -m32, 13.10 known GOOD without -m32\n    pgi-15: 15.10 known BAD with -m32\n\n- Similarly, there is a known Fortran PGI compiler issue with long\n  source directory path names that was resolved in 9.0-4 (9.0-3 is\n  known to be broken in this regard).\n\n- Open MPI does not support the PGI compiler suite on OS X or MacOS.\n  See issues below for more details:\n  https://github.com/open-mpi/ompi/issues/2604\n  https://github.com/open-mpi/ompi/issues/2605\n\n- OpenSHMEM Fortran bindings do not support the `no underscore` Fortran\n  symbol convention. IBM's xlf compilers build in that mode by default.\n  As such, IBM's xlf compilers cannot build/link the OpenSHMEM Fortran\n  bindings by default. A workaround is to pass FC=\"xlf -qextname\" at\n  configure time to force a trailing underscore. See the issue below\n  for more details:\n  https://github.com/open-mpi/ompi/issues/3612\n\n- MPI applications that use the mpi_f08 module on PowerPC platforms\n  (tested ppc64le) will likely experience runtime failures if:\n   - they are using a GNU linker (ld) version after v2.25.1 and before v2.28,\n     -and-\n   - they compiled with PGI (tested 17.5) or XL (tested v15.1.5) compilers.\n  This was noticed on Ubuntu 16.04 which uses the 2.26.1 version of ld by\n  default. However, this issue impacts any OS using a version of ld noted\n  above. This GNU linker regression will be fixed in version 2.28.\n  Below is a link to the GNU bug on this issue:\n    https://sourceware.org/bugzilla/show_bug.cgi?id=21306\n  The XL compiler will include a fix for this issue in a future release.\n\n- On NetBSD-6 (at least AMD64 and i386), and possibly on OpenBSD,\n  libtool misidentifies properties of f95/g95, leading to obscure\n  compile-time failures if used to build Open MPI.  You can work\n  around this issue by ensuring that libtool will not use f95/g95\n  (e.g., by specifying FC=<some_other_compiler>, or otherwise ensuring\n  a different Fortran compiler will be found earlier in the path than\n  f95/g95), or by disabling the Fortran MPI bindings with\n  --disable-mpi-fortran.\n\n- On OpenBSD/i386, if you configure with\n  --enable-mca-no-build=patcher, you will also need to add\n  --disable-dlopen.  Otherwise, odd crashes can occur\n  nondeterministically.\n\n- Absoft 11.5.2 plus a service pack from September 2012 (which Absoft\n  says is available upon request), or a version later than 11.5.2\n  (e.g., 11.5.3), is required to compile the Fortran mpi_f08\n  module.\n\n- Open MPI does not support the Sparc v8 CPU target.  However,\n  as of Solaris Studio 12.1,  and later compilers, one should not\n  specify -xarch=v8plus or -xarch=v9.  The use of the options\n  -m32 and -m64 for producing 32 and 64 bit targets, respectively,\n  are now preferred by the Solaris Studio compilers.  GCC may\n  require either \"-m32\" or \"-mcpu=v9 -m32\", depending on GCC version.\n\n- It has been noticed that if one uses CXX=sunCC, in which sunCC\n  is a link in the Solaris Studio compiler release, that the OMPI\n  build system has issue with sunCC and does not build libmpi_cxx.so.\n  Therefore  the make install fails.  So we suggest that one should\n  use CXX=CC, which works, instead of CXX=sunCC.\n\n- If one tries to build OMPI on Ubuntu with Solaris Studio using the C++\n  compiler and the -m32 option, you might see a warning:\n\n    CC: Warning: failed to detect system linker version, falling back to\n    custom linker usage\n\n  And the build will fail.  One can overcome this error by either\n  setting LD_LIBRARY_PATH to the location of the 32 bit libraries (most\n  likely /lib32), or giving LDFLAGS=\"-L/lib32 -R/lib32\" to the configure\n  command.  Officially, Solaris Studio is not supported on Ubuntu Linux\n  distributions, so additional problems might be incurred.\n\n- Open MPI does not support the gccfss compiler (GCC For SPARC\n  Systems; a now-defunct compiler project from Sun).\n\n- At least some versions of the Intel 8.1 compiler seg fault while\n  compiling certain Open MPI source code files.  As such, it is not\n  supported.\n\n- The Intel 9.0 v20051201 compiler on IA64 platforms seems to have a\n  problem with optimizing the ptmalloc2 memory manager component (the\n  generated code will segv).  As such, the ptmalloc2 component will\n  automatically disable itself if it detects that it is on this\n  platform/compiler combination.  The only effect that this should\n  have is that the MCA parameter mpi_leave_pinned will be inoperative.\n\n- It has been reported that the Intel 9.1 and 10.0 compilers fail to\n  compile Open MPI on IA64 platforms.  As of 12 Sep 2012, there is\n  very little (if any) testing performed on IA64 platforms (with any\n  compiler).  Support is \"best effort\" for these platforms, but it is\n  doubtful that any effort will be expended to fix the Intel 9.1 /\n  10.0 compiler issuers on this platform.\n\n- Early versions of the Intel 12.1 Linux compiler suite on x86_64 seem\n  to have a bug that prevents Open MPI from working.  Symptoms\n  including immediate segv of the wrapper compilers (e.g., mpicc) and\n  MPI applications.  As of 1 Feb 2012, if you upgrade to the latest\n  version of the Intel 12.1 Linux compiler suite, the problem will go\n  away.\n\n- Early versions of the Portland Group 6.0 compiler have problems\n  creating the C++ MPI bindings as a shared library (e.g., v6.0-1).\n  Tests with later versions show that this has been fixed (e.g.,\n  v6.0-5).\n\n- The Portland Group compilers prior to version 7.0 require the\n  \"-Msignextend\" compiler flag to extend the sign bit when converting\n  from a shorter to longer integer.  This is is different than other\n  compilers (such as GNU).  When compiling Open MPI with the Portland\n  compiler suite, the following flags should be passed to Open MPI's\n  configure script:\n\n  shell$ ./configure CFLAGS=-Msignextend CXXFLAGS=-Msignextend \\\n         --with-wrapper-cflags=-Msignextend \\\n         --with-wrapper-cxxflags=-Msignextend ...\n\n  This will both compile Open MPI with the proper compile flags and\n  also automatically add \"-Msignextend\" when the C and C++ MPI wrapper\n  compilers are used to compile user MPI applications.\n\n- It has been reported that Pathscale 5.0.5 and 6.0.527 compilers\n  give an internal compiler error when trying to Open MPI.\n\n- Using the MPI C++ bindings with older versions of the Pathscale\n  compiler on some platforms is an old issue that seems to be a\n  problem when Pathscale uses a back-end GCC 3.x compiler. Here's a\n  proposed solution from the Pathscale support team (from July 2010):\n\n      The proposed work-around is to install gcc-4.x on the system and\n      use the pathCC -gnu4 option. Newer versions of the compiler (4.x\n      and beyond) should have this fixed, but we'll have to test to\n      confirm it's actually fixed and working correctly.\n\n  We don't anticipate that this will be much of a problem for Open MPI\n  users these days (our informal testing shows that not many users are\n  still using GCC 3.x).  Contact Pathscale support if you continue to\n  have problems with Open MPI's C++ bindings.\n\n  Note the MPI C++ bindings have been deprecated by the MPI Forum and\n  may not be supported in future releases.\n\n- As of July 2017, the Pathscale compiler suite apparently has no\n  further commercial support, and it does not look like there will be\n  further releases.  Any issues discovered regarding building /\n  running Open MPI with the Pathscale compiler suite therefore may not\n  be able to be resolved.\n\n- Using the Absoft compiler to build the MPI Fortran bindings on Suse\n  9.3 is known to fail due to a Libtool compatibility issue.\n\n- MPI Fortran API support has been completely overhauled since the\n  Open MPI v1.5/v1.6 series.\n\n  ********************************************************************\n  ********************************************************************\n  *** There is now only a single Fortran MPI wrapper compiler and a\n  *** single Fortran OpenSHMEM wrapper compiler: mpifort and oshfort,\n  *** respectively.  mpif77 and mpif90 still exist, but they are\n  *** symbolic links to mpifort.\n  ********************************************************************\n  *** Similarly, Open MPI's configure script only recognizes the FC\n  *** and FCFLAGS environment variables (to specify the Fortran\n  *** compiler and compiler flags, respectively).  The F77 and FFLAGS\n  *** environment variables are IGNORED.\n  ********************************************************************\n  ********************************************************************\n\n  As a direct result, it is STRONGLY recommended that you specify a\n  Fortran compiler that uses file suffixes to determine Fortran code\n  layout (e.g., free form vs. fixed).  For example, with some versions\n  of the IBM XLF compiler, it is preferable to use FC=xlf instead of\n  FC=xlf90, because xlf will automatically determine the difference\n  between free form and fixed Fortran source code.\n\n  However, many Fortran compilers allow specifying additional\n  command-line arguments to indicate which Fortran dialect to use.\n  For example, if FC=xlf90, you may need to use \"mpifort --qfixed ...\"\n  to compile fixed format Fortran source files.\n\n  You can use either ompi_info or oshmem_info to see with which Fortran\n  compiler Open MPI was configured and compiled.\n\n  There are up to three sets of Fortran MPI bindings that may be\n  provided depending on your Fortran compiler):\n\n  - mpif.h: This is the first MPI Fortran interface that was defined\n    in MPI-1.  It is a file that is included in Fortran source code.\n    Open MPI's mpif.h does not declare any MPI subroutines; they are\n    all implicit.\n\n  - mpi module: The mpi module file was added in MPI-2.  It provides\n    strong compile-time parameter type checking for MPI subroutines.\n\n  - mpi_f08 module: The mpi_f08 module was added in MPI-3.  It\n    provides many advantages over the mpif.h file and mpi module.  For\n    example, MPI handles have distinct types (vs. all being integers).\n    See the MPI-3 document for more details.\n\n    *** The mpi_f08 module is STRONGLY is recommended for all new MPI\n        Fortran subroutines and applications.  Note that the mpi_f08\n        module can be used in conjunction with the other two Fortran\n        MPI bindings in the same application (only one binding can be\n        used per subroutine/function, however).  Full interoperability\n        between mpif.h/mpi module and mpi_f08 module MPI handle types\n        is provided, allowing mpi_f08 to be used in new subroutines in\n        legacy MPI applications.\n\n  Per the OpenSHMEM specification, there is only one Fortran OpenSHMEM\n  binding provided:\n\n  - shmem.fh: All Fortran OpenSHMEM programs **should** include\n    'shmem.fh', and Fortran OpenSHMEM programs that use constants\n    defined by OpenSHMEM **MUST** include 'shmem.fh'.\n\n  The following notes apply to the above-listed Fortran bindings:\n\n  - All Fortran compilers support the mpif.h/shmem.fh-based bindings,\n    with one exception: the MPI_SIZEOF interfaces will only be present\n    when Open MPI is built with a Fortran compiler that support the\n    INTERFACE keyword and ISO_FORTRAN_ENV.  Most notably, this\n    excludes the GNU Fortran compiler suite before version 4.9.\n\n  - The level of support provided by the mpi module is based on your\n    Fortran compiler.\n\n    If Open MPI is built with a non-GNU Fortran compiler, or if Open\n    MPI is built with the GNU Fortran compiler >= v4.9, all MPI\n    subroutines will be prototyped in the mpi module.  All calls to\n    MPI subroutines will therefore have their parameter types checked\n    at compile time.\n\n    If Open MPI is built with an old gfortran (i.e., < v4.9), a\n    limited \"mpi\" module will be built.  Due to the limitations of\n    these compilers, and per guidance from the MPI-3 specification,\n    all MPI subroutines with \"choice\" buffers are specifically *not*\n    included in the \"mpi\" module, and their parameters will not be\n    checked at compile time.  Specifically, all MPI subroutines with\n    no \"choice\" buffers are prototyped and will receive strong\n    parameter type checking at run-time (e.g., MPI_INIT,\n    MPI_COMM_RANK, etc.).\n\n    Similar to the mpif.h interface, MPI_SIZEOF is only supported on\n    Fortran compilers that support INTERFACE and ISO_FORTRAN_ENV.\n\n  - The mpi_f08 module has been tested with the Intel Fortran compiler\n    and gfortran >= 4.9.  Other modern Fortran compilers likely also\n    work.\n\n    Many older Fortran compilers do not provide enough modern Fortran\n    features to support the mpi_f08 module.  For example, gfortran <\n    v4.9 does provide enough support for the mpi_f08 module.\n\n  You can examine the output of the following command to see all\n  the Fortran features that are/are not enabled in your Open MPI\n  installation:\n\n  shell$ ompi_info | grep -i fort\n\n\nGeneral Run-Time Support Notes\n------------------------------\n\n- The Open MPI installation must be in your PATH on all nodes (and\n  potentially LD_LIBRARY_PATH (or DYLD_LIBRARY_PATH), if libmpi/libshmem\n  is a shared library), unless using the --prefix or\n  --enable-mpirun-prefix-by-default functionality (see below).\n\n- Open MPI's run-time behavior can be customized via MPI Component\n  Architecture (MCA) parameters (see below for more information on how\n  to get/set MCA parameter values).  Some MCA parameters can be set in\n  a way that renders Open MPI inoperable (see notes about MCA\n  parameters later in this file).  In particular, some parameters have\n  required options that must be included.\n\n  - If specified, the \"btl\" parameter must include the \"self\"\n    component, or Open MPI will not be able to deliver messages to the\n    same rank as the sender.  For example: \"mpirun --mca btl tcp,self\n    ...\"\n  - If specified, the \"btl_tcp_if_exclude\" parameter must include the\n    loopback device (\"lo\" on many Linux platforms), or Open MPI will\n    not be able to route MPI messages using the TCP BTL.  For example:\n    \"mpirun --mca btl_tcp_if_exclude lo,eth1 ...\"\n\n- Running on nodes with different endian and/or different datatype\n  sizes within a single parallel job is supported in this release.\n  However, Open MPI does not resize data when datatypes differ in size\n  (for example, sending a 4 byte MPI_DOUBLE and receiving an 8 byte\n  MPI_DOUBLE will fail).\n\n\nMPI Functionality and Features\n------------------------------\n\n- All MPI-3 functionality is supported.\n\n- Note that starting with Open MPI v4.0.0, prototypes for several\n  legacy MPI-1 symbols that were deleted in the MPI-3.0 specification\n  (which was published in 2012) are no longer available by default in\n  mpi.h.  Specifically, several MPI-1 symbols were deprecated in the\n  1996 publishing of the MPI-2.0 specification.  These deprecated\n  symbols were eventually removed from the MPI-3.0 specification in\n  2012.\n\n  The symbols that now no longer appear by default in Open MPI's mpi.h\n  are:\n\n  - MPI_Address (replaced by MPI_Get_address)\n  - MPI_Errhandler_create (replaced by MPI_Comm_create_errhandler)\n  - MPI_Errhandler_get (replaced by MPI_Comm_get_errhandler)\n  - MPI_Errhandler_set (replaced by MPI_Comm_set_errhandler)\n  - MPI_Type_extent (replaced by MPI_Type_get_extent)\n  - MPI_Type_hindexed (replaced by MPI_Type_create_hindexed)\n  - MPI_Type_hvector (replaced by MPI_Type_create_hvector)\n  - MPI_Type_lb (replaced by MPI_Type_get_extent)\n  - MPI_Type_struct (replaced by MPI_Type_create_struct)\n  - MPI_Type_ub (replaced by MPI_Type_get_extent)\n  - MPI_LB (replaced by MPI_Type_create_resized)\n  - MPI_UB (replaced by MPI_Type_create_resized)\n  - MPI_COMBINER_HINDEXED_INTEGER\n  - MPI_COMBINER_HVECTOR_INTEGER\n  - MPI_COMBINER_STRUCT_INTEGER\n  - MPI_Handler_function (replaced by MPI_Comm_errhandler_function)\n\n  Although these symbols are no longer prototyped in mpi.h, they\n  are still present in the MPI library in Open MPI v4.0.x. This\n  enables legacy MPI applications to link and run successfully with\n  Open MPI v4.0.x, even though they will fail to compile.\n\n  *** Future releases of Open MPI beyond the v4.0.x series may\n      remove these symbols altogether.\n\n  *** The Open MPI team STRONGLY encourages all MPI application\n      developers to stop using these constructs that were first\n      deprecated over 20 years ago, and finally removed from the MPI\n      specification in MPI-3.0 (in 2012).\n\n  *** The Open MPI FAQ (https://www.open-mpi.org/faq/) contains\n      examples of how to update legacy MPI applications using these\n      deleted symbols to use the \"new\" symbols.\n\n  All that being said, if you are unable to immediately update your\n  application to stop using these legacy MPI-1 symbols, you can\n  re-enable them in mpi.h by configuring Open MPI with the\n  --enable-mpi1-compatibility flag.\n\n- Rank reordering support is available using the TreeMatch library. It\n  is activated for the graph and dist_graph topologies.\n\n- When using MPI deprecated functions, some compilers will emit\n  warnings.  For example:\n\n  shell$ cat deprecated_example.c\n  #include <mpi.h>\n  void foo(void) {\n      MPI_Datatype type;\n      MPI_Type_struct(1, NULL, NULL, NULL, &type);\n  }\n  shell$ mpicc -c deprecated_example.c\n  deprecated_example.c: In function 'foo':\n  deprecated_example.c:4: warning: 'MPI_Type_struct' is deprecated (declared at /opt/openmpi/include/mpi.h:1522)\n  shell$\n\n- MPI_THREAD_MULTIPLE is supported with some exceptions.  Note that\n  Open MPI must be configured with --enable-mpi-thread-multiple to get\n  this level of thread safety support.\n\n  The following PMLs support MPI_THREAD_MULTIPLE:\n  - cm (see list (1) of supported MTLs, below)\n  - ob1 (see list (2) of supported BTLs, below)\n  - ucx\n  - yalla\n\n  (1) The cm PML and the following MTLs support MPI_THREAD_MULTIPLE:\n      - ofi (Libfabric)\n      - portals4\n\n  (2) The ob1 PML and the following BTLs support MPI_THREAD_MULTIPLE:\n      - openib (see exception below)\n      - self\n      - sm\n      - smcuda\n      - tcp\n      - ugni\n      - usnic\n      - vader (shared memory)\n\n  The openib BTL's RDMACM based connection setup mechanism is also not\n  thread safe.  The default UDCM method should be used for\n  applications requiring MPI_THREAD_MULTIPLE support.\n\n  Currently, MPI File operations are not thread safe even if MPI is\n  initialized for MPI_THREAD_MULTIPLE support.\n\n- MPI_REAL16 and MPI_COMPLEX32 are only supported on platforms where a\n  portable C datatype can be found that matches the Fortran type\n  REAL*16, both in size and bit representation.\n\n- The \"libompitrace\" library is bundled in Open MPI and is installed\n  by default (it can be disabled via the --disable-libompitrace\n  flag).  This library provides a simplistic tracing of select MPI\n  function calls via the MPI profiling interface.  Linking it in to\n  your application via (e.g., via -lompitrace) will automatically\n  output to stderr when some MPI functions are invoked:\n\n  shell$ cd examples/\n  shell$ mpicc hello_c.c -o hello_c -lompitrace\n  shell$ mpirun -np 1 hello_c\n  MPI_INIT: argc 1\n  Hello, world, I am 0 of 1\n  MPI_BARRIER[0]: comm MPI_COMM_WORLD\n  MPI_FINALIZE[0]\n  shell$\n\n  Keep in mind that the output from the trace library is going to\n  stderr, so it may output in a slightly different order than the\n  stdout from your application.\n\n  This library is being offered as a \"proof of concept\" / convenience\n  from Open MPI.  If there is interest, it is trivially easy to extend\n  it to printf for other MPI functions.  Pull requests on github.com\n  would be greatly appreciated.\n\nOpenSHMEM Functionality and Features\n------------------------------------\n\n- All OpenSHMEM-1.3 functionality is supported.\n\n\nMPI Collectives\n---------------\n\n- The \"fca\" coll component: the Mellanox Fabric Collective Accelerator\n  (FCA) is a solution for offloading collective operations from the\n  MPI process onto Mellanox QDR InfiniBand switch CPUs and HCAs.\n\n- The \"cuda\" coll component provides CUDA-aware support for the\n  reduction type collectives with GPU buffers. This component is only\n  compiled into the library when the library has been configured with\n  CUDA-aware support.  It intercepts calls to the reduction\n  collectives, copies the data to staging buffers if GPU buffers, then\n  calls underlying collectives to do the work.\n\nOpenSHMEM Collectives\n---------------------\n\n- The \"fca\" scoll component: the Mellanox Fabric Collective\n  Accelerator (FCA) is a solution for offloading collective operations\n  from the MPI process onto Mellanox QDR InfiniBand switch CPUs and\n  HCAs.\n\n- The \"basic\" scoll component: Reference implementation of all\n  OpenSHMEM collective operations.\n\n\nNetwork Support\n---------------\n\n- There are several main MPI network models available: \"ob1\", \"cm\",\n  \"ucx\", and \"yalla\".  \"ob1\" uses BTL (\"Byte Transfer Layer\")\n  components for each supported network.  \"cm\" uses MTL (\"Matching\n  Transport Layer\") components for each supported network.  \"ucx\" uses\n  the OpenUCX transport.\n\n  - \"ob1\" supports a variety of networks that can be used in\n    combination with each other:\n\n    - OpenFabrics: InfiniBand, iWARP, and RoCE\n    - Loopback (send-to-self)\n    - Shared memory\n    - TCP\n    - SMCUDA\n    - Cisco usNIC\n    - uGNI (Cray Gemini, Aries)\n    - vader (XPMEM, Linux CMA, Linux KNEM, and copy-in/copy-out shared\n      memory)\n\n  - \"cm\" supports a smaller number of networks (and they cannot be\n    used together), but may provide better overall MPI performance:\n\n    - Intel Omni-Path PSM2\n    - Intel True Scale PSM (QLogic InfiniPath)\n    - OpenFabrics Interfaces (\"libfabric\" tag matching)\n    - Portals 4\n\n  - UCX is the Unified Communication X (UCX) communication library\n    (http://www.openucx.org/).  This is an open-source project\n    developed in collaboration between industry, laboratories, and\n    academia to create an open-source production grade communication\n    framework for data centric and high-performance applications.  The\n    UCX library can be downloaded from repositories (e.g.,\n    Fedora/RedHat yum repositories).  The UCX library is also part of\n    Mellanox OFED and Mellanox HPC-X binary distributions.\n\n    UCX currently supports:\n\n    - OpenFabrics Verbs (including InfiniBand and RoCE)\n    - Cray's uGNI\n    - TCP\n    - Shared memory\n    - NVIDIA CUDA drivers\n\n  While users can manually select any of the above transports at run\n  time, Open MPI will select a default transport as follows:\n\n  1. If InfiniBand devices are available, use the UCX PML.\n\n  2. If PSM, PSM2, or other tag-matching-supporting Libfabric\n     transport devices are available (e.g., Cray uGNI), use the \"cm\"\n     PML and a single appropriate corresponding \"mtl\" module.\n\n  3. If MXM/InfiniBand devices are availble, use the \"yalla\" PML\n     (NOTE: the \"yalla\"/MXM PML is deprecated -- see below).\n\n  4. Otherwise, use the ob1 PML and one or more appropriate \"btl\"\n     modules.\n\n  Users can override Open MPI's default selection algorithms and force\n  the use of a specific transport if desired by setting the \"pml\" MCA\n  parameter (and potentially the \"btl\" and/or \"mtl\" MCA parameters) at\n  run-time:\n\n      shell$ mpirun --mca pml ob1 --mca btl [comma-delimted-BTLs] ...\n      or\n      shell$ mpirun --mca pml cm --mca mtl [MTL] ...\n      or\n      shell$ mpirun --mca pml ucx ...\n\n  As alluded to above, there is actually a fourth MPI point-to-point\n  transport, but it is deprecated and will likely be removed in a\n  future Open MPI release:\n\n  - \"yalla\" uses the Mellanox MXM transport library.  MXM is the\n     deprecated Mellanox Messaging Accelerator library, utilizing a\n     full range of IB transports to provide the following messaging\n     services to the upper level MPI/OpenSHMEM libraries.  MXM is only\n     included in this release of Open MPI for backwards compatibility;\n     the \"ucx\" PML should be used insead.\n\n- The main OpenSHMEM network model is \"ucx\"; it interfaces directly\n  with UCX.\n\n  The \"ikrit\" OpenSHMEM network model is also available, but is\n  deprecated; it uses the deprecated Mellanox Message Accelerator\n  (MXM) library.\n\n- In prior versions of Open MPI, InfiniBand and RoCE support was\n  provided through the openib BTL and ob1 PML plugins.  Starting with\n  Open MPI 4.0.0, InfiniBand support through the openib plugin is both\n  deprecated and superseded by the ucx PML component.\n\n  While the openib BTL depended on libibverbs, the UCX PML depends on\n  the UCX library.\n\n  Once installed, Open MPI can be built with UCX support by adding\n  --with-ucx to the Open MPI configure command. Once Open MPI is\n  configured to use UCX, the runtime will automatically select the UCX\n  PML if one of the supported networks is detected (e.g., InfiniBand).\n  It's possible to force using UCX in the mpirun or oshrun command\n  lines by specifying any or all of the following mca parameters:\n  \"--mca pml ucx\" for MPI point-to-point operations, \"--mca spml ucx\"\n  for OpenSHMEM support, and \"--mca osc ucx\" for MPI RMA (one-sided)\n  operations.\n\n- Although the ob1 PML+openib BTL is still the default for iWARP and\n  RoCE devices, it will reject InfiniBand defaults (by default) so\n  that they will use the ucx PML.  If using the openib BTL is still\n  desired, set the following MCA parameters:\n\n  # Note that \"vader\" is Open MPI's shared memory BTL\n  $ mpirun --mca pml ob1 --mca btl openib,vader,self \\\n        --mca btl_openib_allow_ib 1 ...\n\n- The usnic BTL is support for Cisco's usNIC device (\"userspace NIC\")\n  on Cisco UCS servers with the Virtualized Interface Card (VIC).\n  Although the usNIC is accessed via the OpenFabrics Libfabric API\n  stack, this BTL is specific to Cisco usNIC devices.\n\n- uGNI is a Cray library for communicating over the Gemini and Aries\n  interconnects.\n\n- The OpenFabrics Enterprise Distribution (OFED) software package v1.0\n  will not work properly with Open MPI v1.2 (and later) due to how its\n  Mellanox InfiniBand plugin driver is created.  The problem is fixed\n  OFED v1.1 (and later).\n\n- Better memory management support is available for OFED-based\n  transports using the \"ummunotify\" Linux kernel module.  OFED memory\n  managers are necessary for better bandwidth when re-using the same\n  buffers for large messages (e.g., benchmarks and some applications).\n\n  Unfortunately, the ummunotify module was not accepted by the Linux\n  kernel community (and is still not distributed by OFED).  But it\n  still remains the best memory management solution for MPI\n  applications that used the OFED network transports.  If Open MPI is\n  able to find the <linux/ummunotify.h> header file, it will build\n  support for ummunotify and include it by default.  If MPI processes\n  then find the ummunotify kernel module loaded and active, then their\n  memory managers (which have been shown to be problematic in some\n  cases) will be disabled and ummunotify will be used.  Otherwise, the\n  same memory managers from prior versions of Open MPI will be used.\n  The ummunotify Linux kernel module can be downloaded from:\n\n    http://lwn.net/Articles/343351/\n\n- The use of fork() with OpenFabrics-based networks (i.e., the openib\n  BTL) is only partially supported, and only on Linux kernels >=\n  v2.6.15 with libibverbs v1.1 or later (first released as part of\n  OFED v1.2), per restrictions imposed by the OFED network stack.\n\n- Linux \"knem\" support is used when the \"vader\" or \"sm\" (shared\n  memory) BTLs are compiled with knem support (see the --with-knem\n  configure option) and the knem Linux module is loaded in the running\n  kernel.  If the knem Linux kernel module is not loaded, the knem\n  support is (by default) silently deactivated during Open MPI jobs.\n\n  See http://runtime.bordeaux.inria.fr/knem/ for details on Knem.\n\n- Linux Cross-Memory Attach (CMA) or XPMEM is used by the vader\n  shared-memory BTL when the CMA/XPMEM libraries are installedm,\n  respectively.  Linux CMA and XPMEM are similar (but different)\n  mechanisms for Open MPI to utilize single-copy semantics for shared\n  memory.\n\nOpen MPI Extensions\n-------------------\n\n- An MPI \"extensions\" framework is included in Open MPI, but is not\n  enabled by default.  See the \"Open MPI API Extensions\" section below\n  for more information on compiling and using MPI extensions.\n\n- The following extensions are included in this version of Open MPI:\n\n  - pcollreq: Provides routines for persistent collective communication\n    operations and persistent neighborhood collective communication\n    operations, which are planned to be included in the next MPI\n    Standard after MPI-3.1 as of Nov. 2018.  The function names are\n    prefixed with MPIX_ instead of MPI_, like MPIX_Barrier_init,\n    because they are not standardized yet.  Future versions of Open MPI\n    will switch to the MPI_ prefix once the MPI Standard which includes\n    this feature is published.  See their man page for more details.\n  - affinity: Provides the OMPI_Affinity_str() routine on retrieving\n    a string that contains what resources a process is bound to.  See\n    its man page for more details.\n  - cr: Provides routines to access to checkpoint restart routines.\n    See ompi/mpiext/cr/mpiext_cr_c.h for a listing of available\n    functions.\n  - cuda: When the library is compiled with CUDA-aware support, it\n    provides two things.  First, a macro\n    MPIX_CUDA_AWARE_SUPPORT. Secondly, the function\n    MPIX_Query_cuda_support that can be used to query for support.\n  - example: A non-functional extension; its only purpose is to\n    provide an example for how to create other extensions.\n\n===========================================================================\n\nBuilding Open MPI\n-----------------\n\nIf you have checked out a DEVELOPER'S COPY of Open MPI (i.e., you\ncloned from Git), you really need to read the HACKING file before\nattempting to build Open MPI. Really.\n\nIf you have downloaded a tarball, then things are much simpler.\nOpen MPI uses a traditional configure script paired with \"make\" to\nbuild.  Typical installs can be of the pattern:\n\nshell$ ./configure [...options...]\nshell$ make [-j N] all install\n    (use an integer value of N for parallel builds)\n\nThere are many available configure options (see \"./configure --help\"\nfor a full list); a summary of the more commonly used ones is included\nbelow.\n\nNOTE: if you are building Open MPI on a network filesystem, the\n      machine you on which you are building *must* be\n      time-synchronized with the file server.  Specifically: Open\n      MPI's build system *requires* accurate filesystem timestamps.\n      If your \"make\" output includes warning about timestamps in the\n      future or runs GNU Automake, Autoconf, and/or Libtool, this is\n      *not normal*, and you may have an invalid build.  Ensure that\n      the time on your build machine is synchronized with the time on\n      your file server, or build on a local filesystem.  Then remove\n      the Open MPI source directory and start over (e.g., by\n      re-extracting the Open MPI tarball).\n\nNote that for many of Open MPI's --with-<foo> options, Open MPI will,\nby default, search for header files and/or libraries for <foo>.  If\nthe relevant files are found, Open MPI will built support for <foo>;\nif they are not found, Open MPI will skip building support for <foo>.\nHowever, if you specify --with-<foo> on the configure command line and\nOpen MPI is unable to find relevant support for <foo>, configure will\nassume that it was unable to provide a feature that was specifically\nrequested and will abort so that a human can resolve out the issue.\n\nAdditionally, if a search directory is specified in the form\n--with-<foo>=<dir>, Open MPI will:\n\n1. Search for <foo>'s header files in <dir>/include.\n2. Search for <foo>'s library files:\n   2a. If --with-<foo>-libdir=<libdir> was specified, search in\n       <libdir>.\n   2b. Otherwise, search in <dir>/lib, and if they are not found\n       there, search again in <dir>/lib64.\n3. If both the relevant header files and libraries are found:\n   3a. Open MPI will build support for <foo>.\n   3b. If the root path where the <foo> libraries are found is neither\n       \"/usr\" nor \"/usr/local\", Open MPI will compile itself with\n       RPATH flags pointing to the directory where <foo>'s libraries\n       are located.  Open MPI does not RPATH /usr/lib[64] and\n       /usr/local/lib[64] because many systems already search these\n       directories for run-time libraries by default; adding RPATH for\n       them could have unintended consequences for the search path\n       ordering.\n\nINSTALLATION OPTIONS\n\n--prefix=<directory>\n  Install Open MPI into the base directory named <directory>.  Hence,\n  Open MPI will place its executables in <directory>/bin, its header\n  files in <directory>/include, its libraries in <directory>/lib, etc.\n\n--disable-shared\n  By default, Open MPI and OpenSHMEM build shared libraries, and all\n  components are built as dynamic shared objects (DSOs). This switch\n  disables this default; it is really only useful when used with\n  --enable-static.  Specifically, this option does *not* imply\n  --enable-static; enabling static libraries and disabling shared\n  libraries are two independent options.\n\n--enable-static\n  Build MPI and OpenSHMEM as static libraries, and statically link in\n  all components.  Note that this option does *not* imply\n  --disable-shared; enabling static libraries and disabling shared\n  libraries are two independent options.\n\n  Be sure to read the description of --without-memory-manager, below;\n  it may have some effect on --enable-static.\n\n--disable-wrapper-rpath\n  By default, the wrapper compilers (e.g., mpicc) will enable \"rpath\"\n  support in generated executables on systems that support it.  That\n  is, they will include a file reference to the location of Open MPI's\n  libraries in the application executable itself.  This means that\n  the user does not have to set LD_LIBRARY_PATH to find Open MPI's\n  libraries (e.g., if they are installed in a location that the\n  run-time linker does not search by default).\n\n  On systems that utilize the GNU ld linker, recent enough versions\n  will actually utilize \"runpath\" functionality, not \"rpath\".  There\n  is an important difference between the two:\n\n  \"rpath\": the location of the Open MPI libraries is hard-coded into\n      the MPI/OpenSHMEM application and cannot be overridden at\n      run-time.\n  \"runpath\": the location of the Open MPI libraries is hard-coded into\n      the MPI/OpenSHMEM application, but can be overridden at run-time\n      by setting the LD_LIBRARY_PATH environment variable.\n\n  For example, consider that you install Open MPI vA.B.0 and\n  compile/link your MPI/OpenSHMEM application against it.  Later, you\n  install Open MPI vA.B.1 to a different installation prefix (e.g.,\n  /opt/openmpi/A.B.1 vs. /opt/openmpi/A.B.0), and you leave the old\n  installation intact.\n\n  In the rpath case, your MPI application will always use the\n  libraries from your A.B.0 installation.  In the runpath case, you\n  can set the LD_LIBRARY_PATH environment variable to point to the\n  A.B.1 installation, and then your MPI application will use those\n  libraries.\n\n  Note that in both cases, however, if you remove the original A.B.0\n  installation and set LD_LIBRARY_PATH to point to the A.B.1\n  installation, your application will use the A.B.1 libraries.\n\n  This rpath/runpath behavior can be disabled via\n  --disable-wrapper-rpath.\n\n  If you would like to keep the rpath option, but not enable runpath\n  a different configure option is avalabile\n  --disable-wrapper-runpath.\n\n--enable-dlopen\n  Build all of Open MPI's components as standalone Dynamic Shared\n  Objects (DSO's) that are loaded at run-time (this is the default).\n  The opposite of this option, --disable-dlopen, causes two things:\n\n  1. All of Open MPI's components will be built as part of Open MPI's\n     normal libraries (e.g., libmpi).\n  2. Open MPI will not attempt to open any DSO's at run-time.\n\n  Note that this option does *not* imply that OMPI's libraries will be\n  built as static objects (e.g., libmpi.a).  It only specifies the\n  location of OMPI's components: standalone DSOs or folded into the\n  Open MPI libraries.  You can control whether Open MPI's libraries\n  are build as static or dynamic via --enable|disable-static and\n  --enable|disable-shared.\n\n--disable-show-load-errors-by-default\n  Set the default value of the mca_base_component_show_load_errors MCA\n  variable: the --enable form of this option sets the MCA variable to\n  true, the --disable form sets the MCA variable to false.  The MCA\n  mca_base_component_show_load_errors variable can still be overridden\n  at run time via the usual MCA-variable-setting mechanisms; this\n  configure option simply sets the default value.\n\n  The --disable form of this option is intended for Open MPI packagers\n  who tend to enable support for many different types of networks and\n  systems in their packages.  For example, consider a packager who\n  includes support for both the FOO and BAR networks in their Open MPI\n  package, both of which require support libraries (libFOO.so and\n  libBAR.so).  If an end user only has BAR hardware, they likely only\n  have libBAR.so available on their systems -- not libFOO.so.\n  Disabling load errors by default will prevent the user from seeing\n  potentially confusing warnings about the FOO components failing to\n  load because libFOO.so is not available on their systems.\n\n  Conversely, system administrators tend to build an Open MPI that is\n  targeted at their specific environment, and contains few (if any)\n  components that are not needed.  In such cases, they might want\n  their users to be warned that the FOO network components failed to\n  load (e.g., if libFOO.so was mistakenly unavailable), because Open\n  MPI may otherwise silently failover to a slower network path for MPI\n  traffic.\n\n--with-platform=FILE\n  Load configure options for the build from FILE.  Options on the\n  command line that are not in FILE are also used.  Options on the\n  command line and in FILE are replaced by what is in FILE.\n\n--with-libmpi-name=STRING\n  Replace libmpi.* and libmpi_FOO.* (where FOO is one of the fortran\n  supporting libraries installed in lib) with libSTRING.* and\n  libSTRING_FOO.*. This is provided as a convenience mechanism for\n  third-party packagers of Open MPI that might want to rename these\n  libraries for their own purposes. This option is *not* intended for\n  typical users of Open MPI.\n\n--enable-mca-no-build=LIST\n  Comma-separated list of <type>-<component> pairs that will not be\n  built. For example, \"--enable-mca-no-build=btl-portals,oob-ud\" will\n  disable building the portals BTL and the ud OOB component.\n\nNETWORKING SUPPORT / OPTIONS\n\n--with-fca=<directory>\n  Specify the directory where the Mellanox FCA library and\n  header files are located.\n\n  FCA is the support library for Mellanox switches and HCAs.\n\n--with-hcoll=<directory>\n  Specify the directory where the Mellanox hcoll library and header\n  files are located.  This option is generally only necessary if the\n  hcoll headers and libraries are not in default compiler/linker\n  search paths.\n\n  hcoll is the support library for MPI collective operation offload on\n  Mellanox ConnectX-3 HCAs (and later).\n\n--with-knem=<directory>\n  Specify the directory where the knem libraries and header files are\n  located.  This option is generally only necessary if the knem headers\n  and libraries are not in default compiler/linker search paths.\n\n  knem is a Linux kernel module that allows direct process-to-process\n  memory copies (optionally using hardware offload), potentially\n  increasing bandwidth for large messages sent between messages on the\n  same server.  See http://runtime.bordeaux.inria.fr/knem/ for\n  details.\n\n--with-libfabric=<directory>\n  Specify the directory where the OpenFabrics Interfaces libfabric\n  library and header files are located.  This option is generally only\n  necessary if the libfabric headers and libraries are not in default\n  compiler/linker search paths.\n\n  Libfabric is the support library for OpenFabrics Interfaces-based\n  network adapters, such as Cisco usNIC, Intel True Scale PSM, Cray\n  uGNI, etc.\n\n--with-libfabric-libdir=<directory>\n  Look in directory for the libfabric libraries.  By default, Open MPI\n  will look in <libfabric directory>/lib and <libfabric\n  directory>/lib64, which covers most cases.  This option is only\n  needed for special configurations.\n\n--with-mxm=<directory>\n  Specify the directory where the Mellanox MXM library and header\n  files are located.  This option is generally only necessary if the\n  MXM headers and libraries are not in default compiler/linker search\n  paths.\n\n  MXM is the support library for Mellanox Network adapters.\n\n--with-mxm-libdir=<directory>\n  Look in directory for the MXM libraries.  By default, Open MPI will\n  look in <mxm directory>/lib and <mxm directory>/lib64, which covers\n  most cases.  This option is only needed for special configurations.\n\n--with-portals4=<directory>\n  Specify the directory where the Portals4 libraries and header files\n  are located.  This option is generally only necessary if the Portals4\n  headers and libraries are not in default compiler/linker search\n  paths.\n\n  Portals is a low-level network API for high-performance networking\n  on high-performance computing systems developed by Sandia National\n  Laboratories, Intel Corporation, and the University of New Mexico.\n  The Portals 4 Reference Implementation is a complete implementation\n  of Portals 4, with transport over InfiniBand verbs and UDP.\n\n--with-portals4-libdir=<directory>\n  Location of libraries to link with for Portals4 support.\n\n--with-portals4-max-md-size=SIZE\n--with-portals4-max-va-size=SIZE\n  Set configuration values for Portals 4\n\n--with-psm=<directory>\n  Specify the directory where the QLogic InfiniPath / Intel True Scale\n  PSM library and header files are located.  This option is generally\n  only necessary if the PSM headers and libraries are not in default\n  compiler/linker search paths.\n\n  PSM is the support library for QLogic InfiniPath and Intel TrueScale\n  network adapters.\n\n--with-psm-libdir=<directory>\n  Look in directory for the PSM libraries.  By default, Open MPI will\n  look in <psm directory>/lib and <psm directory>/lib64, which covers\n  most cases.  This option is only needed for special configurations.\n\n--with-psm2=<directory>\n  Specify the directory where the Intel Omni-Path PSM2 library and\n  header files are located.  This option is generally only necessary\n  if the PSM2 headers and libraries are not in default compiler/linker\n  search paths.\n\n  PSM is the support library for Intel Omni-Path network adapters.\n\n--with-psm2-libdir=<directory>\n  Look in directory for the PSM2 libraries.  By default, Open MPI will\n  look in <psm2 directory>/lib and <psm2 directory>/lib64, which\n  covers most cases.  This option is only needed for special\n  configurations.\n\n--with-ucx=<directory>\n  Specify the directory where the UCX libraries and header files are\n  located.  This option is generally only necessary if the UCX headers\n  and libraries are not in default compiler/linker search paths.\n\n--with-ucx-libdir=<directory>\n  Look in directory for the UCX libraries.  By default, Open MPI will\n  look in <ucx_directory>/lib and <ucx_ directory>/lib64, which covers\n  most cases.  This option is only needed for special configurations.\n\n--with-usnic\n  Abort configure if Cisco usNIC support cannot be built.\n\n--with-verbs=<directory>\n  Specify the directory where the verbs (also known as OpenFabrics\n  verbs, or Linux verbs, and previously known as OpenIB) libraries and\n  header files are located.  This option is generally only necessary\n  if the verbs headers and libraries are not in default\n  compiler/linker search paths.\n\n  The Verbs library usually implies operating system bypass networks,\n  such as InfiniBand, usNIC, iWARP, and RoCE (aka \"IBoIP\").\n\n--with-verbs-libdir=<directory>\n  Look in directory for the verbs libraries.  By default, Open MPI\n  will look in <verbs_directory>/lib and <verbs_ directory>/lib64,\n  which covers most cases.  This option is only needed for special\n  configurations.\n\n--with-verbs-usnic\n  Note that this option is no longer necessary in recent Linux distro\n  versions.  If your Linux distro uses the \"rdma-core\" package (instead\n  of a standalone \"libibverbs\" package), not only do you not need this\n  option, you shouldn't use it, either.  More below.\n\n  This option will activate support in Open MPI for disabling a\n  dire-sounding warning message from libibverbs that Cisco usNIC\n  devices are not supported (because Cisco usNIC devices are supported\n  through libfabric, not libibverbs).  This libibverbs warning can\n  also be suppressed by installing the \"no op\" libusnic_verbs plugin\n  for libibverbs (see https://github.com/cisco/libusnic_verbs, or\n  download binaries from cisco.com).\n\n  This option is disabled by default for two reasons:\n\n  1. It causes libopen-pal.so to depend on libibverbs.so, which is\n     undesirable to many downstream packagers.\n  2. As mentioned above, recent versions of the libibverbs library\n     (included in the \"rdma-core\" package) do not have the bug that\n     will emit dire-sounding warnings about usnic devices.  Indeed,\n     the --with-verbs-usnic option will enable code in Open MPI that\n     is actually incompatible with rdma-core (i.e., cause Open MPI to\n     fail to compile).\n\n   If you enable --with-verbs-usnic and your system uses the rdma-core\n   package, configure will safely abort with a helpful message telling\n   you that you should not use --with-verbs-usnic.\n\n\nRUN-TIME SYSTEM SUPPORT\n\n--enable-mpirun-prefix-by-default\n  This option forces the \"mpirun\" command to always behave as if\n  \"--prefix $prefix\" was present on the command line (where $prefix is\n  the value given to the --prefix option to configure).  This prevents\n  most rsh/ssh-based users from needing to modify their shell startup\n  files to set the PATH and/or LD_LIBRARY_PATH for Open MPI on remote\n  nodes.  Note, however, that such users may still desire to set PATH\n  -- perhaps even in their shell startup files -- so that executables\n  such as mpicc and mpirun can be found without needing to type long\n  path names.  --enable-orterun-prefix-by-default is a synonym for\n  this option.\n\n--enable-orte-static-ports\n   Enable orte static ports for tcp oob (default: enabled).\n\n--with-alps\n  Force the building of for the Cray Alps run-time environment.  If\n  Alps support cannot be found, configure will abort.\n\n--with-lsf=<directory>\n  Specify the directory where the LSF libraries and header files are\n  located.  This option is generally only necessary if the LSF headers\n  and libraries are not in default compiler/linker search paths.\n\n  LSF is a resource manager system, frequently used as a batch\n  scheduler in HPC systems.\n\n--with-lsf-libdir=<directory>\n  Look in directory for the LSF libraries.  By default, Open MPI will\n  look in <lsf directory>/lib and <lsf directory>/lib64, which covers\n  most cases.  This option is only needed for special configurations.\n\n--with-pmi\n  Build PMI support (by default on non-Cray XE/XC systems, it is not\n  built).  On Cray XE/XC systems, the location of pmi is detected\n  automatically as part of the configure process.  For non-Cray\n  systems, if the pmi2.h header is found in addition to pmi.h, then\n  support for PMI2 will be built.\n\n--with-slurm\n  Force the building of SLURM scheduler support.\n\n--with-sge\n  Specify to build support for the Oracle Grid Engine (OGE) resource\n  manager and/or the Open Grid Engine.  OGE support is disabled by\n  default; this option must be specified to build OMPI's OGE support.\n\n  The Oracle Grid Engine (OGE) and open Grid Engine packages are\n  resource manager systems, frequently used as a batch scheduler in\n  HPC systems.\n\n--with-tm=<directory>\n  Specify the directory where the TM libraries and header files are\n  located.  This option is generally only necessary if the TM headers\n  and libraries are not in default compiler/linker search paths.\n\n  TM is the support library for the Torque and PBS Pro resource\n  manager systems, both of which are frequently used as a batch\n  scheduler in HPC systems.\n\nMISCELLANEOUS SUPPORT LIBRARIES\n\n--with-blcr=<directory>\n  Specify the directory where the Berkeley Labs Checkpoint / Restart\n  (BLCR) libraries and header files are located.  This option is\n  generally only necessary if the BLCR headers and libraries are not\n  in default compiler/linker search paths.\n\n  This option is only meaningful if the --with-ft option is also used\n  to active Open MPI's fault tolerance behavior.\n\n--with-blcr-libdir=<directory>\n  Look in directory for the BLCR libraries.  By default, Open MPI will\n  look in <blcr directory>/lib and <blcr directory>/lib64, which\n  covers most cases.  This option is only needed for special\n  configurations.\n\n--with-dmtcp=<directory>\n  Specify the directory where the Distributed MultiThreaded\n  Checkpointing (DMTCP) libraries and header files are located.  This\n  option is generally only necessary if the DMTCP headers and\n  libraries are not in default compiler/linker search paths.\n\n  This option is only meaningful if the --with-ft option is also used\n  to active Open MPI's fault tolerance behavior.\n\n--with-dmtcp-libdir=<directory>\n  Look in directory for the DMTCP libraries.  By default, Open MPI\n  will look in <dmtcp directory>/lib and <dmtcp directory>/lib64,\n  which covers most cases.  This option is only needed for special\n  configurations.\n\n--with-libevent(=value)\n  This option specifies where to find the libevent support headers and\n  library.  The following VALUEs are permitted:\n\n    internal:    Use Open MPI's internal copy of libevent.\n    external:    Use an external libevent installation (rely on default\n                 compiler and linker paths to find it)\n    <no value>:  Same as \"internal\".\n    <directory>: Specify the location of a specific libevent\n                 installation to use\n\n  By default (or if --with-libevent is specified with no VALUE), Open\n  MPI will build and use the copy of libevent that it has in its\n  source tree.  However, if the VALUE is \"external\", Open MPI will\n  look for the relevant libevent header file and library in default\n  compiler / linker locations.  Or, VALUE can be a directory tree\n  where the libevent header file and library can be found.  This\n  option allows operating systems to include Open MPI and use their\n  default libevent installation instead of Open MPI's bundled libevent.\n\n  libevent is a support library that provides event-based processing,\n  timers, and signal handlers.  Open MPI requires libevent to build;\n  passing --without-libevent will cause configure to abort.\n\n--with-libevent-libdir=<directory>\n  Look in directory for the libevent libraries.  This option is only\n  usable when building Open MPI against an external libevent\n  installation.  Just like other --with-FOO-libdir configure options,\n  this option is only needed for special configurations.\n\n--with-hwloc(=value)\n  Build hwloc support (default: enabled).  This option specifies where\n  to find the hwloc support headers and library.  The following values\n  are permitted:\n\n    internal:    Use Open MPI's internal copy of hwloc.\n    external:    Use an external hwloc installation (rely on default\n                 compiler and linker paths to find it)\n    <no value>:  Same as \"internal\".\n    <directory>: Specify the location of a specific hwloc\n                 installation to use\n\n  By default (or if --with-hwloc is specified with no VALUE), Open MPI\n  will build and use the copy of hwloc that it has in its source tree.\n  However, if the VALUE is \"external\", Open MPI will look for the\n  relevant hwloc header files and library in default compiler / linker\n  locations.  Or, VALUE can be a directory tree where the hwloc header\n  file and library can be found.  This option allows operating systems\n  to include Open MPI and use their default hwloc installation instead\n  of Open MPI's bundled hwloc.\n\n  hwloc is a support library that provides processor and memory\n  affinity information for NUMA platforms.\n\n--with-hwloc-libdir=<directory>\n  Look in directory for the hwloc libraries.  This option is only\n  usable when building Open MPI against an external hwloc\n  installation.  Just like other --with-FOO-libdir configure options,\n  this option is only needed for special configurations.\n\n--disable-hwloc-pci\n  Disable building hwloc's PCI device-sensing capabilities.  On some\n  platforms (e.g., SusE 10 SP1, x86-64), the libpci support library is\n  broken.  Open MPI's configure script should usually detect when\n  libpci is not usable due to such brokenness and turn off PCI\n  support, but there may be cases when configure mistakenly enables\n  PCI support in the presence of a broken libpci.  These cases may\n  result in \"make\" failing with warnings about relocation symbols in\n  libpci.  The --disable-hwloc-pci switch can be used to force Open\n  MPI to not build hwloc's PCI device-sensing capabilities in these\n  cases.\n\n  Similarly, if Open MPI incorrectly decides that libpci is broken,\n  you can force Open MPI to build hwloc's PCI device-sensing\n  capabilities by using --enable-hwloc-pci.\n\n  hwloc can discover PCI devices and locality, which can be useful for\n  Open MPI in assigning message passing resources to MPI processes.\n\n--with-libltdl=<directory>\n  Specify the directory where the GNU Libtool libltdl libraries and\n  header files are located.  This option is generally only necessary\n  if the libltdl headers and libraries are not in default\n  compiler/linker search paths.\n\n  Note that this option is ignored if --disable-dlopen is specified.\n\n--disable-libompitrace\n  Disable building the simple \"libompitrace\" library (see note above\n  about libompitrace)\n\n--with-valgrind(=<directory>)\n  Directory where the valgrind software is installed.  If Open MPI\n  finds Valgrind's header files, it will include additional support\n  for Valgrind's memory-checking debugger.\n\n  Specifically, it will eliminate a lot of false positives from\n  running Valgrind on MPI applications.  There is a minor performance\n  penalty for enabling this option.\n\nMPI FUNCTIONALITY\n\n--with-mpi-param-check(=value)\n  Whether or not to check MPI function parameters for errors at\n  runtime.  The following values are permitted:\n\n    always:  MPI function parameters are always checked for errors\n    never:   MPI function parameters are never checked for errors\n    runtime: Whether MPI function parameters are checked depends on\n             the value of the MCA parameter mpi_param_check (default:\n             yes).\n    yes:     Synonym for \"always\" (same as --with-mpi-param-check).\n    no:      Synonym for \"none\" (same as --without-mpi-param-check).\n\n  If --with-mpi-param is not specified, \"runtime\" is the default.\n\n--disable-mpi-thread-multiple\n  Disable the MPI thread level MPI_THREAD_MULTIPLE (it is enabled by\n  default).\n\n--enable-mpi-cxx\n  Enable building the C++ MPI bindings (default: disabled).\n\n  The MPI C++ bindings were deprecated in MPI-2.2, and removed from\n  the MPI standard in MPI-3.0.\n\n--enable-mpi-java\n  Enable building of an EXPERIMENTAL Java MPI interface (disabled by\n  default).  You may also need to specify --with-jdk-dir,\n  --with-jdk-bindir, and/or --with-jdk-headers.  See README.JAVA.txt\n  for details.\n\n  Note that this Java interface is INCOMPLETE (meaning: it does not\n  support all MPI functionality) and LIKELY TO CHANGE.  The Open MPI\n  developers would very much like to hear your feedback about this\n  interface.  See README.JAVA.txt for more details.\n\n--enable-mpi-fortran(=value)\n  By default, Open MPI will attempt to build all 3 Fortran bindings:\n  mpif.h, the \"mpi\" module, and the \"mpi_f08\" module.  The following\n  values are permitted:\n\n    all:        Synonym for \"yes\".\n    yes:        Attempt to build all 3 Fortran bindings; skip\n                any binding that cannot be built (same as\n                --enable-mpi-fortran).\n    mpifh:      Build mpif.h support.\n    usempi:     Build mpif.h and \"mpi\" module support.\n    usempif08:  Build mpif.h, \"mpi\" module, and \"mpi_f08\"\n                module support.\n    none:       Synonym for \"no\".\n    no:         Do not build any MPI Fortran support (same as\n                --disable-mpi-fortran).  This is mutually exclusive\n                with building the OpenSHMEM Fortran interface.\n\n--enable-mpi-ext(=<list>)\n  Enable Open MPI's non-portable API extensions.  If no <list> is\n  specified, all of the extensions are enabled.\n\n  See \"Open MPI API Extensions\", below, for more details.\n\n--disable-mpi-io\n  Disable built-in support for MPI-2 I/O, likely because an\n  externally-provided MPI I/O package will be used. Default is to use\n  the internal framework system that uses the ompio component and a\n  specially modified version of ROMIO that fits inside the romio\n  component\n\n--disable-io-romio\n  Disable the ROMIO MPI-IO component\n\n--with-io-romio-flags=flags\n  Pass flags to the ROMIO distribution configuration script.  This\n  option is usually only necessary to pass\n  parallel-filesystem-specific preprocessor/compiler/linker flags back\n  to the ROMIO system.\n\n--disable-io-ompio\n  Disable the ompio MPI-IO component\n\n--enable-sparse-groups\n  Enable the usage of sparse groups. This would save memory\n  significantly especially if you are creating large\n  communicators. (Disabled by default)\n\nOPENSHMEM FUNCTIONALITY\n\n--disable-oshmem\n  Disable building the OpenSHMEM implementation (by default, it is\n  enabled).\n\n--disable-oshmem-fortran\n  Disable building only the Fortran OpenSHMEM bindings. Please see\n  the \"Compiler Notes\" section herein which contains further\n  details on known issues with various Fortran compilers.\n\nMISCELLANEOUS FUNCTIONALITY\n\n--without-memory-manager\n  Disable building Open MPI's memory manager.  Open MPI's memory\n  manager is usually built on Linux based platforms, and is generally\n  only used for optimizations with some OpenFabrics-based networks (it\n  is not *necessary* for OpenFabrics networks, but some performance\n  loss may be observed without it).\n\n  However, it may be necessary to disable the memory manager in order\n  to build Open MPI statically.\n\n--with-ft=TYPE\n  Specify the type of fault tolerance to enable.  Options: LAM\n  (LAM/MPI-like), cr (Checkpoint/Restart).  Fault tolerance support is\n  disabled unless this option is specified.\n\n--enable-peruse\n  Enable the PERUSE MPI data analysis interface.\n\n--enable-heterogeneous\n  Enable support for running on heterogeneous clusters (e.g., machines\n  with different endian representations).  Heterogeneous support is\n  disabled by default because it imposes a minor performance penalty.\n\n  *** THIS FUNCTIONALITY IS CURRENTLY BROKEN - DO NOT USE ***\n\n--with-wrapper-cflags=<cflags>\n--with-wrapper-cxxflags=<cxxflags>\n--with-wrapper-fflags=<fflags>\n--with-wrapper-fcflags=<fcflags>\n--with-wrapper-ldflags=<ldflags>\n--with-wrapper-libs=<libs>\n  Add the specified flags to the default flags that used are in Open\n  MPI's \"wrapper\" compilers (e.g., mpicc -- see below for more\n  information about Open MPI's wrapper compilers).  By default, Open\n  MPI's wrapper compilers use the same compilers used to build Open\n  MPI and specify a minimum set of additional flags that are necessary\n  to compile/link MPI applications.  These configure options give\n  system administrators the ability to embed additional flags in\n  OMPI's wrapper compilers (which is a local policy decision).  The\n  meanings of the different flags are:\n\n  <cflags>:   Flags passed by the mpicc wrapper to the C compiler\n  <cxxflags>: Flags passed by the mpic++ wrapper to the C++ compiler\n  <fcflags>:  Flags passed by the mpifort wrapper to the Fortran compiler\n  <ldflags>:  Flags passed by all the wrappers to the linker\n  <libs>:     Flags passed by all the wrappers to the linker\n\n  There are other ways to configure Open MPI's wrapper compiler\n  behavior; see the Open MPI FAQ for more information.\n\nThere are many other options available -- see \"./configure --help\".\n\nChanging the compilers that Open MPI uses to build itself uses the\nstandard Autoconf mechanism of setting special environment variables\neither before invoking configure or on the configure command line.\nThe following environment variables are recognized by configure:\n\nCC          - C compiler to use\nCFLAGS      - Compile flags to pass to the C compiler\nCPPFLAGS    - Preprocessor flags to pass to the C compiler\n\nCXX         - C++ compiler to use\nCXXFLAGS    - Compile flags to pass to the C++ compiler\nCXXCPPFLAGS - Preprocessor flags to pass to the C++ compiler\n\nFC          - Fortran compiler to use\nFCFLAGS     - Compile flags to pass to the Fortran compiler\n\nLDFLAGS     - Linker flags to pass to all compilers\nLIBS        - Libraries to pass to all compilers (it is rarely\n              necessary for users to need to specify additional LIBS)\n\nPKG_CONFIG  - Path to the pkg-config utility\n\nFor example:\n\n  shell$ ./configure CC=mycc CXX=myc++ FC=myfortran ...\n\n*** NOTE: We generally suggest using the above command line form for\n    setting different compilers (vs. setting environment variables and\n    then invoking \"./configure\").  The above form will save all\n    variables and values in the config.log file, which makes\n    post-mortem analysis easier if problems occur.\n\nNote that if you intend to compile Open MPI with a \"make\" other than\nthe default one in your PATH, then you must either set the $MAKE\nenvironment variable before invoking Open MPI's configure script, or\npass \"MAKE=your_make_prog\" to configure.  For example:\n\n  shell$ ./configure MAKE=/path/to/my/make ...\n\nThis could be the case, for instance, if you have a shell alias for\n\"make\", or you always type \"gmake\" out of habit.  Failure to tell\nconfigure which non-default \"make\" you will use to compile Open MPI\ncan result in undefined behavior (meaning: don't do that).\n\nNote that you may also want to ensure that the value of\nLD_LIBRARY_PATH is set appropriately (or not at all) for your build\n(or whatever environment variable is relevant for your operating\nsystem).  For example, some users have been tripped up by setting to\nuse a non-default Fortran compiler via FC, but then failing to set\nLD_LIBRARY_PATH to include the directory containing that non-default\nFortran compiler's support libraries.  This causes Open MPI's\nconfigure script to fail when it tries to compile / link / run simple\nFortran programs.\n\nIt is required that the compilers specified be compile and link\ncompatible, meaning that object files created by one compiler must be\nable to be linked with object files from the other compilers and\nproduce correctly functioning executables.\n\nOpen MPI supports all the \"make\" targets that are provided by GNU\nAutomake, such as:\n\nall       - build the entire Open MPI package\ninstall   - install Open MPI\nuninstall - remove all traces of Open MPI from the $prefix\nclean     - clean out the build tree\n\nOnce Open MPI has been built and installed, it is safe to run \"make\nclean\" and/or remove the entire build tree.\n\nVPATH and parallel builds are fully supported.\n\nGenerally speaking, the only thing that users need to do to use Open\nMPI is ensure that <prefix>/bin is in their PATH and <prefix>/lib is\nin their LD_LIBRARY_PATH.  Users may need to ensure to set the PATH\nand LD_LIBRARY_PATH in their shell setup files (e.g., .bashrc, .cshrc)\nso that non-interactive rsh/ssh-based logins will be able to find the\nOpen MPI executables.\n\n===========================================================================\n\nOpen MPI Version Numbers and Binary Compatibility\n-------------------------------------------------\n\nOpen MPI has two sets of version numbers that are likely of interest\nto end users / system administrator:\n\n  * Software version number\n  * Shared library version numbers\n\nBoth are predicated on Open MPI's definition of \"backwards\ncompatibility.\"\n\nNOTE: The version numbering conventions were changed with the release\n      of v1.10.0.  Most notably, Open MPI no longer uses an \"odd/even\"\n      release schedule to indicate feature development vs. stable\n      releases.  See the README in releases prior to v1.10.0 for more\n      information (e.g.,\n      https://github.com/open-mpi/ompi/blob/v1.8/README#L1392-L1475).\n\nBackwards Compatibility\n-----------------------\n\nOpen MPI version Y is backwards compatible with Open MPI version X\n(where Y>X) if users can:\n\n  * Compile an MPI/OpenSHMEM application with version X, mpirun/oshrun\n    it with version Y, and get the same user-observable behavior.\n  * Invoke ompi_info with the same CLI options in versions X and Y and\n    get the same user-observable behavior.\n\nNote that this definition encompasses several things:\n\n  * Application Binary Interface (ABI)\n  * MPI / OpenSHMEM run time system\n  * mpirun / oshrun command line options\n  * MCA parameter names / values / meanings\n\nHowever, this definition only applies when the same version of Open\nMPI is used with all instances of the runtime and MPI / OpenSHMEM\nprocesses in a single MPI job.  If the versions are not exactly the\nsame everywhere, Open MPI is not guaranteed to work properly in any\nscenario.\n\nBackwards compatibility tends to work best when user applications are\ndynamically linked to one version of the Open MPI / OSHMEM libraries,\nand can be updated at run time to link to a new version of the Open\nMPI / OSHMEM libraries.\n\nFor example, if an MPI / OSHMEM application links statically against\nthe libraries from Open MPI vX, then attempting to launch that\napplication with mpirun / oshrun from Open MPI vY is not guaranteed to\nwork (because it is mixing vX and vY of Open MPI in a single job).\n\nSimilarly, if using a container technology that internally bundles all\nthe libraries from Open MPI vX, attempting to launch that container\nwith mpirun / oshrun from Open MPI vY is not guaranteed to work.\n\nSoftware Version Number\n-----------------------\n\nOfficial Open MPI releases use the common \"A.B.C\" version identifier\nformat.  Each of the three numbers has a specific meaning:\n\n  * Major: The major number is the first integer in the version string\n    Changes in the major number typically indicate a significant\n    change in the code base and/or end-user functionality, and also\n    indicate a break from backwards compatibility.  Specifically: Open\n    MPI releases with different major version numbers are not\n    backwards compatibale with each other.\n\n    CAVEAT: This rule does not extend to versions prior to v1.10.0.\n            Specifically: v1.10.x is not guaranteed to be backwards\n            compatible with other v1.x releases.\n\n  * Minor: The minor number is the second integer in the version\n    string.  Changes in the minor number indicate a user-observable\n    change in the code base and/or end-user functionality.  Backwards\n    compatibility will still be preserved with prior releases that\n    have the same major version number (e.g., v2.5.3 is backwards\n    compatible with v2.3.1).\n\n  * Release: The release number is the third integer in the version\n    string.  Changes in the release number typically indicate a bug\n    fix in the code base and/or end-user functionality.  For example,\n    if there is a release that only contains bug fixes and no other\n    user-observable changes or new features, only the third integer\n    will be increased (e.g., from v4.3.0 to v4.3.1).\n\nThe \"A.B.C\" version number may optionally be followed by a Quantifier:\n\n  * Quantifier: Open MPI version numbers sometimes have an arbitrary\n    string affixed to the end of the version number. Common strings\n    include:\n\n    o aX: Indicates an alpha release. X is an integer indicating the\n      number of the alpha release (e.g., v1.10.3a5 indicates the 5th\n      alpha release of version 1.10.3).\n    o bX: Indicates a beta release. X is an integer indicating the\n      number of the beta release (e.g., v1.10.3b3 indicates the 3rd\n      beta release of version 1.10.3).\n    o rcX: Indicates a release candidate. X is an integer indicating\n      the number of the release candidate (e.g., v1.10.3rc4 indicates\n      the 4th release candidate of version 1.10.3).\n\nNightly development snapshot tarballs use a different version number\nscheme; they contain three distinct values:\n\n   * The git branch name from which the tarball was created.\n   * The date/timestamp, in YYYYMMDDHHMM format.\n   * The hash of the git commit from which the tarball was created.\n\nFor example, a snapshot tarball filename of\n\"openmpi-v2.x-201703070235-e4798fb.tar.gz\" indicates that this tarball\nwas created from the v2.x branch, on March 7, 2017, at 2:35am GMT,\nfrom git hash e4798fb.\n\nShared Library Version Number\n-----------------------------\n\nThe GNU Libtool official documentation details how the versioning\nscheme works.  The quick version is that the shared library versions\nare a triple of integers: (current,revision,age), or \"c:r:a\".  This\ntriple is not related to the Open MPI software version number.  There\nare six simple rules for updating the values (taken almost verbatim\nfrom the Libtool docs):\n\n 1. Start with version information of \"0:0:0\" for each shared library.\n\n 2. Update the version information only immediately before a public\n    release of your software. More frequent updates are unnecessary,\n    and only guarantee that the current interface number gets larger\n    faster.\n\n 3. If the library source code has changed at all since the last\n    update, then increment revision (\"c:r:a\" becomes \"c:r+1:a\").\n\n 4. If any interfaces have been added, removed, or changed since the\n    last update, increment current, and set revision to 0.\n\n 5. If any interfaces have been added since the last public release,\n    then increment age.\n\n 6. If any interfaces have been removed since the last public release,\n    then set age to 0.\n\nHere's how we apply those rules specifically to Open MPI:\n\n 1. The above rules do not apply to MCA components (a.k.a. \"plugins\");\n    MCA component .so versions stay unspecified.\n\n 2. The above rules apply exactly as written to the following\n    libraries starting with Open MPI version v1.5 (prior to v1.5,\n    libopen-pal and libopen-rte were still at 0:0:0 for reasons\n    discussed in bug ticket #2092\n    https://svn.open-mpi.org/trac/ompi/ticket/2092):\n\n    * libopen-rte\n    * libopen-pal\n    * libmca_common_*\n\n 3. The following libraries use a slightly modified version of the\n    above rules: rules 4, 5, and 6 only apply to the official MPI and\n    OpenSHMEM interfaces (functions, global variables).  The rationale\n    for this decision is that the vast majority of our users only care\n    about the official/public MPI/OpenSHMEM interfaces; we therefore\n    want the .so version number to reflect only changes to the\n    official MPI/OpenSHMEM APIs.  Put simply: non-MPI/OpenSHMEM API /\n    internal changes to the MPI-application-facing libraries are\n    irrelevant to pure MPI/OpenSHMEM applications.\n\n    * libmpi\n    * libmpi_mpifh\n    * libmpi_usempi_tkr\n    * libmpi_usempi_ignore_tkr\n    * libmpi_usempif08\n    * libmpi_cxx\n    * libmpi_java\n    * liboshmem\n\n===========================================================================\n\nChecking Your Open MPI Installation\n-----------------------------------\n\nThe \"ompi_info\" command can be used to check the status of your Open\nMPI installation (located in <prefix>/bin/ompi_info).  Running it with\nno arguments provides a summary of information about your Open MPI\ninstallation.\n\nNote that the ompi_info command is extremely helpful in determining\nwhich components are installed as well as listing all the run-time\nsettable parameters that are available in each component (as well as\ntheir default values).\n\nThe following options may be helpful:\n\n--all       Show a *lot* of information about your Open MPI\n            installation.\n--parsable  Display all the information in an easily\n            grep/cut/awk/sed-able format.\n--param <framework> <component>\n            A <framework> of \"all\" and a <component> of \"all\" will\n            show all parameters to all components.  Otherwise, the\n            parameters of all the components in a specific framework,\n            or just the parameters of a specific component can be\n            displayed by using an appropriate <framework> and/or\n            <component> name.\n--level <level>\n            By default, ompi_info only shows \"Level 1\" MCA parameters\n            -- parameters that can affect whether MPI processes can\n            run successfully or not (e.g., determining which network\n            interfaces to use).  The --level option will display all\n            MCA parameters from level 1 to <level> (the max <level>\n            value is 9).  Use \"ompi_info --param <framework>\n            <component> --level 9\" to see *all* MCA parameters for a\n            given component.  See \"The Modular Component Architecture\n            (MCA)\" section, below, for a fuller explanation.\n\nChanging the values of these parameters is explained in the \"The\nModular Component Architecture (MCA)\" section, below.\n\nWhen verifying a new Open MPI installation, we recommend running six\ntests:\n\n1. Use \"mpirun\" to launch a non-MPI program (e.g., hostname or uptime)\n   across multiple nodes.\n\n2. Use \"mpirun\" to launch a trivial MPI program that does no MPI\n   communication (e.g., the hello_c program in the examples/ directory\n   in the Open MPI distribution).\n\n3. Use \"mpirun\" to launch a trivial MPI program that sends and\n   receives a few MPI messages (e.g., the ring_c program in the\n   examples/ directory in the Open MPI distribution).\n\n4. Use \"oshrun\" to launch a non-OpenSHMEM program across multiple\n   nodes.\n\n5. Use \"oshrun\" to launch a trivial MPI program that does no OpenSHMEM\n   communication (e.g., hello_shmem.c program in the examples/\n   directory in the Open MPI distribution.)\n\n6. Use \"oshrun\" to launch a trivial OpenSHMEM program that puts and\n   gets a few messages. (e.g., the ring_shmem.c in the examples/\n   directory in the Open MPI distribution.)\n\nIf you can run all six of these tests successfully, that is a good\nindication that Open MPI built and installed properly.\n\n===========================================================================\n\nOpen MPI API Extensions\n-----------------------\n\nOpen MPI contains a framework for extending the MPI API that is\navailable to applications.  Each extension is usually a standalone set\nof functionality that is distinct from other extensions (similar to\nhow Open MPI's plugins are usually unrelated to each other).  These\nextensions provide new functions and/or constants that are available\nto MPI applications.\n\nWARNING: These extensions are neither standard nor portable to other\nMPI implementations!\n\nCompiling the extensions\n------------------------\n\nOpen MPI extensions are all enabled by default; they can be disabled\nvia the --disable-mpi-ext command line switch.\n\nSince extensions are meant to be used by advanced users only, this\nfile does not document which extensions are available or what they\ndo.  Look in the ompi/mpiext/ directory to see the extensions; each\nsubdirectory of that directory contains an extension.  Each has a\nREADME file that describes what it does.\n\nUsing the extensions\n--------------------\n\nTo reinforce the fact that these extensions are non-standard, you must\ninclude a separate header file after <mpi.h> to obtain the function\nprototypes, constant declarations, etc.  For example:\n\n-----\n#include <mpi.h>\n#if defined(OPEN_MPI) && OPEN_MPI\n#include <mpi-ext.h>\n#endif\n\nint main() {\n    MPI_Init(NULL, NULL);\n\n#if defined(OPEN_MPI) && OPEN_MPI\n    {\n        char ompi_bound[OMPI_AFFINITY_STRING_MAX];\n        char current_binding[OMPI_AFFINITY_STRING_MAX];\n        char exists[OMPI_AFFINITY_STRING_MAX];\n        OMPI_Affinity_str(OMPI_AFFINITY_LAYOUT_FMT, ompi_bound,\n                          current_bindings, exists);\n    }\n#endif\n    MPI_Finalize();\n    return 0;\n}\n-----\n\nNotice that the Open MPI-specific code is surrounded by the #if\nstatement to ensure that it is only ever compiled by Open MPI.\n\nThe Open MPI wrapper compilers (mpicc and friends) should\nautomatically insert all relevant compiler and linker flags necessary\nto use the extensions.  No special flags or steps should be necessary\ncompared to \"normal\" MPI applications.\n\n===========================================================================\n\nCompiling Open MPI Applications\n-------------------------------\n\nOpen MPI provides \"wrapper\" compilers that should be used for\ncompiling MPI and OpenSHMEM applications:\n\nC:          mpicc, oshcc\nC++:        mpiCC, oshCC (or mpic++ if your filesystem is case-insensitive)\nFortran:    mpifort, oshfort\n\nFor example:\n\n  shell$ mpicc hello_world_mpi.c -o hello_world_mpi -g\n  shell$\n\nFor OpenSHMEM applications:\n\n  shell$ oshcc hello_shmem.c -o hello_shmem -g\n  shell$\n\nAll the wrapper compilers do is add a variety of compiler and linker\nflags to the command line and then invoke a back-end compiler.  To be\nspecific: the wrapper compilers do not parse source code at all; they\nare solely command-line manipulators, and have nothing to do with the\nactual compilation or linking of programs.  The end result is an MPI\nexecutable that is properly linked to all the relevant libraries.\n\nCustomizing the behavior of the wrapper compilers is possible (e.g.,\nchanging the compiler [not recommended] or specifying additional\ncompiler/linker flags); see the Open MPI FAQ for more information.\n\nAlternatively, Open MPI also installs pkg-config(1) configuration\nfiles under $libdir/pkgconfig.  If pkg-config is configured to find\nthese files, then compiling / linking Open MPI programs can be\nperformed like this:\n\n  shell$ gcc hello_world_mpi.c -o hello_world_mpi -g \\\n              `pkg-config ompi-c --cflags --libs`\n  shell$\n\nOpen MPI supplies multiple pkg-config(1) configuration files; one for\neach different wrapper compiler (language):\n\n------------------------------------------------------------------------\nompi       Synonym for \"ompi-c\"; Open MPI applications using the C\n           MPI bindings\nompi-c     Open MPI applications using the C MPI bindings\nompi-cxx   Open MPI applications using the C or C++ MPI bindings\nompi-fort  Open MPI applications using the Fortran MPI bindings\n------------------------------------------------------------------------\n\nThe following pkg-config(1) configuration files *may* be installed,\ndepending on which command line options were specified to Open MPI's\nconfigure script.  They are not necessary for MPI applications, but\nmay be used by applications that use Open MPI's lower layer support\nlibraries.\n\norte:       Open MPI Run-Time Environment applications\nopal:       Open Portable Access Layer applications\n\n===========================================================================\n\nRunning Open MPI Applications\n-----------------------------\n\nOpen MPI supports both mpirun and mpiexec (they are exactly\nequivalent) to launch MPI applications.  For example:\n\n  shell$ mpirun -np 2 hello_world_mpi\n  or\n  shell$ mpiexec -np 1 hello_world_mpi : -np 1 hello_world_mpi\n\nare equivalent.  Some of mpiexec's switches (such as -host and -arch)\nare not yet functional, although they will not error if you try to use\nthem.\n\nThe rsh launcher (which defaults to using ssh) accepts a -hostfile\nparameter (the option \"-machinefile\" is equivalent); you can specify a\n-hostfile parameter indicating an standard mpirun-style hostfile (one\nhostname per line):\n\n  shell$ mpirun -hostfile my_hostfile -np 2 hello_world_mpi\n\nIf you intend to run more than one process on a node, the hostfile can\nuse the \"slots\" attribute.  If \"slots\" is not specified, a count of 1\nis assumed.  For example, using the following hostfile:\n\n---------------------------------------------------------------------------\nnode1.example.com\nnode2.example.com\nnode3.example.com slots=2\nnode4.example.com slots=4\n---------------------------------------------------------------------------\n\n  shell$ mpirun -hostfile my_hostfile -np 8 hello_world_mpi\n\nwill launch MPI_COMM_WORLD rank 0 on node1, rank 1 on node2, ranks 2\nand 3 on node3, and ranks 4 through 7 on node4.\n\nOther starters, such as the resource manager / batch scheduling\nenvironments, do not require hostfiles (and will ignore the hostfile\nif it is supplied).  They will also launch as many processes as slots\nhave been allocated by the scheduler if no \"-np\" argument has been\nprovided.  For example, running a SLURM job with 8 processors:\n\n  shell$ salloc -n 8 mpirun a.out\n\nThe above command will reserve 8 processors and run 1 copy of mpirun,\nwhich will, in turn, launch 8 copies of a.out in a single\nMPI_COMM_WORLD on the processors that were allocated by SLURM.\n\nNote that the values of component parameters can be changed on the\nmpirun / mpiexec command line.  This is explained in the section\nbelow, \"The Modular Component Architecture (MCA)\".\n\nOpen MPI supports oshrun to launch OpenSHMEM applications. For\nexample:\n\n   shell$ oshrun -np 2 hello_world_oshmem\n\nOpenSHMEM applications may also be launched directly by resource\nmanagers such as SLURM. For example, when OMPI is configured\n--with-pmi and --with-slurm, one may launch OpenSHMEM applications via\nsrun:\n\n   shell$ srun -N 2 hello_world_oshmem\n\n===========================================================================\n\nThe Modular Component Architecture (MCA)\n\nThe MCA is the backbone of Open MPI -- most services and functionality\nare implemented through MCA components.  Here is a list of all the\ncomponent frameworks in Open MPI:\n\n---------------------------------------------------------------------------\n\nMPI component frameworks:\n-------------------------\n\nbml       - BTL management layer\ncoll      - MPI collective algorithms\nfbtl      - file byte transfer layer: abstraction for individual\n            read/write operations for OMPIO\nfcoll     - collective read and write operations for MPI I/O\nfs        - file system functions for MPI I/O\nio        - MPI I/O\nmtl       - Matching transport layer, used for MPI point-to-point\n            messages on some types of networks\nop        - Back end computations for intrinsic MPI_Op operators\nosc       - MPI one-sided communications\npml       - MPI point-to-point management layer\nrte       - Run-time environment operations\nsharedfp  - shared file pointer operations for MPI I/O\ntopo      - MPI topology routines\nvprotocol - Protocols for the \"v\" PML\n\nOpenSHMEM component frameworks:\n-------------------------\n\natomic    - OpenSHMEM atomic operations\nmemheap   - OpenSHMEM memory allocators that support the\n            PGAS memory model\nscoll     - OpenSHMEM collective operations\nspml      - OpenSHMEM \"pml-like\" layer: supports one-sided,\n            point-to-point operations\nsshmem    - OpenSHMEM shared memory backing facility\n\n\nBack-end run-time environment (RTE) component frameworks:\n---------------------------------------------------------\n\ndfs       - Distributed file system\nerrmgr    - RTE error manager\ness       - RTE environment-specific services\nfilem     - Remote file management\ngrpcomm   - RTE group communications\niof       - I/O forwarding\nnotifier  - System-level notification support\nodls      - OpenRTE daemon local launch subsystem\noob       - Out of band messaging\nplm       - Process lifecycle management\nras       - Resource allocation system\nrmaps     - Resource mapping system\nrml       - RTE message layer\nrouted    - Routing table for the RML\nrtc       - Run-time control framework\nschizo    - OpenRTE personality framework\nstate     - RTE state machine\n\nMiscellaneous frameworks:\n-------------------------\n\nallocator   - Memory allocator\nbacktrace   - Debugging call stack backtrace support\nbtl         - Point-to-point Byte Transfer Layer\ndl          - Dynamic loading library interface\nevent       - Event library (libevent) versioning support\nhwloc       - Hardware locality (hwloc) versioning support\nif          - OS IP interface support\ninstalldirs - Installation directory relocation services\nmemchecker  - Run-time memory checking\nmemcpy      - Memory copy support\nmemory      - Memory management hooks\nmpool       - Memory pooling\npatcher     - Symbol patcher hooks\npmix        - Process management interface (exascale)\npstat       - Process status\nrcache      - Memory registration cache\nsec         - Security framework\nshmem       - Shared memory support (NOT related to OpenSHMEM)\ntimer       - High-resolution timers\n\n---------------------------------------------------------------------------\n\nEach framework typically has one or more components that are used at\nrun-time.  For example, the btl framework is used by the MPI layer to\nsend bytes across different types underlying networks.  The tcp btl,\nfor example, sends messages across TCP-based networks; the UCX PML\nsends messages across OpenFabrics-based networks.\n\nEach component typically has some tunable parameters that can be\nchanged at run-time.  Use the ompi_info command to check a component\nto see what its tunable parameters are.  For example:\n\n  shell$ ompi_info --param btl tcp\n\nshows some of the parameters (and default values) for the tcp btl\ncomponent (use --level to show *all* the parameters; see below).\n\nNote that ompi_info only shows a small number a component's MCA\nparameters by default.  Each MCA parameter has a \"level\" value from 1\nto 9, corresponding to the MPI-3 MPI_T tool interface levels.  In Open\nMPI, we have interpreted these nine levels as three groups of three:\n\n 1. End user / basic\n 2. End user / detailed\n 3. End user / all\n\n 4. Application tuner / basic\n 5. Application tuner / detailed\n 6. Application tuner / all\n\n 7. MPI/OpenSHMEM developer / basic\n 8. MPI/OpenSHMEM developer / detailed\n 9. MPI/OpenSHMEM developer / all\n\nHere's how the three sub-groups are defined:\n\n 1. End user: Generally, these are parameters that are required for\n    correctness, meaning that someone may need to set these just to\n    get their MPI/OpenSHMEM application to run correctly.\n 2. Application tuner: Generally, these are parameters that can be\n    used to tweak MPI application performance.\n 3. MPI/OpenSHMEM developer: Parameters that either don't fit in the\n    other two, or are specifically intended for debugging /\n    development of Open MPI itself.\n\nEach sub-group is broken down into three classifications:\n\n 1. Basic: For parameters that everyone in this category will want to\n    see.\n 2. Detailed: Parameters that are useful, but you probably won't need\n    to change them often.\n 3. All: All other parameters -- probably including some fairly\n    esoteric parameters.\n\nTo see *all* available parameters for a given component, specify that\nompi_info should use level 9:\n\n  shell$ ompi_info --param btl tcp --level 9\n\nThese values can be overridden at run-time in several ways.  At\nrun-time, the following locations are examined (in order) for new\nvalues of parameters:\n\n1. <prefix>/etc/openmpi-mca-params.conf\n\n   This file is intended to set any system-wide default MCA parameter\n   values -- it will apply, by default, to all users who use this Open\n   MPI installation.  The default file that is installed contains many\n   comments explaining its format.\n\n2. $HOME/.openmpi/mca-params.conf\n\n   If this file exists, it should be in the same format as\n   <prefix>/etc/openmpi-mca-params.conf.  It is intended to provide\n   per-user default parameter values.\n\n3. environment variables of the form OMPI_MCA_<name> set equal to a\n   <value>\n\n   Where <name> is the name of the parameter.  For example, set the\n   variable named OMPI_MCA_btl_tcp_frag_size to the value 65536\n   (Bourne-style shells):\n\n   shell$ OMPI_MCA_btl_tcp_frag_size=65536\n   shell$ export OMPI_MCA_btl_tcp_frag_size\n\n4. the mpirun/oshrun command line: --mca <name> <value>\n\n   Where <name> is the name of the parameter.  For example:\n\n   shell$ mpirun --mca btl_tcp_frag_size 65536 -np 2 hello_world_mpi\n\nThese locations are checked in order.  For example, a parameter value\npassed on the mpirun command line will override an environment\nvariable; an environment variable will override the system-wide\ndefaults.\n\nEach component typically activates itself when relevant.  For example,\nthe usNIC component will detect that usNIC devices are present and\nwill automatically be used for MPI communications.  The SLURM\ncomponent will automatically detect when running inside a SLURM job\nand activate itself.  And so on.\n\nComponents can be manually activated or deactivated if necessary, of\ncourse.  The most common components that are manually activated,\ndeactivated, or tuned are the \"BTL\" components -- components that are\nused for MPI point-to-point communications on many types common\nnetworks.\n\nFor example, to *only* activate the TCP and \"self\" (process loopback)\ncomponents are used for MPI communications, specify them in a\ncomma-delimited list to the \"btl\" MCA parameter:\n\n   shell$ mpirun --mca btl tcp,self hello_world_mpi\n\nTo add shared memory support, add \"vader\" into the command-delimited\nlist (list order does not matter):\n\n   shell$ mpirun --mca btl tcp,vader,self hello_world_mpi\n\n(there is an \"sm\" shared memory BTL, too, but \"vader\" is a newer\ngeneration of shared memory support; by default, \"vader\" will be used\ninstead of \"sm\")\n\nTo specifically deactivate a specific component, the comma-delimited\nlist can be prepended with a \"^\" to negate it:\n\n   shell$ mpirun --mca btl ^tcp hello_mpi_world\n\nThe above command will use any other BTL component other than the tcp\ncomponent.\n\n===========================================================================\n\nCommon Questions\n----------------\n\nMany common questions about building and using Open MPI are answered\non the FAQ:\n\n    https://www.open-mpi.org/faq/\n\n===========================================================================\n\nGot more questions?\n-------------------\n\nFound a bug?  Got a question?  Want to make a suggestion?  Want to\ncontribute to Open MPI?  Please let us know!\n\nWhen submitting questions and problems, be sure to include as much\nextra information as possible.  This web page details all the\ninformation that we request in order to provide assistance:\n\n     https://www.open-mpi.org/community/help/\n\nUser-level questions and comments should generally be sent to the\nuser's mailing list (users@lists.open-mpi.org).  Because of spam, only\nsubscribers are allowed to post to this list (ensure that you\nsubscribe with and post from *exactly* the same e-mail address --\njoe@example.com is considered different than\njoe@mycomputer.example.com!).  Visit this page to subscribe to the\nuser's list:\n\n     http://lists.open-mpi.org/mailman/listinfo/users\n\nDeveloper-level bug reports, questions, and comments should generally\nbe sent to the developer's mailing list (devel@lists.open-mpi.org).\nPlease do not post the same question to both lists.  As with the\nuser's list, only subscribers are allowed to post to the developer's\nlist.  Visit the following web page to subscribe:\n\n     http://lists.open-mpi.org/mailman/listinfo/devel\n\nMake today an Open MPI day!\n",
  "versions": [],
  "updated": "2019-01-24T15:23:31Z",
  "updatedUpstream": "2021-01-13T19:43:22Z",
  "contributors": [
    {
      "login": "jedbrown",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/3303?u=3c635cfc4ccc5b1ff83004dc881ac408a9e7fec9&v=4"
    },
    {
      "login": "jmbr",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/12909?u=a90b85e22034cfa6a38365986747a73bb234ba3b&v=4"
    },
    {
      "login": "npe9",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/78315?u=22743fe46e0c5e3717fb7da7be811a4350c18593&v=4"
    },
    {
      "login": "goodell",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/78560?u=30b6febfdc76447002274c4aa1e1b0795956df74&v=4"
    },
    {
      "login": "orivej",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/101514?v=4"
    },
    {
      "login": "nmorey",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/108326?v=4"
    },
    {
      "login": "bertwesarg",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/111934?u=f1841d94e9e268ee62bd91ae69740e7b0002f91f&v=4"
    },
    {
      "login": "rainwoodman",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/138060?v=4"
    },
    {
      "login": "sydidelot",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/377197?u=3f5804540648544d808b1f87187cf36adaec4067&v=4"
    },
    {
      "login": "marksantcroos",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/383387?u=3f9e59b8a03aa127b0ea5281e0003c8491bee97a&v=4"
    },
    {
      "login": "jeffhammond",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/406118?u=95adda26fee4b8c68f36b7322bbef11a095d796e&v=4"
    },
    {
      "login": "MaskRay",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/416322?v=4"
    },
    {
      "login": "gvallee",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/419592?v=4"
    },
    {
      "login": "AntoineD",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/433696?v=4"
    },
    {
      "login": "patrickgeoffray",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/608904?v=4"
    },
    {
      "login": "tjahns",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/608917?u=5eb4940f43607b6503f74b22268214530c115794&v=4"
    },
    {
      "login": "jsquyres",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/617316?v=4"
    },
    {
      "login": "matney",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/632436?v=4"
    },
    {
      "login": "bmwiedemann",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/637990?v=4"
    },
    {
      "login": "bosilca",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/642701?u=782d8f640ec29ed2a299132ae1cdcddc47def357&v=4"
    },
    {
      "login": "ddaniel",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/651595?u=a51edb6ff3c54ad7ad1c8d8413bf82c01c35e2e5&v=4"
    },
    {
      "login": "kizill",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/682769?u=5e572100ca065fde1f8ad64da665f82f4cdf06de&v=4"
    },
    {
      "login": "teng-lin",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/737447?u=9fa2e6ecf014ee009e67c1d1898f80d381c690b6&v=4"
    },
    {
      "login": "rajachan",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/742736?u=0c394d1f2361cd13a158a3cda01c04f70389ca48&v=4"
    },
    {
      "login": "mattaezell",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/797013?u=f9d9720697294e18c3179070f70e6cabc84fb992&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 1170,
  "forks": 593,
  "topics": [
    "c",
    "hpc",
    "mpi",
    "fortran",
    "hacktoberfest"
  ]
}