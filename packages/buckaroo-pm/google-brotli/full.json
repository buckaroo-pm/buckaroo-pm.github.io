{
  "packageName": "buckaroo-pm/google-brotli",
  "name": "njlr/brotli",
  "licence": "MIT",
  "description": "Brotli compression format",
  "readme": "### Introduction\n\nBrotli is a generic-purpose lossless compression algorithm that compresses data\nusing a combination of a modern variant of the LZ77 algorithm, Huffman coding\nand 2nd order context modeling, with a compression ratio comparable to the best\ncurrently available general-purpose compression methods. It is similar in speed\nwith deflate but offers more dense compression.\n\nThe specification of the Brotli Compressed Data Format is defined in [RFC 7932](https://www.ietf.org/rfc/rfc7932.txt).\n\nBrotli is open-sourced under the MIT License, see the LICENSE file.\n\nBrotli mailing list:\nhttps://groups.google.com/forum/#!forum/brotli\n\n[![Build Status](https://travis-ci.org/google/brotli.svg?branch=master)](https://travis-ci.org/google/brotli)\n\n### Build instructions\n\n#### Make\n\nTo build and run tests, simply do:\n\n    $ ./configure && make\n\nIf you want to install brotli, use one of the more advanced build systems below.\n\n#### Bazel\n\nSee [Bazel](http://www.bazel.build/)\n\n#### CMake\n\nThe basic commands to build, test and install brotli are:\n\n    $ mkdir out && cd out && ../configure-cmake && make\n    $ make test\n    $ make install\n\nYou can use other [CMake](https://cmake.org/) configuration. For example, to\nbuild static libraries and use a custom installation directory:\n\n    $ mkdir out-static && \\\n      cd out-static && \\\n      ../configure-cmake --disable-shared-libs --prefix='/my/prefix/dir/'\n    $ make install\n\n#### Premake5\n\nSee [Premake5](https://premake.github.io/)\n\n#### Python\n\nTo install the Python module from source, run the following:\n\n    $ python setup.py install\n\nSee the [Python readme](python/README.md) for more details on testing\nand development.\n\n### Benchmarks\n* [Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/) / [Unstable Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/unstable/)\n* [Large Text Compression Benchmark](http://mattmahoney.net/dc/text.html)\n* [Lzturbo Benchmark](https://sites.google.com/site/powturbo/home/benchmark)\n\n### Related projects\nIndependent [decoder](https://github.com/madler/brotli) implementation by Mark Adler, based entirely on format specification.\n\nJavaScript port of brotli [decoder](https://github.com/devongovett/brotli.js). Could be used directly via `npm install brotli`\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:brotli\" ]",
      "lockFile": "manifest = \"9b2116423ae7909579a9a0585d6d64d896ea31dd28746e2c16df30543c3c2aa4\"\n\n",
      "buck": "load('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'common',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('common', '*.h'),\n  ]),\n  headers = subdir_glob([\n    ('include', 'brotli/*.h'),\n  ]),\n  srcs = glob([\n    'common/*.c',\n  ]),\n)\n\ncxx_library(\n  name = 'dec',\n  header_namespace = '',\n  headers = subdir_glob([\n    ('include', 'brotli/*.h'),\n    ('dec', '*.h'),\n  ]),\n  srcs = glob([\n    'dec/*.c',\n  ]),\n  deps = [\n    ':common',\n  ],\n)\n\ncxx_library(\n  name = 'enc',\n  header_namespace = '',\n  headers = subdir_glob([\n    ('include', 'brotli/*.h'),\n    ('enc', '*.h'),\n  ]),\n  srcs = glob([\n    'enc/*.c',\n  ]),\n  deps = [\n    ':common',\n  ],\n)\n\nprebuilt_cxx_library(\n  name = 'brotli',\n  header_only = True,\n  header_namespace = 'brotli',\n  exported_headers = subdir_glob([\n    ('include/brotli', '*.h'),\n  ]),\n  exported_deps = [\n    ':common',\n    ':enc',\n    ':dec',\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "# Description:\n#   Brotli is a generic-purpose lossless compression algorithm.\n\npackage(\n    default_visibility = [\"//visibility:public\"],\n)\n\nlicenses([\"notice\"])  # MIT\n\nexports_files([\"LICENSE\"])\n\nSTRICT_C_OPTIONS = [\n    \"--pedantic-errors\",\n    \"-Wall\",\n    \"-Wconversion\",\n    \"-Werror\",\n    \"-Wextra\",\n    \"-Wlong-long\",\n    \"-Wmissing-declarations\",\n    \"-Wmissing-prototypes\",\n    \"-Wno-strict-aliasing\",\n    \"-Wshadow\",\n    \"-Wsign-compare\",\n]\n\nfilegroup(\n    name = \"public_headers\",\n    srcs = glob([\"include/brotli/*.h\"]),\n)\n\nfilegroup(\n    name = \"common_headers\",\n    srcs = glob([\"common/*.h\"]),\n)\n\nfilegroup(\n    name = \"common_sources\",\n    srcs = glob([\"common/*.c\"]),\n)\n\nfilegroup(\n    name = \"dec_headers\",\n    srcs = glob([\"dec/*.h\"]),\n)\n\nfilegroup(\n    name = \"dec_sources\",\n    srcs = glob([\"dec/*.c\"]),\n)\n\nfilegroup(\n    name = \"enc_headers\",\n    srcs = glob([\"enc/*.h\"]),\n)\n\nfilegroup(\n    name = \"enc_sources\",\n    srcs = glob([\"enc/*.c\"]),\n)\n\ncc_library(\n    name = \"brotli\",\n    hdrs = [\":public_headers\"],\n    copts = STRICT_C_OPTIONS,\n    includes = [\"include\"],\n)\n\ncc_library(\n    name = \"brotlicommon\",\n    srcs = [\":common_sources\"],\n    hdrs = [\":common_headers\"],\n    copts = STRICT_C_OPTIONS,\n    deps = [\":brotli\"],\n)\n\ncc_library(\n    name = \"brotlidec\",\n    srcs = [\":dec_sources\"],\n    hdrs = [\":dec_headers\"],\n    copts = STRICT_C_OPTIONS,\n    deps = [\":brotlicommon\"],\n)\n\ncc_library(\n    name = \"brotlienc\",\n    srcs = [\":enc_sources\"],\n    hdrs = [\":enc_headers\"],\n    copts = STRICT_C_OPTIONS,\n    linkopts = [\"-lm\"],\n    deps = [\":brotlicommon\"],\n)\n\ncc_binary(\n    name = \"bro\",\n    srcs = [\"tools/bro.c\"],\n    copts = STRICT_C_OPTIONS,\n    linkstatic = 1,\n    deps = [\n        \":brotlidec\",\n        \":brotlienc\",\n    ],\n)\n",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-09-06T12:07:45Z",
  "updatedUpstream": "2017-03-13T12:54:16Z",
  "contributors": [
    {
      "login": "njlr",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1577531?u=b805a63f8054b62169749f2c9d2e89eb53af57d7&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 0,
  "forks": 1,
  "topics": []
}