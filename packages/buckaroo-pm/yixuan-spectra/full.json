{
  "packageName": "buckaroo-pm/yixuan-spectra",
  "name": "yixuan/spectra",
  "licence": "MPL-2.0",
  "description": "A header-only C++ library for large scale eigenvalue problems",
  "readme": "# <a href=\"https://spectralib.org\"><img src=\"https://spectralib.org/img/logo.png\" width=\"200px\" /></a>\n\n[![Build Status](https://travis-ci.org/yixuan/spectra.svg?branch=master)](https://travis-ci.org/yixuan/spectra)\n\n> **NOTE**: Starting from v0.7 all header files are moved into a directory\n> named `Spectra`. Hence the recommended include directive would look like\n> `#include <Spectra/SymEigsSolver.h>`.\n\n[**Spectra**](https://spectralib.org) stands for **Sp**arse **E**igenvalue **C**omputation **T**oolkit\nas a **R**edesigned **A**RPACK. It is a C++ library for large scale eigenvalue\nproblems, built on top of [Eigen](http://eigen.tuxfamily.org),\nan open source linear algebra library.\n\n**Spectra** is implemented as a header-only C++ library, whose only dependency,\n**Eigen**, is also header-only. Hence **Spectra** can be easily embedded in\nC++ projects that require calculating eigenvalues of large matrices.\n\n## Relation to ARPACK\n\n[ARPACK](http://www.caam.rice.edu/software/ARPACK/) is a software written in\nFORTRAN for solving large scale eigenvalue problems. The development of\n**Spectra** is much inspired by ARPACK, and as the whole name indicates,\n**Spectra** is a redesign of the ARPACK library using the C++ language.\n\nIn fact, **Spectra** is based on the algorithm described in the\n[ARPACK Users' Guide](http://www.caam.rice.edu/software/ARPACK/UG/ug.html),\nthe implicitly restarted Arnoldi/Lanczos method. However,\nit does not use the ARPACK code, and it is **NOT** a clone of ARPACK for C++.\nIn short, **Spectra** implements the major algorithms in ARPACK,\nbut **Spectra** provides a completely different interface, and it does not\ndepend on ARPACK.\n\n## Common Usage\n\n**Spectra** is designed to calculate a specified number (`k`) of eigenvalues\nof a large square matrix (`A`). Usually `k` is much less than the size of matrix\n(`n`), so that only a few eigenvalues and eigenvectors are computed, which\nin general is more efficient than calculating the whole spectral decomposition.\nUsers can choose eigenvalue selection rules to pick up the eigenvalues of interest,\nsuch as the largest `k` eigenvalues, or eigenvalues with largest real parts,\netc.\n\nTo use the eigen solvers in this library, the user does not need to directly\nprovide the whole matrix, but instead, the algorithm only requires certain operations\ndefined on `A`, and in the basic setting, it is simply the matrix-vector\nmultiplication. Therefore, if the matrix-vector product `A * x` can be computed\nefficiently, which is the case when `A` is sparse, **Spectra**\nwill be very powerful for large scale eigenvalue problems.\n\nThere are two major steps to use the **Spectra** library:\n\n1. Define a class that implements a certain matrix operation, for example the\nmatrix-vector multiplication `y = A * x` or the shift-solve operation\n`y = inv(A - σ * I) * x`. **Spectra** has defined a number of\nhelper classes to quickly create such operations from a matrix object.\nSee the documentation of\n[DenseGenMatProd](https://spectralib.org/doc/classSpectra_1_1DenseGenMatProd.html),\n[DenseSymShiftSolve](https://spectralib.org/doc/classSpectra_1_1DenseSymShiftSolve.html), etc.\n2. Create an object of one of the eigen solver classes, for example\n[SymEigsSolver](https://spectralib.org/doc/classSpectra_1_1SymEigsSolver.html)\nfor symmetric matrices, and\n[GenEigsSolver](https://spectralib.org/doc/classSpectra_1_1GenEigsSolver.html)\nfor general matrices. Member functions\nof this object can then be called to conduct the computation and retrieve the\neigenvalues and/or eigenvectors.\n\nBelow is a list of the available eigen solvers in **Spectra**:\n- [SymEigsSolver](https://spectralib.org/doc/classSpectra_1_1SymEigsSolver.html):\nFor real symmetric matrices\n- [GenEigsSolver](https://spectralib.org/doc/classSpectra_1_1GenEigsSolver.html):\nFor general real matrices\n- [SymEigsShiftSolver](https://spectralib.org/doc/classSpectra_1_1SymEigsShiftSolver.html):\nFor real symmetric matrices using the shift-and-invert mode\n- [GenEigsRealShiftSolver](https://spectralib.org/doc/classSpectra_1_1GenEigsRealShiftSolver.html):\nFor general real matrices using the shift-and-invert mode,\nwith a real-valued shift\n- [GenEigsComplexShiftSolver](https://spectralib.org/doc/classSpectra_1_1GenEigsComplexShiftSolver.html):\nFor general real matrices using the shift-and-invert mode,\nwith a complex-valued shift\n- [SymGEigsSolver](https://spectralib.org/doc/classSpectra_1_1SymGEigsSolver.html):\nFor generalized eigen solver for real symmetric matrices\n\n## Examples\n\nBelow is an example that demonstrates the use of the eigen solver for symmetric\nmatrices.\n\n```cpp\n#include <Eigen/Core>\n#include <Spectra/SymEigsSolver.h>\n// <Spectra/MatOp/DenseSymMatProd.h> is implicitly included\n#include <iostream>\n\nusing namespace Spectra;\n\nint main()\n{\n    // We are going to calculate the eigenvalues of M\n    Eigen::MatrixXd A = Eigen::MatrixXd::Random(10, 10);\n    Eigen::MatrixXd M = A + A.transpose();\n\n    // Construct matrix operation object using the wrapper class DenseSymMatProd\n    DenseSymMatProd<double> op(M);\n\n    // Construct eigen solver object, requesting the largest three eigenvalues\n    SymEigsSolver< double, LARGEST_ALGE, DenseSymMatProd<double> > eigs(&op, 3, 6);\n\n    // Initialize and compute\n    eigs.init();\n    int nconv = eigs.compute();\n\n    // Retrieve results\n    Eigen::VectorXd evalues;\n    if(eigs.info() == SUCCESSFUL)\n        evalues = eigs.eigenvalues();\n\n    std::cout << \"Eigenvalues found:\\n\" << evalues << std::endl;\n\n    return 0;\n}\n```\n\nSparse matrix is supported via the `SparseGenMatProd` class.\n\n```cpp\n#include <Eigen/Core>\n#include <Eigen/SparseCore>\n#include <Spectra/GenEigsSolver.h>\n#include <Spectra/MatOp/SparseGenMatProd.h>\n#include <iostream>\n\nusing namespace Spectra;\n\nint main()\n{\n    // A band matrix with 1 on the main diagonal, 2 on the below-main subdiagonal,\n    // and 3 on the above-main subdiagonal\n    const int n = 10;\n    Eigen::SparseMatrix<double> M(n, n);\n    M.reserve(Eigen::VectorXi::Constant(n, 3));\n    for(int i = 0; i < n; i++)\n    {\n        M.insert(i, i) = 1.0;\n        if(i > 0)\n            M.insert(i - 1, i) = 3.0;\n        if(i < n - 1)\n            M.insert(i + 1, i) = 2.0;\n    }\n\n    // Construct matrix operation object using the wrapper class SparseGenMatProd\n    SparseGenMatProd<double> op(M);\n\n    // Construct eigen solver object, requesting the largest three eigenvalues\n    GenEigsSolver< double, LARGEST_MAGN, SparseGenMatProd<double> > eigs(&op, 3, 6);\n\n    // Initialize and compute\n    eigs.init();\n    int nconv = eigs.compute();\n\n    // Retrieve results\n    Eigen::VectorXcd evalues;\n    if(eigs.info() == SUCCESSFUL)\n        evalues = eigs.eigenvalues();\n\n    std::cout << \"Eigenvalues found:\\n\" << evalues << std::endl;\n\n    return 0;\n}\n```\n\nAnd here is an example for user-supplied matrix operation class.\n\n```cpp\n#include <Eigen/Core>\n#include <Spectra/SymEigsSolver.h>\n#include <iostream>\n\nusing namespace Spectra;\n\n// M = diag(1, 2, ..., 10)\nclass MyDiagonalTen\n{\npublic:\n    int rows() { return 10; }\n    int cols() { return 10; }\n    // y_out = M * x_in\n    void perform_op(double *x_in, double *y_out)\n    {\n        for(int i = 0; i < rows(); i++)\n        {\n            y_out[i] = x_in[i] * (i + 1);\n        }\n    }\n};\n\nint main()\n{\n    MyDiagonalTen op;\n    SymEigsSolver<double, LARGEST_ALGE, MyDiagonalTen> eigs(&op, 3, 6);\n    eigs.init();\n    eigs.compute();\n    if(eigs.info() == SUCCESSFUL)\n    {\n        Eigen::VectorXd evalues = eigs.eigenvalues();\n        std::cout << \"Eigenvalues found:\\n\" << evalues << std::endl;\n    }\n\n    return 0;\n}\n```\n\n## Shift-and-invert Mode\n\nWhen we want to find eigenvalues that are closest to a number `σ`,\nfor example to find the smallest eigenvalues of a positive definite matrix\n(in which case `σ = 0`), it is advised to use the shift-and-invert mode\nof eigen solvers.\n\nIn the shift-and-invert mode, selection rules are applied to `1/(λ - σ)`\nrather than `λ`, where `λ` are eigenvalues of `A`.\nTo use this mode, users need to define the shift-solve matrix operation. See\nthe documentation of\n[SymEigsShiftSolver](https://spectralib.org/doc/classSpectra_1_1SymEigsShiftSolver.html)\nfor details.\n\n## Documentation\n\nThe [API reference](https://spectralib.org/doc/) page contains the documentation\nof **Spectra** generated by [Doxygen](http://www.doxygen.org/),\nincluding all the background knowledge, example code and class APIs.\n\nMore information can be found in the project page [https://spectralib.org](https://spectralib.org).\n\n## License\n\n**Spectra** is an open source project licensed under\n[MPL2](https://www.mozilla.org/MPL/2.0/), the same license used by **Eigen**.\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:spectra\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/eigen\"\nversion = \"*\"\n",
      "lockFile": "manifest = \"23c3cd3db28af9d9992a3a5e11f6f33b43f122918eb21066ffb0ecc997ac42f7\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/eigen\"\ntarget = \"//:eigen\"\n\n[lock.\"github.com/buckaroo-pm/eigen\"]\nversions = [ \"branch=master\" ]\nrevision = \"edbb9e459fee8e1bb58e20493b7c03a98077c918\"\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\nprebuilt_cxx_library(\n  name = 'spectra',\n  header_only = True,\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.h'),\n  ]),\n  licenses = [\n    'LICENSE',\n  ],\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [
        {
          "uri": "github.com/buckaroo-pm/eigen",
          "name": "buckaroo-pm/eigen",
          "version": "*"
        }
      ],
      "lock": [
        {
          "uri": "github.com/buckaroo-pm/eigen",
          "name": "buckaroo-pm/eigen",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "edbb9e459fee8e1bb58e20493b7c03a98077c918"
          }
        }
      ]
    }
  ],
  "updated": "2019-01-18T17:28:12Z",
  "updatedUpstream": "2021-01-13T15:13:23Z",
  "contributors": [
    {
      "login": "yixuan",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/216398?v=4"
    },
    {
      "login": "v1kko",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1472570?v=4"
    },
    {
      "login": "jkflying",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1746276?u=d0752e6e6943201cecd320f849f17bad9f84daa2&v=4"
    },
    {
      "login": "filiatra",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/3185717?u=5dd14628c5fe17ebbd175589fa943af19ac37b81&v=4"
    },
    {
      "login": "pmoulon",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/3235050?u=24e61620e6ec7a0a2be7d92c1717e300495b79d7&v=4"
    },
    {
      "login": "jschueller",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/3832365?v=4"
    },
    {
      "login": "felipeZ",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/4108663?u=496695b74024ff0b11060ce758f332e3be188aea&v=4"
    },
    {
      "login": "jdbancal",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/5440791?v=4"
    },
    {
      "login": "ryanlevy",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/7354063?u=70030bd29342315c9963790a0f2062761c7c4c43&v=4"
    },
    {
      "login": "guacke",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/10919923?u=302f589e436bc3fc2c1fdefa7795476523152f3a&v=4"
    },
    {
      "login": "kriolog",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/11281193?u=d3706260df27321bd6900ae5697de5acacaa1b75&v=4"
    },
    {
      "login": "JensWehner",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/12139113?u=e4ed2197d385e004a0c8b0d7a6bfd6e0278f2498&v=4"
    },
    {
      "login": "AnnaAraslanova",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/19228754?u=3750a7c7650ac391e7cc148e96972cf806349179&v=4"
    },
    {
      "login": "NicoRenaud",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/24918192?u=7e56e8132da7a41c2534875f8dfb14f416d77e5e&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 455,
  "forks": 88,
  "topics": [
    "eigenvalues",
    "arpack",
    "linear-algebra",
    "spectra",
    "header-only"
  ]
}