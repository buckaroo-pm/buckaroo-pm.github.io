{
  "packageName": "buckaroo-pm/no1msd-mstch",
  "name": "no1msd/mstch",
  "licence": "MIT",
  "description": "mstch is a complete implementation of {{mustache}} templates using modern C++",
  "readme": "# mstch - {{mustache}} templates in C++11 \n\n![mstch logo](http://i.imgur.com/MRyStO5.png)\n\nmstch is a complete implementation of [{{mustache}}](http://mustache.github.io/) \ntemplates using modern C++. It's compliant with [specifications](https://github.com/mustache/spec)\nv1.1.3, including the lambda module.\n\n[![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](http://melpon.org/wandbox/permlink/EqyOe7IBRYPGVk5f)\n[![GitHub version](https://badge.fury.io/gh/no1msd%2Fmstch.svg)](http://badge.fury.io/gh/no1msd%2Fmstch)\n[![Build Status](https://travis-ci.org/no1msd/mstch.svg?branch=master)](https://travis-ci.org/no1msd/mstch)\n[![Build status](https://ci.appveyor.com/api/projects/status/d6mxp0uba5646x16?svg=true)](https://ci.appveyor.com/project/no1msd/mstch)\n\n## Supported features\n\nmstch supports the complete feature set described in the `mustache(5)` [manpage](http://mustache.github.com/mustache.5.html):\n\n - JSON-like data structure using [Boost.Variant](http://www.boost.org/libs/variant)\n - variables, sections, inverted sections\n - partials\n - changing the delimiter\n - C++11 lambdas\n - C++ objects as view models\n\n## Basic usage\n\n```c++\n#include <iostream>\n#include <mstch/mstch.hpp>\n\nint main() {\n  std::string view{\"{{#names}}Hi {{name}}!\\n{{/names}}\"};\n  mstch::map context{\n    {\"names\", mstch::array{\n      mstch::map{{\"name\", std::string{\"Chris\"}}},\n      mstch::map{{\"name\", std::string{\"Mark\"}}},\n      mstch::map{{\"name\", std::string{\"Scott\"}}},\n    }}\n  };\n  \n  std::cout << mstch::render(view, context) << std::endl;\n  \n  return 0;\n}\n\n```\n\nThe output of this example will be:\n\n```html\nHi Chris!\nHi Mark!\nHi Scott!\n```\n\n### Data structure\n\nThe types in the example above, `mstch::array` and `mstch::map` are  actually \naliases for standard types:\n\n```c++\nusing map = std::map<const std::string, node>;\nusing array = std::vector<node>;\n```\n\n`mstch::node` is a `boost::variant` that can hold a `std::string`, `int`, \n`double`, `bool`, `mstch::lambda` or a `std::shared_ptr<mstch::object>` \n(see below), also a map or an array recursively. Essentially it works just like \na JSON object.\n\nNote that when using a `std::string` as value you must explicitly specify the \ntype, since a `const char*` literal like `\"foobar\"` would be implicitly \nconverted to `bool`. Alternatively you can use [C++14 string_literals](http://en.cppreference.com/w/cpp/string/basic_string/operator%22%22s)\nif your compiler supports it.\n\n## Advanced usage\n\n### Partials\n\nPartials can be passed in a `std::map` as the third parameter of the \n`mstch::render` function:\n\n```c++\nstd::string view{\"{{#names}}{{> user}}{{/names}}\"};\nstd::string user_view{\"<strong>{{name}}\\n</strong>\"};\nmstch::map context{\n  {\"names\", mstch::array{\n    mstch::map{{\"name\", std::string{\"Chris\"}}},\n    mstch::map{{\"name\", std::string{\"Mark\"}}},\n    mstch::map{{\"name\", std::string{\"Scott\"}}},\n  }}\n};\n  \nstd::cout << mstch::render(view, context, {{\"user\", user_view}}) << std::endl;\n```\n\nOutput:\n\n```html\n<strong>Chris</strong>\n<strong>Mark</strong>\n<strong>Scott</strong>\n```\n\n### Lambdas\n\nC++11 lambda expressions can be used to add logic to your templates. Like a\n`const char*` literal, lambdas can be implicitly converted to `bool`, so they\nmust be wrapped in a `mstch::lambda` object when used in a `mstch::node`. The \nlambda expression passed to `mstch::lambda` must itself return a `mstch::node`.\nThe returned node will be rendered to a string, then it will be parsed as a\ntemplate.\n\nThe lambda expression accepts either no parameters:\n\n```c++\nstd::string view{\"Hello {{lambda}}!\"};\nmstch::map context{\n  {\"lambda\", mstch::lambda{[]() -> mstch::node {\n    return std::string{\"World\"};\n  }}}\n};\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\nHello World!\n```\n\nOr it accepts a `const std::string&` that gets the unrendered literal block:\n\n```c++\nstd::string view{\"{{#bold}}{{yay}} :){{/bold}}\"};\nmstch::map context{\n  {\"yay\", std::string{\"Yay!\"}},\n  {\"bold\", mstch::lambda{[](const std::string& text) -> mstch::node {\n    return \"<b>\" + text + \"</b>\";\n  }}}\n};\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\n<b>Yay! :)</b>\n```\n\n### Objects\n\nCustom objects can also be used as context for rendering templates. The class \nmust inherit from `mstch::object`, and register it's exported methods with\n`register_methods`. Exported methods must have the return type of `mstch::node`.\nObjects must be created as a `std::shared_ptr`.\n\n```c++\nclass example: public mstch::object {\n public:\n  example(): m_value(1) {\n    register_methods(this, {\n      {\"count\", &example::count},\n      {\"names\", &example::names}  \n    });\n  }\n  \n  mstch::node count() {\n    return m_value++;\n  }\n  \n  mstch::node names() {\n    return mstch::array{\n      std::string{\"Chris\"}, std::string{\"Mark\"}, std::string{\"Scott\"}};\n  }\n  \n private:\n  int m_value;\n};\n\nstd::string view{\"{{#names}}<b>{{count}}</b>: {{.}}\\n{{/names}}\"};\nconst auto context = std::make_shared<example>();\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\n<b>1</b>: Chris\n<b>2</b>: Mark\n<b>3</b>: Scott\n```\n\n### Custom escape function\n\nBy default, mstch uses HTML escaping on the output, as per specification. This\nis not useful if your output is not HTML, so mstch provides a way to supply\nyour own escape implementation. Just assign any callable object to the static\n`mstch::config::escape`, which is an initially empty\n`std::function<std::string(const std::string&)>`. \n\nFor example you can turn off escaping entirely with a lambda:\n\n```c++\nmstch::config::escape = [](const std::string& str) -> std::string {\n  return str;\n};\n```\n\n## Requirements\n\n - A C++ compiler with decent C++11 support. Currently tested with:\n   - GCC 4.7, 4.8, 4.9, 5.1\n   - clang 3.5, 3.6, 3.7 (both libstdc++ and libc++ are supported)\n   - MSVC 2013, 2015\n - Boost 1.54+ for [Boost.Variant](http://www.boost.org/libs/variant)\n - CMake 3.0+ for building\n\n## Using mstch in your project\n\nIf you are using CMake, the easiest way to include mstch in your project is to \ncopy the whole directory to your source tree, and use `add_subdirectory` in your \nCMakeLists.txt. This will set a variable named `mstch_INCLUDE_DIR` that contains \nits include path, and add a static library target named `mstch`. For example:\n\n```cmake\nadd_subdirectory(external/mstch)\ninclude_directories(${mstch_INCLUDE_DIR})\ntarget_link_libraries(your_project mstch)\n```\n\nIf you prefer to install the library globally, you can simply do the following \nfrom the root of the source tree:\n\n```bash\n $ mkdir build\n $ cd build\n $ cmake ..\n $ make\n $ make install\n```\n\nThe install command may require root privileges. This will also install CMake \nconfig files, so you can use use `find_package` in your CMakeLists.txt:\n\n```cmake\nfind_package(mstch)\ntarget_link_libraries(your_project mstch::mstch)\n```\n\n## Running the unit tests\n\nUnit tests are using the [Catch](https://github.com/philsquared/Catch) framework\nand [rapidjson](http://rapidjson.org/) to parse the\n[Mustache specifications](https://github.com/mustache/spec), all of which are \nincluded in the repository as git submodules. Various \n[Boost](http://www.boost.org/) libraries are also required to build them.\n\nDon't forget to initialize submodules:\n\n```bash\n $ git submodule init\n $ git submodule update\n```\n\nTo build and run the unit tests:\n\n```bash\n $ mkdir build\n $ cd build\n $ cmake -DWITH_UNIT_TESTS=ON ..\n $ make\n $ make test\n```\n\n## License\n\nmstch is licensed under the [MIT license](https://github.com/no1msd/mstch/blob/master/LICENSE).\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:mstch\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/boost-variant\"\nversion = \"branch=master\"\n",
      "lockFile": "manifest = \"09e75f54b2e0653e1c7734c5d676d2240175c5ddca1d5c441d4c008066eff818\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/boost-variant\"\ntarget = \"//:variant\"\n\n[lock.\"github.com/buckaroo-pm/boost-assert\"]\nversions = [ \"branch=master\" ]\nrevision = \"fc4d65435c49b5b4fbbf0d4867ee8f69bfd42ef1\"\n\n[lock.\"github.com/buckaroo-pm/boost-config\"]\nversions = [ \"branch=master\" ]\nrevision = \"f2f2d0d85496b72eeff1186518deb7e23c757bfd\"\n\n[lock.\"github.com/buckaroo-pm/boost-container_hash\"]\nversions = [ \"branch=master\" ]\nrevision = \"ddd9a887f1f0253ded4455d455b3c54228067b74\"\n\n[lock.\"github.com/buckaroo-pm/boost-core\"]\nversions = [ \"branch=master\" ]\nrevision = \"10b589cb4aea4ca823237059f104cbfdd09b0f0e\"\n\n[lock.\"github.com/buckaroo-pm/boost-detail\"]\nversions = [ \"branch=master\" ]\nrevision = \"94aa5268c1a74468be94b40afd730aea1730ceab\"\n\n[lock.\"github.com/buckaroo-pm/boost-exception\"]\nversions = [ \"branch=master\" ]\nrevision = \"1795a6e9756f4d9ac60d43e2b9b07ec7ddfdbfb7\"\n\n[lock.\"github.com/buckaroo-pm/boost-integer\"]\nversions = [ \"branch=master\" ]\nrevision = \"5badcf5b232a15e89d0701bef687ffbe70398696\"\n\n[lock.\"github.com/buckaroo-pm/boost-move\"]\nversions = [ \"branch=master\" ]\nrevision = \"3f0711cabd643ed902ff3ae3d6746ba2f7256e4e\"\n\n[lock.\"github.com/buckaroo-pm/boost-mpl\"]\nversions = [ \"branch=master\" ]\nrevision = \"6493fcda0f5cd2ee595346ca48ff495db9fa74d5\"\n\n[lock.\"github.com/buckaroo-pm/boost-preprocessor\"]\nversions = [ \"branch=master\" ]\nrevision = \"a70772bbd315eb597c3f1e359af742dde46a6f37\"\n\n[lock.\"github.com/buckaroo-pm/boost-static_assert\"]\nversions = [ \"branch=master\" ]\nrevision = \"4b9da4628bc69ad0e9b244d3ec885f2eadac95d8\"\n\n[lock.\"github.com/buckaroo-pm/boost-throw_exception\"]\nversions = [ \"branch=master\" ]\nrevision = \"788503e2365554d1860c6d2043999e3430d1f7a5\"\n\n[lock.\"github.com/buckaroo-pm/boost-type_index\"]\nversions = [ \"branch=master\" ]\nrevision = \"a8183e0bdcaafdda1183c0279137acadcb5b4466\"\n\n[lock.\"github.com/buckaroo-pm/boost-type_traits\"]\nversions = [ \"branch=master\" ]\nrevision = \"a34caf51f831ffb77d1057c668b5db620863d191\"\n\n[lock.\"github.com/buckaroo-pm/boost-utility\"]\nversions = [ \"branch=master\" ]\nrevision = \"57aa216434800315c9cd2664169e444e3070a677\"\n\n[lock.\"github.com/buckaroo-pm/boost-variant\"]\nversions = [ \"branch=master\" ]\nrevision = \"f95029191ed33a6370b690da81df903dc7db4cb1\"\n",
      "buck": "load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'mstch',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  licenses = [\n    'LICENSE',\n  ],\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC'\n  ],\n)\n",
      "bazel": "",
      "deps": [
        {
          "uri": "github.com/buckaroo-pm/boost-variant",
          "name": "buckaroo-pm/boost-variant",
          "version": "branch=master"
        }
      ],
      "lock": [
        {
          "uri": "github.com/buckaroo-pm/boost-assert",
          "name": "buckaroo-pm/boost-assert",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "fc4d65435c49b5b4fbbf0d4867ee8f69bfd42ef1"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-config",
          "name": "buckaroo-pm/boost-config",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "f2f2d0d85496b72eeff1186518deb7e23c757bfd"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-container_hash",
          "name": "buckaroo-pm/boost-container_hash",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "ddd9a887f1f0253ded4455d455b3c54228067b74"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-core",
          "name": "buckaroo-pm/boost-core",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "10b589cb4aea4ca823237059f104cbfdd09b0f0e"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-detail",
          "name": "buckaroo-pm/boost-detail",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "94aa5268c1a74468be94b40afd730aea1730ceab"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-exception",
          "name": "buckaroo-pm/boost-exception",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "1795a6e9756f4d9ac60d43e2b9b07ec7ddfdbfb7"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-integer",
          "name": "buckaroo-pm/boost-integer",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "5badcf5b232a15e89d0701bef687ffbe70398696"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-move",
          "name": "buckaroo-pm/boost-move",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "3f0711cabd643ed902ff3ae3d6746ba2f7256e4e"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-mpl",
          "name": "buckaroo-pm/boost-mpl",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "6493fcda0f5cd2ee595346ca48ff495db9fa74d5"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-preprocessor",
          "name": "buckaroo-pm/boost-preprocessor",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "a70772bbd315eb597c3f1e359af742dde46a6f37"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-static_assert",
          "name": "buckaroo-pm/boost-static_assert",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "4b9da4628bc69ad0e9b244d3ec885f2eadac95d8"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-throw_exception",
          "name": "buckaroo-pm/boost-throw_exception",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "788503e2365554d1860c6d2043999e3430d1f7a5"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-type_index",
          "name": "buckaroo-pm/boost-type_index",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "a8183e0bdcaafdda1183c0279137acadcb5b4466"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-type_traits",
          "name": "buckaroo-pm/boost-type_traits",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "a34caf51f831ffb77d1057c668b5db620863d191"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-utility",
          "name": "buckaroo-pm/boost-utility",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "57aa216434800315c9cd2664169e444e3070a677"
          }
        },
        {
          "uri": "github.com/buckaroo-pm/boost-variant",
          "name": "buckaroo-pm/boost-variant",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "f95029191ed33a6370b690da81df903dc7db4cb1"
          }
        }
      ]
    }
  ],
  "updated": "2019-01-09T12:15:19Z",
  "updatedUpstream": "2021-01-12T19:19:33Z",
  "contributors": [
    {
      "login": "no1msd",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/879377?u=e77ca56db4e7998a37105f1866c4198f194f817b&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 442,
  "forks": 78,
  "topics": []
}