{
  "packageName": "buckaroo-pm/open-source-parsers-jsoncpp",
  "name": "open-source-parsers/jsoncpp",
  "licence": "NOASSERTION",
  "description": "A C++ library for interacting with JSON.",
  "readme": "# JsonCpp\n\n[![badge](https://img.shields.io/badge/conan.io-jsoncpp%2F1.8.0-green.svg?logo=data:image/png;base64%2CiVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAMAAAAolt3jAAAA1VBMVEUAAABhlctjlstkl8tlmMtlmMxlmcxmmcxnmsxpnMxpnM1qnc1sn85voM91oM11oc1xotB2oc56pNF6pNJ2ptJ8ptJ8ptN9ptN8p9N5qNJ9p9N9p9R8qtOBqdSAqtOAqtR%2BrNSCrNJ/rdWDrNWCsNWCsNaJs9eLs9iRvNuVvdyVv9yXwd2Zwt6axN6dxt%2Bfx%2BChyeGiyuGjyuCjyuGly%2BGlzOKmzOGozuKoz%2BKqz%2BOq0OOv1OWw1OWw1eWx1eWy1uay1%2Baz1%2Baz1%2Bez2Oe02Oe12ee22ujUGwH3AAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfgBQkREyOxFIh/AAAAiklEQVQI12NgAAMbOwY4sLZ2NtQ1coVKWNvoc/Eq8XDr2wB5Ig62ekza9vaOqpK2TpoMzOxaFtwqZua2Bm4makIM7OzMAjoaCqYuxooSUqJALjs7o4yVpbowvzSUy87KqSwmxQfnsrPISyFzWeWAXCkpMaBVIC4bmCsOdgiUKwh3JojLgAQ4ZCE0AMm2D29tZwe6AAAAAElFTkSuQmCC)](http://www.conan.io/source/jsoncpp/1.8.0/theirix/ci)\n\n[JSON][json-org] is a lightweight data-interchange format. It can represent\nnumbers, strings, ordered sequences of values, and collections of name/value\npairs.\n\n[json-org]: http://json.org/\n\nJsonCpp is a C++ library that allows manipulating JSON values, including\nserialization and deserialization to and from strings. It can also preserve\nexisting comment in unserialization/serialization steps, making it a convenient\nformat to store user input files.\n\n\n## Documentation\n\n[JsonCpp documentation][JsonCpp-documentation] is generated using [Doxygen][].\n\n[JsonCpp-documentation]: http://open-source-parsers.github.io/jsoncpp-docs/doxygen/index.html\n[Doxygen]: http://www.doxygen.org\n\n\n## A note on backward-compatibility\n\n* `1.y.z` is built with C++11.\n* `0.y.z` can be used with older compilers.\n* Major versions maintain binary-compatibility.\n\n## Contributing to JsonCpp\n\n### Building and testing with Meson/Ninja\nThanks to David Seifert (@SoapGentoo), we (the maintainers) now use\n[meson](http://mesonbuild.com/) and [ninja](https://ninja-build.org/) to build\nfor debugging, as well as for continuous integration (see\n[`./travis_scripts/meson_builder.sh`](./travis_scripts/meson_builder.sh) ). Other systems may work, but minor\nthings like version strings might break.\n\nFirst, install both meson (which requires Python3) and ninja.\nIf you wish to install to a directory other than /usr/local, set an environment variable called DESTDIR with the desired path:\n    DESTDIR=/path/to/install/dir\n\nThen,\n\n    cd jsoncpp/\n    BUILD_TYPE=debug\n    #BUILD_TYPE=release\n    LIB_TYPE=shared\n    #LIB_TYPE=static\n    meson --buildtype ${BUILD_TYPE} --default-library ${LIB_TYPE} . build-${LIB_TYPE}\n    #ninja -v -C build-${LIB_TYPE} test # This stopped working on my Mac.\n    ninja -v -C build-${LIB_TYPE}\n    cd build-${LIB_TYPE}\n    meson test --no-rebuild --print-errorlogs\n    sudo ninja install\n\n### Building and testing with other build systems\nSee https://github.com/open-source-parsers/jsoncpp/wiki/Building\n\n### Running the tests manually\n\nYou need to run tests manually only if you are troubleshooting an issue.\n\nIn the instructions below, replace `path/to/jsontest` with the path of the\n`jsontest` executable that was compiled on your platform.\n\n    cd test\n    # This will run the Reader/Writer tests\n    python runjsontests.py path/to/jsontest\n\n    # This will run the Reader/Writer tests, using JSONChecker test suite\n    # (http://www.json.org/JSON_checker/).\n    # Notes: not all tests pass: JsonCpp is too lenient (for example,\n    # it allows an integer to start with '0'). The goal is to improve\n    # strict mode parsing to get all tests to pass.\n    python runjsontests.py --with-json-checker path/to/jsontest\n\n    # This will run the unit tests (mostly Value)\n    python rununittests.py path/to/test_lib_json\n\n    # You can run the tests using valgrind:\n    python rununittests.py --valgrind path/to/test_lib_json\n\n### Building the documentation\n\nRun the Python script `doxybuild.py` from the top directory:\n\n    python doxybuild.py --doxygen=$(which doxygen) --open --with-dot\n\nSee `doxybuild.py --help` for options.\n\n### Adding a reader/writer test\n\nTo add a test, you need to create two files in test/data:\n\n* a `TESTNAME.json` file, that contains the input document in JSON format.\n* a `TESTNAME.expected` file, that contains a flatened representation of the\n  input document.\n\nThe `TESTNAME.expected` file format is as follows:\n\n* Each line represents a JSON element of the element tree represented by the\n  input document.\n* Each line has two parts: the path to access the element separated from the\n  element value by `=`. Array and object values are always empty (i.e.\n  represented by either `[]` or `{}`).\n* Element path `.` represents the root element, and is used to separate object\n  members. `[N]` is used to specify the value of an array element at index `N`.\n\nSee the examples `test_complex_01.json` and `test_complex_01.expected` to better understand element paths.\n\n### Understanding reader/writer test output\n\nWhen a test is run, output files are generated beside the input test files. Below is a short description of the content of each file:\n\n* `test_complex_01.json`: input JSON document.\n* `test_complex_01.expected`: flattened JSON element tree used to check if\n  parsing was corrected.\n* `test_complex_01.actual`: flattened JSON element tree produced by `jsontest`\n  from reading `test_complex_01.json`.\n* `test_complex_01.rewrite`: JSON document written by `jsontest` using the\n  `Json::Value` parsed from `test_complex_01.json` and serialized using\n  `Json::StyledWritter`.\n* `test_complex_01.actual-rewrite`: flattened JSON element tree produced by\n  `jsontest` from reading `test_complex_01.rewrite`.\n* `test_complex_01.process-output`: `jsontest` output, typically useful for\n  understanding parsing errors.\n\n## Using JsonCpp in your project\n\n### Amalgamated source\nhttps://github.com/open-source-parsers/jsoncpp/wiki/Amalgamated\n\n### The Meson Build System\nIf you are using the [Meson Build System](http://mesonbuild.com), then you can get a wrap file by downloading it from [Meson WrapDB](https://wrapdb.mesonbuild.com/jsoncpp), or simply use `meson wrap install jsoncpp`.\n\n### Other ways\nIf you have trouble, see the Wiki, or post a question as an Issue.\n\n## License\n\nSee the `LICENSE` file for details. In summary, JsonCpp is licensed under the\nMIT license, or public domain if desired and recognized in your jurisdiction.\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:jsoncpp\" ]",
      "lockFile": "manifest = \"4a0d66df90f3f99320d07676920f409753cb5d5074ec96e80122a53566ce98db\"\n\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'jsoncpp',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.h'),\n  ]),\n  srcs = glob([\n    'src/lib_json/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-22T13:59:36Z",
  "updatedUpstream": "2021-01-13T21:02:23Z",
  "contributors": [
    {
      "login": "ibc",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/16191?u=a457f638975fabeb9bda93153457cf0ed4b5e82f&v=4"
    },
    {
      "login": "bernhardHartleb",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/40348?v=4"
    },
    {
      "login": "thefloweringash",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/42933?v=4"
    },
    {
      "login": "mnaberez",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/52712?v=4"
    },
    {
      "login": "bradking",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/87268?v=4"
    },
    {
      "login": "mrjoel",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/96100?u=02e64053cbd68f6d0c61bad80d98b36b3826d5c0&v=4"
    },
    {
      "login": "bmcdorman",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/96179?u=5810d2d80df292a16d41b1fd14bf60c7838fb2c5&v=4"
    },
    {
      "login": "mathstuf",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/97253?v=4"
    },
    {
      "login": "tmaciejewski",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/99382?u=1a5c9de720ab5933fd25b31a869f5d30cfe9ff20&v=4"
    },
    {
      "login": "orivej",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/101514?v=4"
    },
    {
      "login": "jmesmon",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/103437?v=4"
    },
    {
      "login": "mgorny",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/110765?u=164647f91c473f67ad218b606ae1dbff572197b5&v=4"
    },
    {
      "login": "shields",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/134482?u=5f9b6cc656e4aa49cf911413a1eebc1c772bcc81&v=4"
    },
    {
      "login": "jacobsa",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/202895?u=7ce46e651b10207f5da8355ba8f80594d537823b&v=4"
    },
    {
      "login": "jcfr",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/219043?u=fdc648b09ebb3203e6cffa04dd160b0bd6e4f139&v=4"
    },
    {
      "login": "saschazelzer",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/219045?u=3abb425cd315e73117bd5ad2f663627778af4ba6&v=4"
    },
    {
      "login": "dgobbi",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/223404?v=4"
    },
    {
      "login": "hjmjohnson",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/313970?v=4"
    },
    {
      "login": "chuckatkins",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/320135?v=4"
    },
    {
      "login": "glehmann",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/325401?v=4"
    },
    {
      "login": "autochthe",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/333673?u=8f507571053459f93becb0fa4d70fb0a3174b387&v=4"
    },
    {
      "login": "egor-tensin",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/355889?u=6f2d3b4b574e1aea3132af693d2e280accede556&v=4"
    },
    {
      "login": "ssbr",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/356788?v=4"
    },
    {
      "login": "cquammen",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/360056?v=4"
    },
    {
      "login": "Marenz",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/424752?u=038e104b849efd16f076b671ef6c46af7073bfa7&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 5250,
  "forks": 2011,
  "topics": []
}