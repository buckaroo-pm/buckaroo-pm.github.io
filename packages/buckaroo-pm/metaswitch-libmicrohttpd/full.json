{
  "packageName": "buckaroo-pm/metaswitch-libmicrohttpd",
  "name": "Metaswitch/libmicrohttpd",
  "licence": "LGPL-2.1",
  "description": "GNU libmicrohttpd",
  "readme": "libmicrohttpd - see http://www.gnu.org/software/libmicrohttpd/\n\n+------------------+\n| METASWITCH NOTES |\n+------------------+\n\nThis repo contains the libmicrohttpd source, plus some local changes, build scripts etc.\n\nWe have 2 branches:\n- master (containing Metaswitch-changes)\n- upstream (mirror of libmicrohttpd source)\n\nTo update to a new version of libmicrohttpd:\n- git checkout upstream\n- obtain the latest libmicrohttpd-<version>.tar.gz (don't copy the SVN repo - that's missing install scripts etc)\n- replace contents of repo with contents of the tar\n- git checkout master\n- git merge upstream\n\n\n+---------------------+\n| LIBMICROHTTPD NOTES |\n+---------------------+\n\nAbout\n=====\n\nGNU libmicrohttpd is a GNU package offering a C library that provides\na compact API and implementation of an HTTP 1.1 web server (HTTP 1.0\nis also supported).  GNU libmicrohttpd only implements the HTTP 1.1\nprotocol.  The main application must still provide the application\nlogic to generate the content.\n\nAdditionally, a second, still very experimental library is provided\nfor SPDY (the base for HTTP 2.0) support.  libmicrospdy provides a\ncompact API and implementation of SPDY server. libmicrospdy currently\nonly implements partially version 3 of SPDY.\n\n\nInstallation\n============\n\nIf you are using Subversion, run \"autoreconf -fi\" to create configure.\n\nIn order to run the testcases, you need a recent version of libcurl.\nlibcurl is not required if you just want to install the library.\n\nEspecially for development, do use the MHD_USE_DEBUG option to get\nerror messages.\n\n\nRequirements for libmicrospdy\n=============================\n\nThe following packages are needed to build libmicrospdy:\n\n* zlib \n* OpenSSL >= 1.0.1\n\nTo run the test cases, involving requests, version of Spdylay, supporting\nSPDY v3, is required. Spdylay is still under development and can be\nfound here:\n\nhttp://spdylay.sourceforge.net/\n\n\nConfigure options\n=================\n\n\nIf you are concerned about space, you should set \"CFLAGS\" to \"-Os\n-fomit-frame-pointer\" to have gcc generate tight code.\n\nYou can use the following options to disable certain MHD features:\n\n--disable-https: no HTTPS / TLS / SSL support (significant reduction)\n--disable-messages: no error messages (they take space!)\n--disable-postprocessor: no MHD_PostProcessor API\n--disable-dauth: no digest authentication API\n--disable-epoll: no support for epoll, even on Linux\n\nThe resulting binary should be about 30-40k depending on the platform.\n\n\nPortability\n===========\n\nThe latest version of libmicrohttpd will try to avoid SIGPIPE on its\nsockets.  This should work on OS X, Linux and recent BSD systems (at\nleast).  On other systems that may trigger a SIGPIPE on send/recv, the\nmain application should install a signal handler to handle SIGPIPE.\n\nlibmicrohttpd should work well on GNU/Linux, BSD, OS X, W32 and z/OS.\nNote that HTTPS is not supported on z/OS (yet).  We also have reports\nof users using it on vxWorks and Symbian.  Note that on platforms\nwhere the compiler does not support the \"constructor\" attribute, you\nmust call \"MHD_init\" before using any MHD functions and \"MHD_fini\"\nafter you are done using MHD.\n\n\nDevelopment Status\n==================\n\nThis is a beta release for libmicrohttpd.  Before declaring the\nlibrary stable, we should implement support for HTTP \"Upgrade\" \nrequests and have testcases for the following features:\n\n- HTTP/1.1 pipelining (need to figure out how to ensure curl pipelines \n  -- and it seems libcurl has issues with pipelining, \n  see http://curl.haxx.se/mail/lib-2007-12/0248.html)\n- resource limit enforcement\n- client queuing early response, suppressing 100 CONTINUE\n- chunked encoding to validate handling of footers\n- more testing for SSL support\n- MHD basic and digest authentication\n\nIn particular, the following functions are not covered by 'make check':\n- mhd_panic_std (daemon.c); special case (abort)\n- parse_options (daemon.c)\n- MHD_set_panic_func (daemon.c)\n- MHD_get_version (daemon.c)\n\n\nThis is an early alpha release for libmicrospdy.  The following things\nshould be implemented (in order of importance) before we can claim to\nbe reasonably complete:\n- 8 different output queues (one for each priority) have to be implemented\ntogether with a suitable algorithm for utilizing them. Otherwise, downloading\na file will block all responses with same or smaller priority\n- SPDY RST_STREAM sending on each possible error (DONE?)\n- SPDY_close_session\n- Find the best way for closing still opened stream (new call or existing)\n- SPDY_is_stream_opened\n- SPDY PING (used often by browsers)\n- receiving SPDY WINDOW_UPDATE\n- SPDY Settings\n- SPDY PUSH\n- SPDY HEADERS\n- SPDY Credentials\n\nAdditional ideas for features include:\n- Individual callbacks for each session\n- Individual timeout for each session\n\nUnimplemented API functions of libmicrospdy:\n- SPDY_settings_create ();\n- SPDY_settings_add (...);\n- SPDY_settings_lookup (...);\n- SPDY_settings_iterate (...);\n- SPDY_settings_destroy (...);\n- SPDY_close_session(...);\n- SPDY_send_ping(...);\n- SPDY_send_settings (...);\n\nIn particular, we should write tests for:\n- Enqueueing responses while considering request priorities.\n- HTTP methods other than GET\n\n\n\n\n\nMissing documentation:\n======================\n\n- libmicrospdy manual:\n  * missing entirely\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:microhttpd\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\nversion = \"branch=master\"\n",
      "lockFile": "manifest = \"132d8f4d46f4d0668c7da6798654711f4e69f17a295052ecb33ec02aca50e84b\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\ntarget = \"//:pthread\"\n\n[lock.\"github.com/buckaroo-pm/host-pthread\"]\nversions = [ \"branch=master\" ]\nrevision = \"a62519aa69c8e3243d6065fbf4c1d2de072f86f6\"\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps_from_package')\nload('//:subdir_glob.bzl', 'subdir_glob')\nload('//:extract.bzl', 'extract')\n\npthread = buckaroo_deps_from_package('github.com/buckaroo-pm/host-pthread')\n\ngenrule(\n  name = 'configure',\n  out = 'out',\n  srcs = glob([\n    'install-sh',\n    'ltmain.sh',\n    '*.in',\n    'missing',\n    'configure',\n    'config.*',\n    'contrib/**/*.in',\n    'doc/**/*.in',\n    'm4/**/*.in',\n    'src/**/*.in',\n    'src/**/*.rc',\n    'w32/**/*.in',\n    'w32/**/*.rc',\n  ]),\n  cmd = ' && '.join([\n    'mkdir -p $OUT',\n    'cd $OUT',\n    'sh $SRCDIR/configure --srcdir=$SRCDIR --disable-doc --disable-examples --without-gnutls',\n  ])\n)\n\ncxx_library(\n  name = 'microhttpd',\n  header_namespace = '',\n  exported_headers = dict(\n    subdir_glob([\n      ('src/include', '**/*.h'),\n    ]).items() + [\n      ('MHD_config.h', extract(':configure', 'MHD_config.h')),\n    ]\n  ),\n  srcs = glob([\n    'src/microhttpd/**/*.c',\n  ], exclude = glob([\n    'src/microhttpd/**/*_https.c',\n    'src/microhttpd/**/test_*.c',\n  ])),\n  platform_deps = [\n    ('linux.*', pthread),\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n\nprebuilt_cxx_library(\n  name = 'magic',\n  header_only = True,\n  exported_linker_flags = [\n    '-lmagic',\n  ],\n)\n\ncxx_binary(\n  name = 'demo',\n  srcs = [\n    'src/examples/demo.c',\n  ],\n  deps = [\n    '//:microhttpd',\n    ':magic',\n  ],\n)\n",
      "bazel": "",
      "deps": [
        {
          "uri": "github.com/buckaroo-pm/host-pthread",
          "name": "buckaroo-pm/host-pthread",
          "version": "branch=master"
        }
      ],
      "lock": [
        {
          "uri": "github.com/buckaroo-pm/host-pthread",
          "name": "buckaroo-pm/host-pthread",
          "spec": {
            "versions": [
              "branch=master"
            ],
            "revision": "a62519aa69c8e3243d6065fbf4c1d2de072f86f6"
          }
        }
      ]
    }
  ],
  "updated": "2019-01-23T14:36:58Z",
  "updatedUpstream": "2017-07-31T09:39:47Z",
  "contributors": [
    {
      "login": "richardwhiuk",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/346165?v=4"
    },
    {
      "login": "kw217",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/587036?v=4"
    },
    {
      "login": "markberry",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/625647?v=4"
    },
    {
      "login": "cstedman",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/625677?v=4"
    },
    {
      "login": "salihsuavi",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/894446?v=4"
    },
    {
      "login": "bossmc",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/1073983?v=4"
    },
    {
      "login": "PiersFinlaysonMsw",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/1447718?u=02ed4e506b2505fca6da4d073fb6c5499de5de49&v=4"
    },
    {
      "login": "aeithurrell",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1478988?v=4"
    },
    {
      "login": "rainbowFi",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/2848753?u=c2618f14f37827821b96fb2d2d163506277860ff&v=4"
    },
    {
      "login": "nicholasjbaker-zz",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/3668814?v=4"
    },
    {
      "login": "rkd-msw",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/4363492?u=ff3fcac6d896d05b35eb4927ba3547c009ccfbf0&v=4"
    },
    {
      "login": "eleanor-merry",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/5425325?v=4"
    },
    {
      "login": "sgdavies",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/5764755?v=4"
    },
    {
      "login": "eepyaich",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/6351761?u=d52295f106768fcc03140dee17b07dee8fcd99c4&v=4"
    },
    {
      "login": "benritchie",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/8005676?v=4"
    },
    {
      "login": "huws",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/8257630?v=4"
    },
    {
      "login": "rowenasmithlamkin",
      "avatarUrl": "https://avatars1.githubusercontent.com/u/9535882?v=4"
    },
    {
      "login": "mickeyarnold",
      "avatarUrl": "https://avatars3.githubusercontent.com/u/9715993?v=4"
    },
    {
      "login": "c-e-wright",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/9715998?v=4"
    },
    {
      "login": "NigelThorpe",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/11216017?u=0b8225ab1cab8358db47cdb9b354866fe10d9966&v=4"
    },
    {
      "login": "cswindle",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/16157454?v=4"
    },
    {
      "login": "cdlund",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/20129856?v=4"
    },
    {
      "login": "sathiyan-sivathas",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/20167729?v=4"
    },
    {
      "login": "Catherine-Ford",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/22003053?v=4"
    },
    {
      "login": "bm4",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/24314218?v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 5,
  "forks": 7,
  "topics": []
}