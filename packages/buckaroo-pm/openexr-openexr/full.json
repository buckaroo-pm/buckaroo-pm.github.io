{
  "packageName": "buckaroo-pm/openexr-openexr",
  "name": "njlr/openexr",
  "licence": "NOASSERTION",
  "description": "OpenEXR is a high dynamic-range (HDR) image file format developed by Industrial Light & Magic for use in computer imaging applications",
  "readme": "OpenEXR\n=======\n\n**OpenEXR** is a high dynamic-range (HDR) image file format developed\nby Industrial Light & Magic (ILM) for use in computer imaging\napplications. It supports stereoscopic and deep images.  Weta Digital,\nWalt Disney Animation Studios, Sony Pictures Imageworks, Pixar\nAnimation Studios, DreamWorks, and other studios, companies, and\nindividuals have made contributions to the code base. The file format\nhas seen wide adoption in a number of industries.\n\nOpenEXR's features include:\n\n* Higher dynamic range and color precision than existing 8- and 10-bit\n  image file formats.\n* Support for 16-bit floating-point, 32-bit floating-point, and\n  32-bit integer pixels. The 16-bit floating-point format, called \"half\",\n  is compatible with the half data type in NVIDIA's Cg graphics language\n  and is supported natively on their GPUs.\n* Multiple image compression algorithms, both lossless and lossy. Some of\n  the included codecs can achieve 2:1 lossless compression ratios on images\n  with film grain.  The lossy codecs have been tuned for visual quality and\n  decoding performance.\n* Extensibility. New compression codecs and image types can easily be added\n  by extending the C++ classes included in the OpenEXR software distribution.\n  New image attributes (strings, vectors, integers, etc.) can be added to\n  OpenEXR image headers without affecting backward compatibility with\n  existing OpenEXR applications. \n* Support for stereoscopic image workflows and a generalization\n  to multi-views.\n* Flexible support for deep data: pixels can store a variable-length list\n  of samples and, thus, it is possible to store multiple values at different\n  depths for each pixel. Hard surfaces and volumetric data representations\n  are accommodated.\n* Multipart: ability to encode separate, but related, images in one file.\n  This allows for access to individual parts without the need to read other\n  parts in the file.\n* Versioning: OpenEXR source allows for user configurable C++\n  namespaces to provide protection when using multiple versions of the\n  library in the same process space.\n\nLicense\n-------\n\nOpenEXR, including all contributions, is released under a modified BSD\nlicense. Please see the ``LICENSE`` file accompanying the distribution\nfor the legal fine print.\n      \nOpenEXR Sub-modules\n-------------------\n\nThe OpenEXR distribution consists of the following sub-modules:\n\n* **IlmBase** - Utility libraries from Industrial Light & Magic: Half, Imath, Iex, IlmThread.\n* **PyIlmBase** - Python bindings for the IlmBase libraries.\n* **OpenEXR** - The core image library.\n* **OpenEXR_Viewers** - Standard image viewing programs\n* **Contrib** - Various plugins and utilities, contributed by the community.\n    \nPlease see the ``README`` files of each of the individual directories for more information.\n\nA collection of OpenEXR images is available from the adjacent repository\n[openexr-images](https://github.com/openexr/openexr-images).\n\nDependencies\n------------\n\nOpenEXR depends on [zlib](https://zlib.net).\n\nPyIlmBase depends on [boost-python](https://github.com/boostorg/python) and\noptionally on [numpy](http://www.numpy.org).\n\nIn OpenEXR_Viewers:\n\n* **exrdisplay** depends on [fltk](http://www.fltk.org/index.php)\n* **playexr** depends on [Cg](https://developer.nvidia.com/cg-toolkit)\n\nWeb Resources\n-------------\n\nMain web page: http:://www.openexr.org\n\nGitHub repository: http://www.github.com/openexr\n\nMail lists:\n\n* **http://lists.nongnu.org/mailman/listinfo/openexr-announce** - OpenEXR-related announcements.\n\n* **http://lists.nongnu.org/mailman/listinfo/openexr-user** - for discussion about OpenEXR applications or general questions.\n\n* **http://lists.nongnu.org/mailman/listinfo/openexr-devel** - for developers using OpenEXR in their applications.\n\nBuilding and Installation\n-------------------------\n\nDownload the latest release of OpenEXR from\nhttp://www.openexr.com/downloads.html.\n\nTo build the OpenEXR binaries from source, compile and install the\nindividual sub-models (IlmBase, PyIlmBase, OpenEXR, OpenEXR_Viewers),\naccording to the instructions in the respective ``README``\nfiles. Build and install the IlmBase module first, then build and\ninstall the OpenEXR module. Optionally, then build and install\nPyIlmBase, OpenEXR_Viewers, and Contrib.\n\nFor the basic installation:\n\n    cd <source root>/IlmBase\n    ./configure\n    make\n    make install\n\n    cd <source root>/OpenEXR\n    ./configure\n    make \n    make install\n\nSee the module ``README`` files for options to ``configure``.\n\n#### Building from Git\n\nAlternatively, you can download the latest release or the lastest\ndevelopment branch directly from http://github.com/openexr.\n\nAfter cloning the repo locally, generate the configuration scripts by\nrunning the ``bootstrap`` script:\n\n    cd <source root>/IlmBase\n    ./bootstrap\n    ./configure\n    make\n    make install\n\n    cd <source root>/OpenExr\n    ./bootstrap\n    ./configure\n    make\n    make install\n\nBuilding from git and ``bootstrap`` requires that **autoconf** is\ninstalled.  Download and install it from\nhttps://www.gnu.org/software/autoconf/autoconf.html.\n\n#### Building with CMake\n\nAlternatively, you can build with **cmake**, version 3.11 or newer. \n\nIn the root ``CMakeLists.txt`` file, with -D options on the cmake\nline, or by using a tools such as **ccmake** or **cmake-gui**,\nconfigure the OpenEXR build. The options are detailed below.\n\nCreate a source root directory, cd into it, and run **cmake** to configure\nthe build.  Select an appropriate generator, such as \"Unix Makefiles\",\nor \"Visual Studio 15 2017 Win64\". Then run **make** a the root\ndirectory; this will build the appropriate submodules, according to\nthe settings of the **cmake** options, described below.\n\n    cmake -DCMAKE_INSTALL_PREFIX=<install location> <OpenEXR source root> -G \"selected generator\" -DCMAKE_PREFIX_PATH=<paths to dependencies - zlib etc>\n    make\n\nThe available options are:\n\n* ``OPENEXR_BUILD_ILMBASE`` (ON)\nBy default, IlmBase is always built.\n\n* ``OPENEXR_BUILD_OPENEXR`` (ON)\nBy default, OpenEXR is always built.\n\n* ``OPENEXR_BUILD_PYTHON_LIBS`` (ON)\nBy default, the Python bindings will be built.\n\n* ``OPENEXR_BUILD_VIEWERS`` (OFF)\nBy default, the viewers are not built, as they have not been updated for\nmodern OpenGL.\n\n* ``OPENEXR_BUILD_SHARED`` (ON)\n* ``OPENEXR_BUILD_STATIC`` (OFF)\nThe build can be configured to create either shared libraries, or static \nlibraries, or both.\n\n* ``OPENEXR_NAMESPACE_VERSIONING`` (ON)\nOpenEXR symbols will be contained within a namespace\n\n* ``OPENEXR_FORCE_CXX03`` (OFF)\nC++03 compatibility is possible as an option\n\n* ``OPENEXR_ENABLE_TESTS`` (ON)\nBy default, the tests will be built.\n\n* ``OPENEXR_RUN_FUZZ_TESTS`` (OFF)\nBy default, the damaged input tests will NOT be run, due to their long\nrunning time. If you wish to run them as part of \"make test\" (or equivalent\nin your build system), then enable this. A \"make fuzz\" target will be\navailable to run the fuzz test regardless.\n\n* ``OPENEXR_PYTHON_MAJOR``, ``OPENEXR_PYTHON_MINOR`` \"2\", \"7\"\nBy default, OpenEXR is built against Python 2.7.x.\n\n## Documentation\n\nDocumentation is available at http://www.openexr.com/documentation.html.\n\n",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//OpenEXR:openexr\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\nversion = \"branch=master\"\n",
      "lockFile": "manifest = \"b3d2c34b28bf9b1fc68abdfe152995d5574a490ae55685cae6004447ba25a29d\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\ntarget = \"//:pthread\"\n\n[[lock]]\nname = \"github.com/buckaroo-pm/host-pthread\"\nversion = \"branch=master\"\nrevision = \"a62519aa69c8e3243d6065fbf4c1d2de072f86f6\"\n",
      "buck": "",
      "bazel": "",
      "deps": [
        {
          "uri": "github.com/buckaroo-pm/host-pthread",
          "name": "buckaroo-pm/host-pthread",
          "version": "branch=master"
        }
      ],
      "lock": [
        {
          "uri": "0",
          "name": "0",
          "spec": {
            "name": "github.com/buckaroo-pm/host-pthread",
            "version": "branch=master",
            "revision": "a62519aa69c8e3243d6065fbf4c1d2de072f86f6"
          }
        }
      ]
    }
  ],
  "updated": "2019-11-21T16:46:18Z",
  "updatedUpstream": "2019-11-21T16:46:11Z",
  "contributors": [
    {
      "login": "njlr",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1577531?u=b805a63f8054b62169749f2c9d2e89eb53af57d7&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 0,
  "forks": 1,
  "topics": []
}