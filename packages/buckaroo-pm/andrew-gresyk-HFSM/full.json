{
  "packageName": "buckaroo-pm/andrew-gresyk-HFSM",
  "name": "andrew-gresyk/HFSM",
  "licence": "MIT",
  "description": "Hierarchical Finite State Machine Framework",
  "readme": "[![Standard](https://img.shields.io/badge/c%2B%2B-14/17/20-blue.svg)](https://en.wikipedia.org/wiki/C%2B%2B#Standardization)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Build status](https://ci.appveyor.com/api/projects/status/49gona9jtghvvi6g?svg=true)](https://ci.appveyor.com/project/andrew-gresyk/hfsm)\n[![Build Status](https://travis-ci.org/andrew-gresyk/HFSM.svg?branch=master)](https://travis-ci.org/andrew-gresyk/HFSM)\n\n# HFSM (Hierarchical Finite State Machine) Framework\n\nHeader-only heriarchical FSM framework in C++14, completely static (no dynamic allocations), built with variadic templates.\n\n## Compiler Support\n\nDEPRECATED, FURTHER DEVELOPMENT CONTINUES IN [HFSM2](https://github.com/andrew-gresyk/HFSM2)\n\n## Compiler Support\n\n- Visual Studio 14.u3, 15.7\n- GCC 4.9, 5.4, 6.3, 7.3, 8.0\n- Clang 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 6.0\n\n---\n\n## Basic Usage\n\n```cpp\n// 1. Include HFSM header:\n#include <hfsm/machine_single.hpp>\n\n// 2. Define interface class between the FSM and its owner\n//    (also ok to use the owner object itself):\nstruct Context { /* ... */ };\n\n// 3. (Optional) Typedef hfsm::Machine for convenience:\nusing M = hfsm::Machine<OwnerClass>;\n\n// 4. Define states:\nstruct MyState1 : M::Bare {\n    // 5. Override some of the following state functions:\n    void enter(Context& _);\n    void update(Context& _);\n    void transition(Control& c, Context& _);\n    void leave(Context& _);\n};\n\nstruct MyState2 : M::Bare { /* .. */ };\nstruct MySubState1 : M::Bare { /* .. */ };\nstruct MySubState2 : M::Bare { /* .. */ };\n\nstruct MyState3 : M::Bare { /* .. */ };\nstruct MyOrthogonalState1 : M::Bare { /* .. */ };\nstruct MyOrthogonalState2 : M::Bare { /* .. */ };\n\n// 6. Declare state machine structure:\nusing MyFSM = M::PeerRoot<\n    MyState1,\n    M::Composite<MyState2,\n        MySubState1,\n        MySubState2,\n    >,\n    M::Orthogonal<MyState3,\n        MyOrthogonalState1,\n        MyOrthogonalState2,\n    >\n>;\n\nint main() {\n    // 7. Create context and state machine instances:\n    Context context;\n    MyFSM fsm(context);\n\n    // 8. Kick off periodic updates:\n    bool running = true;\n    while (running)\n        fsm.update();\n\n    return 0;\n}\n```\n\n---\n\n## Feature Highlights\n\n- Permissive [MIT License](LICENSE.md)\n- Written in widely-supported modern(ish) C++ 14\n- 100% NoUML-compliant\n- Not hamstrung by restrictive event reaction-based approach, but supports powerful event handling\n- Hierarchical, with composite (sub-machine) and orthogonal regions\n- Header-only\n- Fully static, no dynamic allocations\n- Uses inline-friendly compile-time pylymorphism, no virtual methods were harmed\n- Type-safe transitions: `FSM.changeTo<TargetState>()`\n- Gamedev-friendly, supports explicit `State::update()`\n- Scaleable, supports state re-use via state injections\n- Debug-assisted, includes automatic structure and activity visualization API with `#define HFSM_ENABLE_STRUCTURE_REPORT`\n- Convenient, minimal boilerplate\n\n---\n\n## Documentation\n\nSee [Wiki](../../wiki) for [Tutorial](../../wiki/Tutorial) and docs.\n\n---\n\n## Get Updates\n\n- [Blog](https://andrew-gresyk.github.io/)\n- [Twitter](https://www.twitter.com/andrew_gresyk)\n\n---\n\n## Special Thanks\n\n- [Phil Nash](https://github.com/philsquared)\n- [Romain Cheminade](https://github.com/romaincheminade)\n- [Tristan Brindle](https://github.com/tcbrindle)\n- [Kevin Greene](https://github.com/kgreenek)\n- everybody at [C++::London](https://www.meetup.com/CppLondon/) meetup\n- programming community at [Splash Damage](http://www.splashdamage.com/)",
  "versions": [
    {
      "ref": "master",
      "manifest": "targets = [ \"//:hfsm\" ]",
      "lockFile": "manifest = \"148fc78f22d2e072724e3642d5900ca0f8ab275bd973852f7780783bb34d0e88\"\n\n",
      "buck": "load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\nprebuilt_cxx_library(\n  name = 'hfsm',\n  header_only = True,\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.inl'),\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n",
      "bazel": "",
      "deps": [],
      "lock": []
    }
  ],
  "updated": "2019-01-18T14:43:59Z",
  "updatedUpstream": "2020-12-30T07:24:04Z",
  "contributors": [
    {
      "login": "kgreenek",
      "avatarUrl": "https://avatars2.githubusercontent.com/u/1295700?u=120b47d030848f9165e3b118ce01a7462e575fa5&v=4"
    },
    {
      "login": "andrew-gresyk",
      "avatarUrl": "https://avatars0.githubusercontent.com/u/8378860?u=5ec9c78088a731e8bdc9099245b20c2cdff0f565&v=4"
    }
  ],
  "fundingLinks": [],
  "contactLinks": [],
  "stars": 64,
  "forks": 24,
  "topics": [
    "hfsm",
    "fsm",
    "fsm-library",
    "modern-cpp",
    "cpp11",
    "cpp14",
    "cpp-library",
    "mit-license"
  ]
}