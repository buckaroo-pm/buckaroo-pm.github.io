_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[32],{"83Tm":function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return m})),t.d(a,"default",(function(){return u}));var n=t("rePB"),c=t("Ff2n"),o=(t("q1tI"),t("7ljp")),s=t("ZDfL");function p(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?p(Object(t),!0).forEach((function(a){Object(n.a)(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}var m={title:"value_ptr\u200a\u2014\u200aThe Missing C++ Smart-pointer",created:"2019-02-21T00:00:00.000Z",author:"Team Buckaroo",summary:"The C++ standard library is missing a smart-pointer! Use value_ptr to get value semantics on a heap resource. At the cost of some extra copying, your code will be simpler and easier to reason about.",banner:"https://images.unsplash.com/photo-1583320975624-d099f8c042f6?ixid=MXwxMjA3fDB8MHxzZWFyY2h8Mnx8dmFsdWV8ZW58MHwwfDB8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",__resourcePath:"blog/value-ptr-the-missing-smart-ptr.md",__scans:{},layout:"index"},N={frontMatter:m},l=s.a;function u(e){var a=e.components,t=Object(c.a)(e,["components"]);return Object(o.a)(l,r(r(r({},N),t),{},{components:a,mdxType:"MDXLayout"}),Object(o.a)("h2",null,"TL;DR"),Object(o.a)("p",null,"Use the ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," smart-pointer to get value semantics on a heap resource. At the cost of some extra copying, your code will be simpler and easier to reason about."),Object(o.a)("p",null,"Choose which smart-pointer to use with this cheat-sheet."),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",r({parentName:"tr"},{align:null}),"Name"),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"unique_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"shared_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"weak_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"value_ptr")))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Ownership"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Unique"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Shared"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Unique")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Copyable"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Movable"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Sharing"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Value")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lifetime"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lexical"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference-counted"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Non-extending"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lexical")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Optional-reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Value")))),Object(o.a)("p",null,"An implementation of ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," can be ",Object(o.a)("a",r({parentName:"p"},{href:"https://github.com/LoopPerfect/valuable"}),"found on GitHub"),"."),Object(o.a)("h2",null,"Introduction"),Object(o.a)("p",null,"Language features like templates, lambdas and lexically-scoped destructors empower C++ programmers to write higher-order containers to handle an object\u2019s lifetime and side-effects, documenting them in an understandable way in the type-system."),Object(o.a)("p",null,"With smart-pointers, encoding ownership semantics and managing resources has never been easier. We can find smart-pointers in the standard library for the most common use-cases, however none of these smart-pointers provides value semantics. This article will introduce the ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr"),", alongside some motivating examples."),Object(o.a)("p",null,"But first, let\u2019s take a look at the functionality that the C++ 11 standard library already offers:"),Object(o.a)("h3",null,"(Dumb) Raw Pointers"),Object(o.a)("p",null,"Yes, raw pointers can be still used, but you should avoid them if a smart-pointer is applicable. This is because raw pointers do not convey any information about a resource\u2019s ownership model."),Object(o.a)("p",null,"Furthermore, allocation and deallocation must be managed by the programmer, which may lead to bugs like double-delete or memory-leaks."),Object(o.a)("p",null,"Take a look at this code:"),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"*")," x ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"createInstance"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"*")," y ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"new")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\nfoo",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"bar"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"y",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"From just three lines, there are so many unanswered questions:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Can ",Object(o.a)("inlineCode",{parentName:"li"},"x")," be ",Object(o.a)("inlineCode",{parentName:"li"},"nullptr")," and do I have to check?"),Object(o.a)("li",{parentName:"ul"},"Is ",Object(o.a)("inlineCode",{parentName:"li"},"x")," managed? Can I delete ",Object(o.a)("inlineCode",{parentName:"li"},"x"),"? ",Object(o.a)("em",{parentName:"li"},"Must")," I delete ",Object(o.a)("inlineCode",{parentName:"li"},"x"),"?"),Object(o.a)("li",{parentName:"ul"},"If I delete ",Object(o.a)("inlineCode",{parentName:"li"},"y")," before ",Object(o.a)("inlineCode",{parentName:"li"},"foo"),", is ",Object(o.a)("inlineCode",{parentName:"li"},"foo")," still valid?"),Object(o.a)("li",{parentName:"ul"},"If ",Object(o.a)("inlineCode",{parentName:"li"},"foo")," gets destroyed, will ",Object(o.a)("inlineCode",{parentName:"li"},"y")," be deleted?")),Object(o.a)("p",null,"Used correctly, a smart-pointer makes these clear."),Object(o.a)("h3",null,"unique_ptr"),Object(o.a)("p",null,Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr")," manages the lifetime of an resource by taking sole ownership of it and binding that to its lexical scope. While copying is not possible, the ownership can be transferred via ",Object(o.a)("inlineCode",{parentName:"p"},"std::move"),"."),Object(o.a)("p",null,"Use ",Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr")," when:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"You want to tie the lifetime of a heap resource to a lexical scope"),Object(o.a)("li",{parentName:"ul"},"You want to enforce that the resource only has one owner at a time")),Object(o.a)("h4",null,"Example"),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Widget")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Widget"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{")," cout ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"Widget created"')," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," endl",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Widget"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{")," cout ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"Widget destroyed"')," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," endl",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\nunique_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Widget",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"createWindow"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," make_unique",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Widget",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"main"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"auto")," w ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"createWindow"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"ASSERT"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"w",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// auto w2 = widget;"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// The above would error,"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//   unique_ptr has no copy-constructor"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"auto")," w3 ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"move"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"widget",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// w3 now owns the widget, w is empty"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"ASSERT"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"w3 ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&&")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"!"),"w",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// w3 calls destructor of widget;"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//   only one object at a time owns the Widget"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",r({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("h3",null,"shared_ptr"),Object(o.a)("p",null,Object(o.a)("inlineCode",{parentName:"p"},"shared_ptr")," allows for multiple resource owners by counting the number of references under management. The container\u2019s copy-constructor increments the counter and decrements it on destruction. If the counter hits zero, then the resource will be disposed."),Object(o.a)("p",null,"Use ",Object(o.a)("inlineCode",{parentName:"p"},"shared_ptr")," when:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"You want to share ownership between multiple references"),Object(o.a)("li",{parentName:"ul"},"You want to dispose of a resource automatically when it is no longer used"),Object(o.a)("li",{parentName:"ul"},"You don\u2019t have cyclic dependencies"),Object(o.a)("li",{parentName:"ul"},"The overhead of reference counting is acceptable")),Object(o.a)("h4",null,"Example"),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Texture")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Texture"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"string ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," path",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    cout ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"Texture loaded from "')," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," path ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," endl",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Texture"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    cout ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"Texture destroyed"')," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<<")," endl",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"static")," shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Texture",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"load"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"string ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," path",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," make_shared",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Texture",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"path",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// These functions will take a copy"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//   and increment the counter."),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// Using const& would not increment the ref-counter."),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"doSomething"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Texture",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const")," tex",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"doSomethingElse"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Texture",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const")," tex",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"void")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"foo"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Texture",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," tex ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"="),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Texture"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"load"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"textures/my_texture.png"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"thread"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"doSthWithTexture",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),",")," tex",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"detach"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"thread"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"doSthMoreWithTexture",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),",")," tex",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"detach"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("h3",null,"weak_ptr"),Object(o.a)("p",null,"We saw that we can use ",Object(o.a)("inlineCode",{parentName:"p"},"shared_ptr")," with multiple owners, but what happens if we have cycles in the ownership graph? In this case, we would leak memory as the reference counter would never hit zero! The owners in the cycle would keep each-other alive."),Object(o.a)("p",null,"This is where ",Object(o.a)("inlineCode",{parentName:"p"},"weak_ptr")," comes into play. ",Object(o.a)("inlineCode",{parentName:"p"},"weak_ptr")," is like ",Object(o.a)("inlineCode",{parentName:"p"},"shared_ptr")," but it does not increment the reference counter. If you replace the cycle-branch in your ownership graph with a ",Object(o.a)("inlineCode",{parentName:"p"},"weak_ptr"),", then reference counting will work correctly."),Object(o.a)("h4",null,"Example"),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Node")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  string name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  weak_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," parent",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  vector",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">>")," children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"bool")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"hasParent"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," parent",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"expired"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"getParent"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," parent",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"lock"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// If hasParent()"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//  then return shared_ptr from parent"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//  else nullptr"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"addChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," node",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"if"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"node",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"hasParent"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"throw")," ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"node already belongs to a parent"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n    children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"emplace_back"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"node",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n    node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),"parent ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"this"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"this"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"removeChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"unsigned")," i",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),"parent",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"reset"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// Remove parent;"),"\n    children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"erase"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&"),"children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"this"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"static")," shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"create"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"string ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," make_shared",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\nshared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"createTree"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," root ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Node"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"create"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"root"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," foo ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Node"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"create"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"foo"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," bar ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Node"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"create"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"bar"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  shared_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Node",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," baz ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Node"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"create"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"baz"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  root\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"addChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"foo",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"addChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"bar",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  bar",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"addChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"baz",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," root",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"main"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"auto")," tree ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"createTree"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"auto")," baz ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),"children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",r({parentName:"code"},{className:"token number"}),"1"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),"children",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",r({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"removeChild"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token number"}),"1"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// Remove bar"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"ASSERT"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"baz",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"hasParent"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"==")," ",Object(o.a)("span",r({parentName:"code"},{className:"token boolean"}),"false"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// If parent would be a shared_ptr,"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//   then bar and baz would keep"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"//   each-other alive forever."),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",r({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("p",null,"Use ",Object(o.a)("inlineCode",{parentName:"p"},"weak_ptr")," when:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"You absolutely must have a cyclic ownership graph")),Object(o.a)("h2",null,"Introducing value_ptr"),Object(o.a)("p",null,"Value semantics make your code easier to reason about because unlike pointers, ownership must be strictly hierarchical and exclusive."),Object(o.a)("p",null,Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," allows us to enforce those semantics on a copyable resource on the heap."),Object(o.a)("h3",null,"How it Works"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("inlineCode",{parentName:"li"},"value_ptr")," has exclusive ownership of a resource on the heap."),Object(o.a)("li",{parentName:"ul"},"When you assign one value_ptr to another, a new ",Object(o.a)("inlineCode",{parentName:"li"},"value_ptr")," object is constructed that points to its own copy of the previous ",Object(o.a)("inlineCode",{parentName:"li"},"value_ptr"),"\u2019s resource."),Object(o.a)("li",{parentName:"ul"},"The resource is destroyed when the ",Object(o.a)("inlineCode",{parentName:"li"},"value_ptr")," leaves its lexical scope."),Object(o.a)("li",{parentName:"ul"},"No memory is shared, so ",Object(o.a)("inlineCode",{parentName:"li"},"value_ptr")," is inherently thread-safe."),Object(o.a)("li",{parentName:"ul"},"A modern compiler is smart enough to remove most redundant copies.")),Object(o.a)("h4",null,"Example 1\u200a\u2014\u200aRecursive Data Types"),Object(o.a)("p",null,"Recursive types like trees must be implemented via a pointer in C++ so the layout in memory can be computed at compile-time. However, despite using a pointer, we might still want the simplicity of value-semantics:"),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Tree")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  string ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const")," name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," left",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," right",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Tree"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"\n    string ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),","),"\n    value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," left ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),","),"\n    value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," right ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Tree",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),":")," name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"name",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),",")," left",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"left",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),",")," right",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"right",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"main"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  Tree root ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," Tree",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"root"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),","),"\n      Tree",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"l0"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n      Tree",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token string"}),'"r0"'),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  root",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),"left ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," root",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// Copy of root assigned to left"),"\n  root",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"."),"right ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," root",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// and we don't have cyclic references"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("h4",null,"Example 2\u200a\u2014\u200aThe PImpl Pattern"),Object(o.a)("p",null,"Sometimes we want to separate the interface of a class from its implementation. This might be to hide code behind a compiled library, or to enforce a constant stack-size."),Object(o.a)("p",null,"Since the lifetime is bound to the owner, a smart-pointer is appropriate here, but what semantics do we want to have? Unlike ",Object(o.a)("inlineCode",{parentName:"p"},"shared_ptr")," and ",Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr"),", ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," gives us value semantics."),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Foo")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"bar"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"bar"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," x",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token comment"}),"// Thanks to value_ptr we get value semantics for free"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"Foo ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"default"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  Foo",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"="),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),"Foo ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"&"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"default"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"default"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Pimpl"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n  value_ptr",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"<"),"Pimpl",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),">")," ptr",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,Object(o.a)("em",{parentName:"p"},"Header")),Object(o.a)("pre",r({},{className:"language-cpp"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),":"),Object(o.a)("span",r({parentName:"code"},{className:"token base-clause"}),Object(o.a)("span",r({parentName:"span"},{className:"token operator"}),":"),Object(o.a)("span",r({parentName:"span"},{className:"token class-name"}),"Pimpl"))," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," x",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"bar"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"++"),"x",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",r({parentName:"code"},{className:"token class-name"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"Foo"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",r({parentName:"code"},{className:"token keyword"}),"int")," x",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),")"),"\n  ",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),":")," ptr",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"Foo",Object(o.a)("span",r({parentName:"code"},{className:"token operator"}),"::"),"Pimpl",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),"x",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",r({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("p",null,Object(o.a)("em",{parentName:"p"},"Translation-unit")),Object(o.a)("h5",null,"More Resources About the PImpl Pattern"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",r({parentName:"li"},{href:"http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html"}),"PImpl, Rule of Zero and Scott Meyers")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",r({parentName:"li"},{href:"http://www.gotw.ca/gotw/028.htm"}),"The Fast PImpl Idiom")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",r({parentName:"li"},{href:"https://anteru.net/blog/2009/03/14/385/"}),"PImpl You C++ Code"))),Object(o.a)("h2",null,"Implementing value_ptr"),Object(o.a)("p",null,"You might have noticed that ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," is similar to ",Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr"),", but with a different copy-constructor. Whilst copying a ",Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr")," is forbidden, copying a ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," will create a copy of the resource. Thus, we can implement ",Object(o.a)("inlineCode",{parentName:"p"},"value_ptr")," by leveraging ",Object(o.a)("inlineCode",{parentName:"p"},"unique_ptr")," and a copy function."),Object(o.a)("p",null,"This is what we have done; ",Object(o.a)("a",r({parentName:"p"},{href:"https://github.com/loopperfect/valuable"}),"take a look on GitHub"),", or test-drive our implementation with ",Object(o.a)("a",r({parentName:"p"},{href:"https://buckaroo.pm"}),"Buckaroo"),":"),Object(o.a)("pre",r({},{className:"language-bash"}),Object(o.a)("code",r({parentName:"pre"},{className:"language-bash"}),"buckaroo ",Object(o.a)("span",r({parentName:"code"},{className:"token function"}),"add")," github.com/LoopPerfect/valuable\n")),Object(o.a)("h2",null,"Summary"),Object(o.a)("p",null,"Value semantics are easy to reason about, and are often useful even for heap objects. The C++ standard library does not provide a smart-pointer with value semantics, but C++ has the features to allow us to roll-our-own."),Object(o.a)("p",null,"Can\u2019t decide which smart-pointer to use? Here\u2019s a quick chart:"),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",r({parentName:"tr"},{align:null}),"Name"),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"unique_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"shared_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"weak_ptr")),Object(o.a)("th",r({parentName:"tr"},{align:null}),Object(o.a)("inlineCode",{parentName:"th"},"value_ptr")))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Ownership"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Unique"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Shared"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Unique")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Copyable"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Movable"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u2705")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Sharing"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"\u274c"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Value")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lifetime"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lexical"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference-counted"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Non-extending"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Lexical")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",r({parentName:"tr"},{align:null}),"Semantics"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Optional-reference"),Object(o.a)("td",r({parentName:"tr"},{align:null}),"Value")))))}u.isMDXComponent=!0},qsNR:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/value-ptr-the-missing-smart-ptr",function(){return t("83Tm")}])}},[["qsNR",0,2,1,3,4]]]);