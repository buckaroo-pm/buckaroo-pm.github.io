{"pageProps":{"data":{"packageName":"buckaroo-pm/aantron-better-enums","name":"aantron/better-enums","licence":"","description":"C++ compile-time enum to string, iteration, in a single header file.","readme":"# Better Enums &nbsp; [![version 0.11.1][version]][releases] [![Try online][wandbox-img]][wandbox] [![Travis status][travis-img]][travis] [![AppVeyor status][appveyor-img]][appveyor] [![BSD license][license-img]][license]\n\n[version]:      https://img.shields.io/badge/version-0.11.1-blue.svg\n[releases]:     https://github.com/aantron/better-enums/releases\n[wandbox]:      http://melpon.org/wandbox/permlink/2QCi3cwQnplAToge\n[wandbox-img]:  https://img.shields.io/badge/try%20it-online-blue.svg\n[appveyor]:     https://ci.appveyor.com/project/aantron/better-enums/branch/master\n[travis]:       https://travis-ci.org/aantron/better-enums/branches\n[travis-img]:   https://img.shields.io/travis/aantron/better-enums/master.svg?label=travis\n[appveyor-img]: https://img.shields.io/appveyor/ci/aantron/better-enums/master.svg?label=appveyor\n[license-img]:  https://img.shields.io/badge/license-BSD-lightgrey.svg\n\nReflective compile-time enum library with clean syntax, in a single header\nfile, and without dependencies.\n\n![Better Enums code overview][sample]\n\n[sample]: https://raw.githubusercontent.com/aantron/better-enums/master/doc/image/sample.gif\n\nIn C++11, *everything* can be used at compile time. You can convert your enums,\nloop over them, [find their max][max],\n[statically enforce conventions][enforce], and pass along the results as\ntemplate arguments or to `constexpr` functions. All the reflection is available\nfor your metaprogramming needs.\n\nThe interface is the same for C++98 &mdash; you just have to use most of it at\nrun time only. This library does provide scoped and sized enums, something not\nbuilt into C++98.\n\nSee the [project page][project] for full documentation.\n\n[max]:      http://aantron.github.io/better-enums/demo/BitSets.html\n[enforce]:  http://aantron.github.io/better-enums/demo/SpecialValues.html\n[project]:  http://aantron.github.io/better-enums\n\n<br/>\n\n## Installation\n\nSimply add `enum.h` to your project.\n\n<br/>\n\n## Additional features\n\n- Uses only standard C++, though, for C++98, variadic macro support is required\n  (major compilers have it).\n- Supported and tested on [clang, gcc, and msvc][testing].\n- Fast compilation. You have to declare a few dozen enums to slow down your\n  compiler as much as [only including `iostream` does][performance].\n- Use any initializers and sparse ranges, just like with a built-in enum.\n- Control over size and alignment &mdash; you choose the representation type.\n- Stream operators.\n- Does not use the heap and can be compiled with exceptions disabled, for use in\n  minimal freestanding environments.\n\n[testing]:     http://aantron.github.io/better-enums/CompilerSupport.html\n[performance]: http://aantron.github.io/better-enums/Performance.html\n\n<br/>\n\n## Limitations\n\n1. The biggest limitation is that the `BETTER_ENUM` macro can't be used inside a\nclass. This seems [difficult to remove][nested]. There is a workaround with\n`typedef` (or C++11 `using`):\n\n    ```c++\n    BETTER_ENUM(SomePrefix_Color, uint8_t, Red, Green, Blue)\n\n    struct triplet {\n        typedef SomePrefix_Color    Color;\n        Color                       r, g, b;\n    };\n\n    triplet::Color  color;\n    ```\n\n    You can, however, use `BETTER_ENUM` inside a namespace.\n\n2. The macro has a soft limit of 64 declared constants. You can extend it by\nfollowing [these instructions][extend]. Ultimately, the number of constants is\nlimited by your compiler's maximum macro argument count.\n\n3. In some cases, it is necessary to prefix constants such as `Channel::Red` with a\n`+` to explicitly promote them to type `Channel`. For example, if you are doing\na comparison:\n\n    ```c++\n    channel == +Channel::Red\n    ```\n\n4. On msvc, you may need to enable [warning C4062][C4062] to get `switch` case exhaustiveness checking.\n\n[nested]: http://aantron.github.io/better-enums/DesignDecisionsFAQ.html#NoEnumInsideClass\n[extend]: http://aantron.github.io/better-enums/ExtendingLimits.html\n[C4062]: https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4062\n\n<br/>\n\n## Contact and development\n\nDon't hesitate to contact me about features or bugs:\n[antonbachin@yahoo.com][email], or open an issue on GitHub.\n\nIf you'd like to help develop Better Enums, see [`CONTRIBUTING`][contributing].\nOne area that could use fresh ideas is finding a compile-time data structure\nthat both compiles quickly and allows lookup in sub-linear time.\n\n[email]:        mailto:antonbachin@yahoo.com\n[contributing]: https://github.com/aantron/better-enums/blob/master/doc/CONTRIBUTING.md\n\n<br/>\n\n## License and history\n\nBetter Enums is released under the BSD 2-clause license. See\n[`LICENSE`][license].\n\nThe original version of the library was developed by the author in the winter of\n2012-2013 at Hudson River Trading, as a replacement for an older generator\ncalled `BETTER_ENUM`.\n\n[license]: https://github.com/aantron/better-enums/blob/master/doc/LICENSE\n","versions":[{"ref":"master","manifest":"targets = [ '//:better-enums' ]\n","lockFile":"manifest = \"2cce46de47fb9323be870617fe42be32c63b44f606bdb357654402ee57f8d5a5\"\n\n","buck":"prebuilt_cxx_library(\n  name = 'better-enums',\n  header_only = True,\n  header_namespace = '',\n  exported_headers = [\n    'enum.h',\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n\ncxx_binary(\n  name = 'test',\n  srcs = ['test/performance/4-declare_enums.cc'],\n  deps = [':better-enums']\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2019-01-24T17:54:36Z","updatedUpstream":"2021-01-13T03:30:51Z","contributors":[{"login":"ZafiRUS","avatarUrl":"https://avatars0.githubusercontent.com/u/388630?u=6af0c0c170eac9d4efd8a5b34edabd599fa71b1b&v=4"},{"login":"Falconne","avatarUrl":"https://avatars3.githubusercontent.com/u/420548?v=4"},{"login":"dutow","avatarUrl":"https://avatars3.githubusercontent.com/u/489009?u=fadd5f4815ee62753855ae284d504e6fc8e2c5d7&v=4"},{"login":"FelixDombek","avatarUrl":"https://avatars2.githubusercontent.com/u/552001?u=43db210b015e3128519bd35caa6cfdf3b38c74e6&v=4"},{"login":"benalexau","avatarUrl":"https://avatars3.githubusercontent.com/u/718596?v=4"},{"login":"FelipeLema","avatarUrl":"https://avatars2.githubusercontent.com/u/1232306?u=1ba8b721e68359c211656622c28105e7bd3be876&v=4"},{"login":"kzhaokol","avatarUrl":"https://avatars3.githubusercontent.com/u/1435778?v=4"},{"login":"rcdailey","avatarUrl":"https://avatars2.githubusercontent.com/u/1768054?v=4"},{"login":"janten","avatarUrl":"https://avatars0.githubusercontent.com/u/1794407?u=b27e5d419e3eb86081ebcfff3ce5b8589549e163&v=4"},{"login":"michaelernst","avatarUrl":"https://avatars1.githubusercontent.com/u/2349361?u=c988f213ddd7926dfc5bb1750ee4956a9ef4b0d8&v=4"},{"login":"UnrealQuester","avatarUrl":"https://avatars1.githubusercontent.com/u/3252092?v=4"},{"login":"cheparukhin","avatarUrl":"https://avatars2.githubusercontent.com/u/3610365?v=4"},{"login":"Shelim","avatarUrl":"https://avatars1.githubusercontent.com/u/4707644?u=933bf6318d6533cd660bf45a4b8902fe35c53ceb&v=4"},{"login":"yisonPylkita","avatarUrl":"https://avatars0.githubusercontent.com/u/8435296?u=e02f2d190740e26698be7479d7fb325d14f62a1c&v=4"},{"login":"aantron","avatarUrl":"https://avatars3.githubusercontent.com/u/12073668?u=09674d3ea5dd08898bab82493cffbdaaa7f2170b&v=4"},{"login":"cheny-m","avatarUrl":"https://avatars0.githubusercontent.com/u/13078860?u=c6d66b84fa28d189e613dce5b75ed86649b91493&v=4"},{"login":"D4koon","avatarUrl":"https://avatars1.githubusercontent.com/u/13141819?v=4"},{"login":"Xeverous","avatarUrl":"https://avatars3.githubusercontent.com/u/20820409?v=4"},{"login":"svnscha","avatarUrl":"https://avatars2.githubusercontent.com/u/24257042?u=6a25eba7e65cb27323a31bd834f3acd56a9e7dad&v=4"},{"login":"CJSmith-0141","avatarUrl":"https://avatars1.githubusercontent.com/u/26289024?u=d17a9b5fc98d31f461eef2f82bafc7b21e4d8ba0&v=4"}],"fundingLinks":["https://github.com/aantron"],"contactLinks":[],"stars":1070,"forks":123,"topics":["enum","cpp","reflection","header-only"]}},"__N_SSG":true}