{"pageProps":{"data":{"packageName":"buckaroo-pm/google-googletest","name":"njlr/googletest","licence":"BSD-3-Clause","description":"Google Test","readme":"\n# Google Test #\n\n[![Build Status](https://api.travis-ci.org/abseil/googletest.svg?branch=master)](https://travis-ci.org/abseil/googletest)\n[![Build status](https://ci.appveyor.com/api/projects/status/4o38plt0xbo1ubc8/branch/master?svg=true)](https://ci.appveyor.com/project/GoogleTestAppVeyor/googletest/branch/master)\n\n**Future Plans**:\n* 1.8.x Release - [the 1.8.x](https://github.com/google/googletest/releases/tag/release-1.8.1) is the last release that works with pre-C++11 compilers. The 1.8.x will not accept any requests for any new features and any bugfix requests will only be accepted if proven \"critical\"\n* Post 1.8.x - work to improve/cleanup/pay technical debt. When this work is completed there will be a 1.9.x tagged release\n* Post 1.9.x googletest will follow [Abseil Live at Head philosophy](https://abseil.io/about/philosophy)\n\n\nWelcome to **Google Test**, Google's C++ test framework!\n\nThis repository is a merger of the formerly separate GoogleTest and\nGoogleMock projects. These were so closely related that it makes sense to\nmaintain and release them together.\n\nPlease subscribe to the mailing list at googletestframework@googlegroups.com for questions, discussions, and development.  \nThere is also an IRC channel on [OFTC](https://webchat.oftc.net/) (irc.oftc.net) #gtest available.  \n\nGetting started information for **Google Test** is available in the\n[Google Test Primer](googletest/docs/primer.md) documentation.\n\n**Google Mock** is an extension to Google Test for writing and using C++ mock\nclasses.  See the separate [Google Mock documentation](googlemock/README.md).\n\nMore detailed documentation for googletest (including build instructions) are\nin its interior [googletest/README.md](googletest/README.md) file.\n\n## Features ##\n\n  * An [xUnit](https://en.wikipedia.org/wiki/XUnit) test framework.\n  * Test discovery.\n  * A rich set of assertions.\n  * User-defined assertions.\n  * Death tests.\n  * Fatal and non-fatal failures.\n  * Value-parameterized tests.\n  * Type-parameterized tests.\n  * Various options for running the tests.\n  * XML test report generation.\n\n## Platforms ##\n\nGoogle test has been used on a variety of platforms:\n\n  * Linux\n  * Mac OS X\n  * Windows\n  * Cygwin\n  * MinGW\n  * Windows Mobile\n  * Symbian\n\n## Who Is Using Google Test? ##\n\nIn addition to many internal projects at Google, Google Test is also used by\nthe following notable projects:\n\n  * The [Chromium projects](http://www.chromium.org/) (behind the Chrome\n    browser and Chrome OS).\n  * The [LLVM](http://llvm.org/) compiler.\n  * [Protocol Buffers](https://github.com/google/protobuf), Google's data\n    interchange format.\n  * The [OpenCV](http://opencv.org/) computer vision library.\n  * [tiny-dnn](https://github.com/tiny-dnn/tiny-dnn): header only, dependency-free deep learning framework in C++11.\n\n## Related Open Source Projects ##\n\n[GTest Runner](https://github.com/nholthaus/gtest-runner) is a Qt5 based automated test-runner and Graphical User Interface with powerful features for Windows and Linux platforms.\n\n[Google Test UI](https://github.com/ospector/gtest-gbar) is test runner that runs\nyour test binary, allows you to track its progress via a progress bar, and\ndisplays a list of test failures. Clicking on one shows failure text. Google\nTest UI is written in C#.\n\n[GTest TAP Listener](https://github.com/kinow/gtest-tap-listener) is an event\nlistener for Google Test that implements the\n[TAP protocol](https://en.wikipedia.org/wiki/Test_Anything_Protocol) for test\nresult output. If your test runner understands TAP, you may find it useful.\n\n[gtest-parallel](https://github.com/google/gtest-parallel) is a test runner that\nruns tests from your binary in parallel to provide significant speed-up.\n\n[GoogleTest Adapter](https://marketplace.visualstudio.com/items?itemName=DavidSchuldenfrei.gtest-adapter) is a VS Code extension allowing to view Google Tests in a tree view, and run/debug your tests.\n\n## Requirements ##\n\nGoogle Test is designed to have fairly minimal requirements to build\nand use with your projects, but there are some.  Currently, we support\nLinux, Windows, Mac OS X, and Cygwin.  We will also make our best\neffort to support other platforms (e.g. Solaris, AIX, and z/OS).\nHowever, since core members of the Google Test project have no access\nto these platforms, Google Test may have outstanding issues there.  If\nyou notice any problems on your platform, please notify\n[googletestframework@googlegroups.com](https://groups.google.com/forum/#!forum/googletestframework). Patches for fixing them are\neven more welcome!\n\n### Linux Requirements ###\n\nThese are the base requirements to build and use Google Test from a source\npackage (as described below):\n\n  * GNU-compatible Make or gmake\n  * POSIX-standard shell\n  * POSIX(-2) Regular Expressions (regex.h)\n  * A C++11-standard-compliant compiler\n\n### Windows Requirements ###\n\n  * Microsoft Visual C++ 2015 or newer\n\n### Cygwin Requirements ###\n\n  * Cygwin v1.5.25-14 or newer\n\n### Mac OS X Requirements ###\n\n  * Mac OS X v10.4 Tiger or newer\n  * Xcode Developer Tools\n\n## Contributing change\n\nPlease read the [`CONTRIBUTING.md`](CONTRIBUTING.md) for details on\nhow to contribute to this project.\n\nHappy testing!\n","versions":[{"ref":"master","manifest":"targets = [ \"//:googletest\" ]\n","lockFile":"","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\n\n# Work-around for linker flag order issue\n# https://github.com/facebook/buck/issues/1443\nprebuilt_cxx_library(\n  name = 'pthread',\n  header_only = True,\n  exported_linker_flags = [\n    '-lpthread',\n  ],\n)\n\ncxx_library(\n  name = 'googlemock',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('googlemock/include', '**/*.h'),\n  ], exclude = [\n    'googlemock/include/internal/**/*.h',\n  ]),\n  headers = subdir_glob([\n    ('googlemock', 'src/*.h'),\n    ('googlemock', 'src/*.cc'),\n    ('googlemock/include', 'internal/**/*.h'),\n    ('googletest/include', '**/*.h'),\n  ]),\n  srcs = [\n    'googlemock/src/gmock-all.cc',\n    'googlemock/src/gmock_main.cc',\n  ],\n  platform_deps = [\n    ('linux.*', [ ':pthread' ]), \n  ], \n  visibility = [\n    'PUBLIC',\n  ],\n)\n\ncxx_library(\n  name = 'googletest',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('googletest/include', '**/*.h'),\n  ], exclude = [\n    'googletest/include/internal/**/*.h',\n  ]),\n  headers = subdir_glob([\n    ('googletest', 'src/*.h'),\n    ('googletest', 'src/*.cc'),\n    ('googletest/include', 'internal/**/*.h'),\n  ]),\n  srcs = [\n    'googletest/src/gtest-all.cc',\n    'googletest/src/gtest_main.cc',\n  ],\n  platform_deps = [\n    ('linux.*', [ ':pthread' ]), \n  ], \n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2018-12-04T17:09:42Z","updatedUpstream":"2019-06-03T00:14:54Z","contributors":[{"login":"njlr","avatarUrl":"https://avatars2.githubusercontent.com/u/1577531?u=b805a63f8054b62169749f2c9d2e89eb53af57d7&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":0,"forks":3,"topics":[]}},"__N_SSG":true}