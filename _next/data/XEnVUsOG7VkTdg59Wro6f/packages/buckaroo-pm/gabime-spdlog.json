{"pageProps":{"data":{"packageName":"buckaroo-pm/gabime-spdlog","name":"gabime/spdlog","licence":"MIT","description":"Fast C++ logging library.","readme":"# spdlog\r\n\r\nVery fast, header-only/compiled, C++ logging library. [![Build Status](https://travis-ci.org/gabime/spdlog.svg?branch=master)](https://travis-ci.org/gabime/spdlog)&nbsp; [![Build status](https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true)](https://ci.appveyor.com/project/gabime/spdlog)\r\n\r\n\r\n\r\n## Install \r\n#### Header only version\r\nCopy the source [folder](https://github.com/gabime/spdlog/tree/v1.x/include/spdlog) to your build tree and use a C++11 compiler.\r\n\r\n#### Static lib version (recommended - much faster compile times)\r\n```console\r\n$ git clone https://github.com/gabime/spdlog.git\r\n$ cd spdlog && mkdir build && cd build\r\n$ cmake .. && make -j\r\n```\r\n      \r\n   see example [CMakeLists.txt](https://github.com/gabime/spdlog/blob/v1.x/example/CMakeLists.txt) on how to use.\r\n\r\n## Platforms\r\n * Linux, FreeBSD, OpenBSD, Solaris, AIX\r\n * Windows (msvc 2013+, cygwin)\r\n * macOS (clang 3.5+)\r\n * Android\r\n\r\n## Package managers:\r\n* Homebrew: `brew install spdlog`\r\n* FreeBSD:  `cd /usr/ports/devel/spdlog/ && make install clean`\r\n* Fedora: `yum install spdlog`\r\n* Gentoo: `emerge dev-libs/spdlog`\r\n* Arch Linux: `yaourt -S spdlog-git`\r\n* vcpkg: `vcpkg install spdlog`\r\n\r\n## Features\r\n* Very fast (see [benchmarks](#benchmarks) below).\r\n* Headers only, just copy and use. Or use as a compiled library.\r\n* Feature rich formatting, using the excellent [fmt](https://github.com/fmtlib/fmt) library.\r\n* **New!** [Backtrace](#backtrace-support) support - store debug or other messages in a ring buffer and display later on demand.\r\n* Fast asynchronous mode (optional)\r\n* [Custom](https://github.com/gabime/spdlog/wiki/3.-Custom-formatting) formatting.\r\n* Multi/Single threaded loggers.\r\n* Various log targets:\r\n    * Rotating log files.\r\n    * Daily log files.\r\n    * Console logging (colors supported).\r\n    * syslog.\r\n    * Windows debugger (```OutputDebugString(..)```)\r\n    * Easily extendable with custom log targets  (just implement a single function in the [sink](include/spdlog/sinks/sink.h) interface).\r\n* Severity based filtering - threshold levels can be modified in runtime as well as in compile time.\r\n\r\n \r\n## Usage samples\r\n\r\n#### Basic usage\r\n```c++\r\n#include \"spdlog/spdlog.h\"\r\n#include \"spdlog/sinks/basic_file_sink.h\"\r\n\r\nint main() \r\n{\r\n    spdlog::info(\"Welcome to spdlog!\");\r\n    spdlog::error(\"Some error message with arg: {}\", 1);\r\n    \r\n    spdlog::warn(\"Easy padding in numbers like {:08d}\", 12);\r\n    spdlog::critical(\"Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}\", 42);\r\n    spdlog::info(\"Support for floats {:03.2f}\", 1.23456);\r\n    spdlog::info(\"Positional args are {1} {0}..\", \"too\", \"supported\");\r\n    spdlog::info(\"{:<30}\", \"left aligned\");\r\n    \r\n    spdlog::set_level(spdlog::level::debug); // Set global log level to debug\r\n    spdlog::debug(\"This message should be displayed..\");    \r\n    \r\n    // change log pattern\r\n    spdlog::set_pattern(\"[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v\");\r\n    \r\n    // Compile time log levels\r\n    // define SPDLOG_ACTIVE_LEVEL to desired level\r\n    SPDLOG_TRACE(\"Some trace message with param {}\", {});\r\n    SPDLOG_DEBUG(\"Some debug message\");\r\n    \r\n    // Set the default logger to file logger\r\n    auto file_logger = spdlog::basic_logger_mt(\"basic_logger\", \"logs/basic.txt\");\r\n    spdlog::set_default_logger(file_logger);            \r\n}\r\n```\r\n#### create stdout/stderr logger object\r\n```c++\r\n#include \"spdlog/spdlog.h\"\r\n#include \"spdlog/sinks/stdout_color_sinks.h\"\r\nvoid stdout_example()\r\n{\r\n    // create color multi threaded logger\r\n    auto console = spdlog::stdout_color_mt(\"console\");    \r\n    auto err_logger = spdlog::stderr_color_mt(\"stderr\");    \r\n    spdlog::get(\"console\")->info(\"loggers can be retrieved from a global registry using the spdlog::get(logger_name)\");\r\n}\r\n```\r\n---\r\n#### Basic file logger\r\n```c++\r\n#include \"spdlog/sinks/basic_file_sink.h\"\r\nvoid basic_logfile_example()\r\n{\r\n    try \r\n    {\r\n        auto my_logger = spdlog::basic_logger_mt(\"basic_logger\", \"logs/basic-log.txt\");\r\n    }\r\n    catch (const spdlog::spdlog_ex &ex)\r\n    {\r\n        std::cout << \"Log init failed: \" << ex.what() << std::endl;\r\n    }\r\n}\r\n```\r\n---\r\n#### Rotating files\r\n```c++\r\n#include \"spdlog/sinks/rotating_file_sink.h\"\r\nvoid rotating_example()\r\n{\r\n    // Create a file rotating logger with 5mb size max and 3 rotated files\r\n    auto rotating_logger = spdlog::rotating_logger_mt(\"some_logger_name\", \"logs/rotating.txt\", 1048576 * 5, 3);\r\n}\r\n```\r\n\r\n---\r\n#### Daily files\r\n```c++\r\n\r\n#include \"spdlog/sinks/daily_file_sink.h\"\r\nvoid daily_example()\r\n{\r\n    // Create a daily logger - a new file is created every day on 2:30am\r\n    auto daily_logger = spdlog::daily_logger_mt(\"daily_logger\", \"logs/daily.txt\", 2, 30);\r\n}\r\n\r\n```\r\n\r\n---\r\n#### Backtrace support\r\n```c++\r\n// Loggers can store in a ring buffer all messages (including debug/trace) and display later on demand.\r\n// When needed, call dump_backtrace() to see them\r\nspdlog::enable_backtrace(32); // create ring buffer with capacity of 32  messages\r\n// or my_logger->enable_backtrace(32)..\r\nfor(int i = 0; i < 100; i++)\r\n{\r\n  spdlog::debug(\"Backtrace message {}\", i); // not logged yet..\r\n}\r\n// e.g. if some error happened:\r\nspdlog::dump_backtrace(); // log them now! show the last 32 messages\r\n\r\n// or my_logger->dump_backtrace(32)..\r\n```\r\n\r\n---\r\n#### Periodic flush\r\n```c++\r\n// periodically flush all *registered* loggers every 3 seconds:\r\n// warning: only use if all your loggers are thread safe!\r\nspdlog::flush_every(std::chrono::seconds(3));\r\n\r\n```\r\n\r\n---\r\n#### Log binary data in hex\r\n```c++\r\n// many types of std::container<char> types can be used.\r\n// ranges are supported too.\r\n// format flags:\r\n// {:X} - print in uppercase.\r\n// {:s} - don't separate each byte with space.\r\n// {:p} - don't print the position on each line start.\r\n// {:n} - don't split the output to lines.\r\n\r\n#include \"spdlog/fmt/bin_to_hex.h\"\r\n\r\nvoid binary_example()\r\n{\r\n    auto console = spdlog::get(\"console\");\r\n    std::array<char, 80> buf;\r\n    console->info(\"Binary example: {}\", spdlog::to_hex(buf));\r\n    console->info(\"Another binary example:{:n}\", spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));\r\n    // more examples:\r\n    // logger->info(\"uppercase: {:X}\", spdlog::to_hex(buf));\r\n    // logger->info(\"uppercase, no delimiters: {:Xs}\", spdlog::to_hex(buf));\r\n    // logger->info(\"uppercase, no delimiters, no position info: {:Xsp}\", spdlog::to_hex(buf));\r\n}\r\n\r\n```\r\n\r\n---\r\n#### Logger with multi sinks - each with different format and log level\r\n```c++\r\n\r\n// create logger with 2 targets with different log levels and formats.\r\n// the console will show only warnings or errors, while the file will log all.\r\nvoid multi_sink_example()\r\n{\r\n    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();\r\n    console_sink->set_level(spdlog::level::warn);\r\n    console_sink->set_pattern(\"[multi_sink_example] [%^%l%$] %v\");\r\n\r\n    auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>(\"logs/multisink.txt\", true);\r\n    file_sink->set_level(spdlog::level::trace);\r\n\r\n    spdlog::logger logger(\"multi_sink\", {console_sink, file_sink});\r\n    logger.set_level(spdlog::level::debug);\r\n    logger.warn(\"this should appear in both console and file\");\r\n    logger.info(\"this message should not appear in the console, only in the file\");\r\n}\r\n```\r\n\r\n---\r\n#### Asynchronous logging\r\n```c++\r\n#include \"spdlog/async.h\"\r\n#include \"spdlog/sinks/basic_file_sink.h\"\r\nvoid async_example()\r\n{\r\n    // default thread pool settings can be modified *before* creating the async logger:\r\n    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.\r\n    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>(\"async_file_logger\", \"logs/async_log.txt\");\r\n    // alternatively:\r\n    // auto async_file = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>(\"async_file_logger\", \"logs/async_log.txt\");   \r\n}\r\n\r\n```\r\n\r\n---\r\n#### Asynchronous logger with multi sinks  \r\n```c++\r\n#include \"spdlog/sinks/stdout_color_sinks.h\"\r\n#include \"spdlog/sinks/rotating_file_sink.h\"\r\n\r\nvoid multi_sink_example2()\r\n{\r\n    spdlog::init_thread_pool(8192, 1);\r\n    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();\r\n    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>(\"mylog.txt\", 1024*1024*10, 3);\r\n    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};\r\n    auto logger = std::make_shared<spdlog::async_logger>(\"loggername\", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);\r\n    spdlog::register_logger(logger);\r\n}\r\n```\r\n \r\n---\r\n#### User defined types\r\n```c++\r\n// user defined types logging by implementing operator<<\r\n#include \"spdlog/fmt/ostr.h\" // must be included\r\nstruct my_type\r\n{\r\n    int i;\r\n    template<typename OStream>\r\n    friend OStream &operator<<(OStream &os, const my_type &c)\r\n    {\r\n        return os << \"[my_type i=\" << c.i << \"]\";\r\n    }\r\n};\r\n\r\nvoid user_defined_example()\r\n{\r\n    spdlog::get(\"console\")->info(\"user defined type: {}\", my_type{14});\r\n}\r\n\r\n```\r\n---\r\n#### Custom error handler\r\n```c++\r\nvoid err_handler_example()\r\n{\r\n    // can be set globally or per logger(logger->set_error_handler(..))\r\n    spdlog::set_error_handler([](const std::string &msg) { spdlog::get(\"console\")->error(\"*** LOGGER ERROR ***: {}\", msg); });\r\n    spdlog::get(\"console\")->info(\"some invalid message to trigger an error {}{}{}{}\", 3);\r\n}\r\n\r\n```\r\n---\r\n#### syslog \r\n```c++\r\n#include \"spdlog/sinks/syslog_sink.h\"\r\nvoid syslog_example()\r\n{\r\n    std::string ident = \"spdlog-example\";\r\n    auto syslog_logger = spdlog::syslog_logger_mt(\"syslog\", ident, LOG_PID);\r\n    syslog_logger->warn(\"This is warning that will end up in syslog.\");\r\n}\r\n```\r\n---\r\n#### Android example \r\n```c++\r\n#include \"spdlog/sinks/android_sink.h\"\r\nvoid android_example()\r\n{\r\n    std::string tag = \"spdlog-android\";\r\n    auto android_logger = spdlog::android_logger_mt(\"android\", tag);\r\n    android_logger->critical(\"Use \\\"adb shell logcat\\\" to view this message.\");\r\n}\r\n```\r\n\r\n## Benchmarks\r\n\r\nBelow are some [benchmarks](https://github.com/gabime/spdlog/blob/v1.x/bench/bench.cpp) done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz\r\n\r\n#### Synchronous mode\r\n```\r\n[info] **************************************************************\r\n[info] Single thread, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec\r\n[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec\r\n[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec\r\n[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec\r\n[info] **************************************************************\r\n[info] C-string (400 bytes). Single thread, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec\r\n[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec\r\n[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec\r\n[info] null_st          Elapsed: 0.04 secs       27,446,957/sec\r\n[info] **************************************************************\r\n[info] 10 threads sharing same logger, 1,000,000 iterations\r\n[info] **************************************************************\r\n[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec\r\n[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec\r\n[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec\r\n[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec\r\n```\r\n#### ASynchronous mode\r\n```\r\n[info] -------------------------------------------------\r\n[info] Messages     : 1,000,000\r\n[info] Threads      : 10\r\n[info] Queue        : 8,192 slots\r\n[info] Queue memory : 8,192 x 272 = 2,176 KB \r\n[info] Total iters  : 3\r\n[info] -------------------------------------------------\r\n[info] \r\n[info] *********************************\r\n[info] Queue Overflow Policy: block\r\n[info] *********************************\r\n[info] Elapsed: 1.70784 secs     585,535/sec\r\n[info] Elapsed: 1.69805 secs     588,910/sec\r\n[info] Elapsed: 1.7026 secs      587,337/sec\r\n[info] \r\n[info] *********************************\r\n[info] Queue Overflow Policy: overrun\r\n[info] *********************************\r\n[info] Elapsed: 0.372816 secs    2,682,285/sec\r\n[info] Elapsed: 0.379758 secs    2,633,255/sec\r\n[info] Elapsed: 0.373532 secs    2,677,147/sec\r\n\r\n```\r\n\r\n## Documentation\r\nDocumentation can be found in the [wiki](https://github.com/gabime/spdlog/wiki/1.-QuickStart) pages.\r\n","versions":[{"ref":"v1.4.1","manifest":"targets = [ \"//:spdlog\" ]","lockFile":"manifest = \"9b9c01380d5a9382bf6559ddd24542c34768c625a8005ad5d93c1fc12f60e27b\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'spdlog',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.h'),\n  ]),\n  preprocessor_flags = [\n    '-DSPDLOG_COMPILED_LIB=1',\n  ],\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  exported_platform_linker_flags = [\n    ('linux.*', [ '-pthread' ]),\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2019-10-04T19:57:04Z","updatedUpstream":"2021-01-13T16:19:33Z","contributors":[{"login":"wilhelmtell","avatarUrl":"https://avatars0.githubusercontent.com/u/1458?u=cc95eb27944115e2a4370ac950fbfd5ec5fbd4e9&v=4"},{"login":"yipdw","avatarUrl":"https://avatars3.githubusercontent.com/u/3859?u=32969af16cd7e4a22e0de1d5bfe81c24ec952e44&v=4"},{"login":"graydon","avatarUrl":"https://avatars3.githubusercontent.com/u/14097?v=4"},{"login":"joaomoreno","avatarUrl":"https://avatars3.githubusercontent.com/u/22350?v=4"},{"login":"tony","avatarUrl":"https://avatars0.githubusercontent.com/u/26336?v=4"},{"login":"rpopescu","avatarUrl":"https://avatars3.githubusercontent.com/u/41022?v=4"},{"login":"Montellese","avatarUrl":"https://avatars1.githubusercontent.com/u/75864?v=4"},{"login":"jhasse","avatarUrl":"https://avatars2.githubusercontent.com/u/80071?v=4"},{"login":"berkus","avatarUrl":"https://avatars0.githubusercontent.com/u/80306?u=440974c67ab28a37bf695706ed49826a9f74fb9e&v=4"},{"login":"btaczala","avatarUrl":"https://avatars1.githubusercontent.com/u/81626?u=8b02295f7087aa7d6cf1582a1e12bface42267b9&v=4"},{"login":"costinm","avatarUrl":"https://avatars1.githubusercontent.com/u/84202?v=4"},{"login":"Kentzo","avatarUrl":"https://avatars1.githubusercontent.com/u/88809?v=4"},{"login":"cneumann","avatarUrl":"https://avatars1.githubusercontent.com/u/117979?v=4"},{"login":"tbastos","avatarUrl":"https://avatars2.githubusercontent.com/u/150480?u=1550ff6fac8f21f17dd677e74cc0821fe0bce926&v=4"},{"login":"waywardmonkeys","avatarUrl":"https://avatars3.githubusercontent.com/u/178582?v=4"},{"login":"candrews","avatarUrl":"https://avatars3.githubusercontent.com/u/194713?v=4"},{"login":"godbyk","avatarUrl":"https://avatars0.githubusercontent.com/u/195036?v=4"},{"login":"niamster","avatarUrl":"https://avatars3.githubusercontent.com/u/211000?v=4"},{"login":"flopp","avatarUrl":"https://avatars3.githubusercontent.com/u/272596?u=0f8a1e5e88a1a89b97e42fa71eb7edb9c9f72c12&v=4"},{"login":"rob-p","avatarUrl":"https://avatars0.githubusercontent.com/u/361470?u=12e2891ee480343ed2ed1b953b2f4dc5efeb61a2&v=4"},{"login":"Falconne","avatarUrl":"https://avatars3.githubusercontent.com/u/420548?v=4"},{"login":"ksergey","avatarUrl":"https://avatars3.githubusercontent.com/u/432368?u=e50d6b9379bdd64583ec9bb97dd2b75ab5c87093&v=4"},{"login":"yhchen","avatarUrl":"https://avatars2.githubusercontent.com/u/453922?u=297a54534f2d36c1bd993a648b7dc011a932df0a&v=4"},{"login":"horar","avatarUrl":"https://avatars2.githubusercontent.com/u/454703?v=4"},{"login":"osx2000","avatarUrl":"https://avatars0.githubusercontent.com/u/490015?u=7647a0c2e0254fe0cc777d67e1dd81bfa1160bdf&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":10639,"forks":2245,"topics":["header-only","cpp11","cpp","logging","spdlog"]}},"__N_SSG":true}