{"pageProps":{"data":{"packageName":"buckaroo-pm/xianyi-OpenBLAS","name":"xianyi/OpenBLAS","licence":"BSD-3-Clause","description":"OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version. ","readme":"# OpenBLAS\n\n[![Join the chat at https://gitter.im/xianyi/OpenBLAS](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/xianyi/OpenBLAS?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nTravis CI: [![Build Status](https://travis-ci.org/xianyi/OpenBLAS.svg?branch=develop)](https://travis-ci.org/xianyi/OpenBLAS)\n\nAppVeyor: [![Build status](https://ci.appveyor.com/api/projects/status/09sohd35n8nkkx64/branch/develop?svg=true)](https://ci.appveyor.com/project/xianyi/openblas/branch/develop)\n\n## Introduction\n\nOpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.\n\nPlease read the documentation on the OpenBLAS wiki pages: <http://github.com/xianyi/OpenBLAS/wiki>.\n\n## Binary Packages\n\nWe provide official binary packages for the following platform:\n\n  * Windows x86/x86_64\n\nYou can download them from [file hosting on sourceforge.net](https://sourceforge.net/projects/openblas/files/).\n\n## Installation from Source\n\nDownload from project homepage, http://xianyi.github.com/OpenBLAS/, or check out the code\nusing Git from https://github.com/xianyi/OpenBLAS.git.\n\n### Dependencies\n\nBuilding OpenBLAS requires the following to be installed:\n\n* GNU Make\n* A C compiler, e.g. GCC or Clang\n* A Fortran compiler (optional, for LAPACK)\n* IBM MASS (optional, see below)\n\n### Normal compile\n\nSimply invoking `make` (or `gmake` on BSD) will detect the CPU automatically.\nTo set a specific target CPU, use `make TARGET=xxx`, e.g. `make TARGET=NEHALEM`.\nThe full target list is in the file `TargetList.txt`.\n\n### Cross compile\n\nSet `CC` and `FC` to point to the cross toolchains, and set `HOSTCC` to your host C compiler.\nThe target must be specified explicitly when cross compiling.\n\nExamples:\n\n* On an x86 box, compile this library for a loongson3a CPU:\n  ```sh\n  make BINARY=64 CC=mips64el-unknown-linux-gnu-gcc FC=mips64el-unknown-linux-gnu-gfortran HOSTCC=gcc TARGET=LOONGSON3A\n  ```\n\n* On an x86 box, compile this library for a loongson3a CPU with loongcc (based on Open64) compiler:\n  ```sh\n  make CC=loongcc FC=loongf95 HOSTCC=gcc TARGET=LOONGSON3A CROSS=1 CROSS_SUFFIX=mips64el-st-linux-gnu-   NO_LAPACKE=1 NO_SHARED=1 BINARY=32\n  ```\n\n### Debug version\n\nA debug version can be built using `make DEBUG=1`.\n\n### Compile with MASS support on Power CPU (optional)\n\nThe [IBM MASS](http://www-01.ibm.com/software/awdtools/mass/linux/mass-linux.html) library\nconsists of a set of mathematical functions for C, C++, and Fortran applications that are\nare tuned for optimum performance on POWER architectures.\nOpenBLAS with MASS requires a 64-bit, little-endian OS on POWER.\nThe library can be installed as shown:\n\n* On Ubuntu:\n  ```sh\n  wget -q http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -\n  echo \"deb http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ trusty main\" | sudo tee /etc/apt/sources.list.d/ibm-xl-compiler-eval.list\n  sudo apt-get update\n  sudo apt-get install libxlmass-devel.8.1.5\n  ```\n\n* On RHEL/CentOS:\n  ```sh\n  wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/repodata/repomd.xml.key\n  sudo rpm --import repomd.xml.key\n  wget http://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/rhel7/ibm-xl-compiler-eval.repo\n  sudo cp ibm-xl-compiler-eval.repo /etc/yum.repos.d/\n  sudo yum install libxlmass-devel.8.1.5\n  ```\n\nAfter installing the MASS library, compile OpenBLAS with `USE_MASS=1`.\nFor example, to compile on Power8 with MASS support: `make USE_MASS=1 TARGET=POWER8`.\n\n### Install to a specific directory (optional)\n\nUse `PREFIX=` when invoking `make`, for example\n\n```sh\nmake install PREFIX=your_installation_directory\n```\n\nThe default installation directory is `/opt/OpenBLAS`.\n\n## Supported CPUs and Operating Systems\n\nPlease read `GotoBLAS_01Readme.txt`.\n\n### Additional supported CPUs\n\n#### x86/x86-64\n\n- **Intel Xeon 56xx (Westmere)**: Used GotoBLAS2 Nehalem codes.\n- **Intel Sandy Bridge**: Optimized Level-3 and Level-2 BLAS with AVX on x86-64.\n- **Intel Haswell**: Optimized Level-3 and Level-2 BLAS with AVX2 and FMA  on x86-64.\n- **Intel Skylake**: Optimized Level-3 and Level-2 BLAS with AVX512 and FMA  on x86-64.\n- **AMD Bobcat**: Used GotoBLAS2 Barcelona codes.\n- **AMD Bulldozer**: x86-64 ?GEMM FMA4 kernels. (Thanks to Werner Saar)\n- **AMD PILEDRIVER**: Uses Bulldozer codes with some optimizations.\n- **AMD STEAMROLLER**: Uses Bulldozer codes with some optimizations.\n\n#### MIPS64\n\n- **ICT Loongson 3A**: Optimized Level-3 BLAS and the part of Level-1,2.\n- **ICT Loongson 3B**: Experimental\n\n#### ARM\n\n- **ARMv6**: Optimized BLAS for vfpv2 and vfpv3-d16 (e.g. BCM2835, Cortex M0+)\n- **ARMv7**: Optimized BLAS for vfpv3-d32 (e.g. Cortex A8, A9 and A15)\n\n#### ARM64\n\n- **ARMv8**: Experimental\n- **ARM Cortex-A57**: Experimental\n\n#### PPC/PPC64\n\n- **POWER8**: Optmized Level-3 BLAS and some Level-1, only with `USE_OPENMP=1`\n\n#### IBM zEnterprise System\n\n- **Z13**: Optimized Level-3 BLAS and Level-1,2 (double precision)\n\n### Supported OS\n\n- **GNU/Linux**\n- **MinGW or Visual Studio (CMake)/Windows**: Please read <https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio>.\n- **Darwin/macOS**: Experimental. Although GotoBLAS2 supports Darwin, we are not macOS experts.\n- **FreeBSD**: Supported by the community. We don't actively test the library on this OS.\n- **OpenBSD**: Supported by the community. We don't actively test the library on this OS.\n- **DragonFly BSD**: Supported by the community. We don't actively test the library on this OS.\n- **Android**: Supported by the community. Please read <https://github.com/xianyi/OpenBLAS/wiki/How-to-build-OpenBLAS-for-Android>.\n\n## Usage\n\nStatically link with `libopenblas.a` or dynamically link with `-lopenblas` if OpenBLAS was\ncompiled as a shared library.\n\n### Setting the number of threads using environment variables\n\nEnvironment variables are used to specify a maximum number of threads.\nFor example,\n\n```sh\nexport OPENBLAS_NUM_THREADS=4\nexport GOTO_NUM_THREADS=4\nexport OMP_NUM_THREADS=4\n```\n\nThe priorities are `OPENBLAS_NUM_THREADS` > `GOTO_NUM_THREADS` > `OMP_NUM_THREADS`.\n\nIf you compile this library with `USE_OPENMP=1`, you should set the `OMP_NUM_THREADS`\nenvironment variable; OpenBLAS ignores `OPENBLAS_NUM_THREADS` and `GOTO_NUM_THREADS` when\ncompiled with `USE_OPENMP=1`.\n\n### Setting the number of threads at runtime\n\nWe provide the following functions to control the number of threads at runtime:\n\n```c\nvoid goto_set_num_threads(int num_threads);\nvoid openblas_set_num_threads(int num_threads);\n```\n\nIf you compile this library with `USE_OPENMP=1`, you should use the above functions too.\n\n## Reporting bugs\n\nPlease submit an issue in https://github.com/xianyi/OpenBLAS/issues.\n\n## Contact\n\n* OpenBLAS users mailing list: https://groups.google.com/forum/#!forum/openblas-users\n* OpenBLAS developers mailing list: https://groups.google.com/forum/#!forum/openblas-dev\n\n## Change log\n\nPlease see Changelog.txt to view the differences between OpenBLAS and GotoBLAS2 1.13 BSD version.\n\n## Troubleshooting\n\n* Please read the [FAQ](https://github.com/xianyi/OpenBLAS/wiki/Faq) first.\n* Please use GCC version 4.6 and above to compile Sandy Bridge AVX kernels on Linux/MinGW/BSD.\n* Please use Clang version 3.1 and above to compile the library on Sandy Bridge microarchitecture.\n  Clang 3.0 will generate the wrong AVX binary code.\n* Please use GCC version 6 or LLVM version 6 and above to compile Skylake AVX512 kernels.\n* The number of CPUs/cores should less than or equal to 256. On Linux `x86_64` (`amd64`),\n  there is experimental support for up to 1024 CPUs/cores and 128 numa nodes if you build\n  the library with `BIGNUMA=1`.\n* OpenBLAS does not set processor affinity by default.\n  On Linux, you can enable processor affinity by commenting out the line `NO_AFFINITY=1` in\n  Makefile.rule. However, note that this may cause\n  [a conflict with R parallel](https://stat.ethz.ch/pipermail/r-sig-hpc/2012-April/001348.html).\n* On Loongson 3A, `make test` may fail with a `pthread_create` error (`EAGAIN`).\n  However, it will be okay when you run the same test case on the shell.\n\n## Contributing\n\n1. [Check for open issues](https://github.com/xianyi/OpenBLAS/issues) or open a fresh issue\n   to start a discussion around a feature idea or a bug.\n2. Fork the [OpenBLAS](https://github.com/xianyi/OpenBLAS) repository to start making your changes.\n3. Write a test which shows that the bug was fixed or that the feature works as expected.\n4. Send a pull request. Make sure to add yourself to `CONTRIBUTORS.md`.\n\n## Donation\n\nPlease read [this wiki page](https://github.com/xianyi/OpenBLAS/wiki/Donation).\n","versions":[{"ref":"master","manifest":"targets = [ \"//:openblas\" ]","lockFile":"manifest = \"20610c3a5b221ec974ca72e51705d9117afa2260db22dc7ea0610d4272277a69\"\n\n","buck":"load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\nload('//:extract.bzl', 'extract')\n\ngenrule(\n  name = 'make',\n  out = 'out',\n  srcs = glob([\n    '*_check',\n    '*.h',\n    '*.in',\n    '*.c',\n    '*.S',\n    'Makefile*',\n    'driver/**/*',\n    'exports/**/*',\n    'interface/**/*',\n    'kernel/**/*',\n    'lapack/**/*',\n  ]),\n  cmd = ' && '.join([\n    'mkdir -p $OUT',\n    'cd $SRCDIR',\n    'make',\n    'make install PREFIX=$OUT',\n  ]),\n)\n\nprebuilt_cxx_library(\n  name = 'openblas',\n  header_namespace = '',\n  exported_headers = {\n    'cblas.h': extract(':make', 'include/cblas.h'),\n    'f77blas.h': extract(':make', 'include/f77blas.h'),\n    'openblas_config.h': extract(':make', 'include/openblas_config.h'),\n  },\n  static_lib = extract(':make', 'lib/libopenblas.a'),\n  shared_lib = extract(':make', 'lib/libopenblas.so'),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2019-01-22T14:30:34Z","updatedUpstream":"2021-01-13T19:30:42Z","contributors":[{"login":"ismail","avatarUrl":"https://avatars3.githubusercontent.com/u/4255?u=125ec677c10b58fe6cae7749e592588dd8425091&v=4"},{"login":"dev-zero","avatarUrl":"https://avatars0.githubusercontent.com/u/11307?u=5f5fa40e7198091039af55dd8562565d84b8bab5&v=4"},{"login":"notaz","avatarUrl":"https://avatars1.githubusercontent.com/u/18648?v=4"},{"login":"pv","avatarUrl":"https://avatars1.githubusercontent.com/u/35046?v=4"},{"login":"JohannesBuchner","avatarUrl":"https://avatars2.githubusercontent.com/u/51015?v=4"},{"login":"IvanUkhov","avatarUrl":"https://avatars2.githubusercontent.com/u/57440?u=b94067e2f2a6f844eca1311042d491a0f5a042a3&v=4"},{"login":"xsacha","avatarUrl":"https://avatars3.githubusercontent.com/u/61218?v=4"},{"login":"epipping","avatarUrl":"https://avatars0.githubusercontent.com/u/61962?u=8e79536eb2b51369645aee4b76aac71be83b98ac&v=4"},{"login":"seberg","avatarUrl":"https://avatars3.githubusercontent.com/u/61977?u=ffc97ef777eacabf4d3d33e6bef99cb271dcf714&v=4"},{"login":"matthew-brett","avatarUrl":"https://avatars2.githubusercontent.com/u/67612?v=4"},{"login":"ogrisel","avatarUrl":"https://avatars0.githubusercontent.com/u/89061?v=4"},{"login":"bapt","avatarUrl":"https://avatars2.githubusercontent.com/u/103607?u=bfb26fabe959a358d0997deba757f68c5fed56b9&v=4"},{"login":"staticfloat","avatarUrl":"https://avatars0.githubusercontent.com/u/130920?u=2337227d00a2170c09ac775e1292a036219e21d5&v=4"},{"login":"kiwifb","avatarUrl":"https://avatars3.githubusercontent.com/u/151475?v=4"},{"login":"StefanKarpinski","avatarUrl":"https://avatars2.githubusercontent.com/u/153596?v=4"},{"login":"ton","avatarUrl":"https://avatars3.githubusercontent.com/u/157002?v=4"},{"login":"danluu","avatarUrl":"https://avatars1.githubusercontent.com/u/157136?v=4"},{"login":"jeromerobert","avatarUrl":"https://avatars3.githubusercontent.com/u/160365?v=4"},{"login":"lotheac","avatarUrl":"https://avatars2.githubusercontent.com/u/167940?u=3ccd016160f79d64315ac325e4ce3d14fdc43b27&v=4"},{"login":"nolta","avatarUrl":"https://avatars0.githubusercontent.com/u/201456?v=4"},{"login":"thisch","avatarUrl":"https://avatars2.githubusercontent.com/u/206581?u=9e29e12eeae588e59d8e818202a4444173359091&v=4"},{"login":"eschnett","avatarUrl":"https://avatars0.githubusercontent.com/u/213514?v=4"},{"login":"yurivict","avatarUrl":"https://avatars2.githubusercontent.com/u/271906?v=4"},{"login":"kortschak","avatarUrl":"https://avatars0.githubusercontent.com/u/275221?u=afde66b960b9f3326fca83c2fce3e6758a58d6de&v=4"},{"login":"zbeekman","avatarUrl":"https://avatars2.githubusercontent.com/u/279612?u=be329265c480725486df361cfa22be2523cb5644&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":3714,"forks":1020,"topics":[]}},"__N_SSG":true}