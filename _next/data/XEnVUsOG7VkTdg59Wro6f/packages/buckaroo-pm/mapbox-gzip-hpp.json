{"pageProps":{"data":{"packageName":"buckaroo-pm/mapbox-gzip-hpp","name":"mapbox/gzip-hpp","licence":"BSD-2-Clause","description":"Gzip header-only C++ library","readme":"Gzip C++ lib for gzip compression and decompression. Extracted from [mapnik-vector-tile](https://github.com/mapbox/mapnik-vector-tile) for light-weight modularity.\n\n[![Build Status](https://travis-ci.org/mapbox/gzip-hpp.svg?branch=master)](https://travis-ci.com/mapbox/gzip-hpp) [![hpp-skel badge](https://mapbox.s3.amazonaws.com/cpp-assets/hpp-skel-badge_blue.svg)](https://github.com/mapbox/hpp-skel)\n\n## Usage\n```c++\n// Include the specific gzip headers your code needs, for example...\n#include <gzip/compress.hpp>\n#include <gzip/config.hpp>\n#include <gzip/decompress.hpp>\n#include <gzip/utils.hpp>\n#include <gzip/version.hpp>\n\n// All function calls must pass in a pointer of an \n// immutable character sequence (aka a string in C) and its size\nstd::string data = \"hello\";\nconst char * pointer = data.data();\nstd::size_t size = data.size();\n\n// Check if compressed. Can check both gzip and zlib.\nbool c = gzip::is_compressed(pointer, size); // false\n\n// Compress returns a std::string\nstd::string compressed_data = gzip::compress(pointer, size);\n\n// Decompress returns a std::string and decodes both zlib and gzip\nconst char * compressed_pointer = compressed_data.data();\nstd::string decompressed_data = gzip::decompress(compressed_pointer, compressed_data.size());\n\n// Or like so\nstd::string compressed_data = gzip::compress(tile->data(), tile->data.size());\n\n// Or like so\nstd::string value = gzip::compress(node::Buffer::Data(obj), node::Buffer::Length(obj));\n\n// Or...etc\n\n```\n#### Compress\n```c++\n// Optionally include compression level\nstd::size_t size; // No default value, but what happens when not passed??\nint level = Z_DEFAULT_COMPRESSION; // Z_DEFAULT_COMPRESSION is the default if no arg is passed\n\nstd::string compressed_data = gzip::compress(tile->data(), size, level);\n```\n#### Decompress\n```c++\n// No args other than the std:string\nstd::string data = \"hello\";\nstd::string compressed_data = gzip::compress(data);\nconst char * compressed_pointer = compressed_data.data();\n\nstd::string decompressed_data = gzip::decompress(compressed_pointer, compressed_data.size());\n\n```\n\n## Test\n\n```shell\n# build test binaries\nmake\n\n# run tests\nmake test\n```\n\nYou can make Release test binaries as well\n```shell\nBUILDTYPE=Release make\nBUILDTYPE=Release make test\n```\n\n## Versioning\n\nThis library is semantically versioned using the /include/gzip/version.cpp file. This defines a number of macros that can be used to check the current major, minor, or patch versions, as well as the full version string.\n\nHere's how you can check for a particular version to use specific API methods\n```c++\n#if GZIP_VERSION_MAJOR > 2\n// use version 2 api\n#else\n// use older verion apis\n#endif\n```\n\nHere's how to check the version string\n```c++\nstd::cout << \"version: \" << GZIP_VERSION_STRING << \"/n\";\n// => version: 0.2.0\n```\n\nAnd lastly, mathematically checking for a specific version:\n```c++\n#if GZIP_VERSION_CODE > 20001\n// use feature provided in v2.0.1\n#endif\n```\n","versions":[{"ref":"master","manifest":"targets = [ \"//:gzip-hpp\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/catch2\"\nversion = \"1.12.1\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/madler-zlib\"\nversion = \"branch=master\"\n","lockFile":"manifest = \"dcd398354ea348c151602d732e3d505b470523b62142105385bf796bc4ac1e4e\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/catch2\"\ntarget = \"//:catch\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/madler-zlib\"\ntarget = \"//:zlib\"\n\n[[lock]]\nname = \"github.com/buckaroo-pm/catch2\"\nrevision = \"65ab25beb9080c77a7aa0edbfab1812a06e174d1\"\n\n[[lock]]\nname = \"github.com/buckaroo-pm/madler-zlib\"\nrevision = \"5869186a1ce0283cc1ee189f5771ef9cc3236c50\"\n","buck":"prebuilt_cxx_library(\n  name = 'gzip-hpp', \n  header_namespace = 'gzip', \n  header_only = True, \n  exported_headers = subdir_glob([\n    ('include/gzip', '**/*.hpp'), \n  ]), \n  deps = [\n    'buckaroo.github.buckaroo-pm.madler-zlib//:zlib', \n  ], \n  visibility = [\n    'PUBLIC', \n  ], \n)\n","bazel":"","deps":[{"uri":"github.com/buckaroo-pm/catch2","name":"buckaroo-pm/catch2","version":"1.12.1"},{"uri":"github.com/buckaroo-pm/madler-zlib","name":"buckaroo-pm/madler-zlib","version":"branch=master"}],"lock":[{"uri":"0","name":"0","spec":{"name":"github.com/buckaroo-pm/catch2","revision":"65ab25beb9080c77a7aa0edbfab1812a06e174d1"}},{"uri":"1","name":"1","spec":{"name":"github.com/buckaroo-pm/madler-zlib","revision":"5869186a1ce0283cc1ee189f5771ef9cc3236c50"}}]}],"updated":"2018-11-11T20:54:22Z","updatedUpstream":"2021-01-08T18:15:55Z","contributors":[{"login":"zugaldia","avatarUrl":"https://avatars1.githubusercontent.com/u/6964?u=e17bd7e9c8e0d4ca1df6956596cffc4ef10176de&v=4"},{"login":"bookest","avatarUrl":"https://avatars1.githubusercontent.com/u/14640?u=75e815f366d32a63b0d223fe47182a1570a96bb3&v=4"},{"login":"springmeyer","avatarUrl":"https://avatars1.githubusercontent.com/u/20300?v=4"},{"login":"mikelmaron","avatarUrl":"https://avatars1.githubusercontent.com/u/22896?u=f22126445e688b260ca316709407189f669c2083&v=4"},{"login":"mourner","avatarUrl":"https://avatars2.githubusercontent.com/u/25395?u=6f04fa0e30ee06ee7ef8d13dd6c166d0ca70aeea&v=4"},{"login":"sbma44","avatarUrl":"https://avatars2.githubusercontent.com/u/31717?v=4"},{"login":"sgillies","avatarUrl":"https://avatars3.githubusercontent.com/u/33697?u=518c359114c548926c56fef4b51a123e9a4a5d47&v=4"},{"login":"kkaefer","avatarUrl":"https://avatars1.githubusercontent.com/u/52399?u=7b3a53dfef51246b5c1342108a664842b4ea3571&v=4"},{"login":"alfwatt","avatarUrl":"https://avatars1.githubusercontent.com/u/53469?u=ff9e35352887e919bfd74b6ad0bee578af80e165&v=4"},{"login":"anderco","avatarUrl":"https://avatars1.githubusercontent.com/u/55106?v=4"},{"login":"yuletide","avatarUrl":"https://avatars3.githubusercontent.com/u/58695?u=6322adc3fcbff377e32f0e6299d7aaddd841dc6e&v=4"},{"login":"artemp","avatarUrl":"https://avatars1.githubusercontent.com/u/59056?u=84b41abea2ca9e9c6e5a6af9277ee06e8376c68f&v=4"},{"login":"tristen","avatarUrl":"https://avatars1.githubusercontent.com/u/61150?u=40b52d083ac2c6f414ef35c79271c776787e7bd0&v=4"},{"login":"ivovandongen","avatarUrl":"https://avatars1.githubusercontent.com/u/64527?u=e284cc763f7ca8765196fc0f6279e7538742cdfd&v=4"},{"login":"brunoabinader","avatarUrl":"https://avatars2.githubusercontent.com/u/76133?v=4"},{"login":"apendleton","avatarUrl":"https://avatars3.githubusercontent.com/u/78930?u=911348d600e91c721685538a958ee4252a854589&v=4"},{"login":"yhahn","avatarUrl":"https://avatars1.githubusercontent.com/u/83384?u=b2c1ca34e763ba420f510b5a1d62201c1d9624eb&v=4"},{"login":"PureW","avatarUrl":"https://avatars0.githubusercontent.com/u/85910?v=4"},{"login":"AlekseiCherkes","avatarUrl":"https://avatars3.githubusercontent.com/u/87640?u=f75d2bf7fd442db59db853feab57a208761fddef&v=4"},{"login":"ianshward","avatarUrl":"https://avatars2.githubusercontent.com/u/91258?u=5e631aa4328b540f955d9c2e9e2588fcc1bd0d0d&v=4"},{"login":"gundersen","avatarUrl":"https://avatars0.githubusercontent.com/u/93353?v=4"},{"login":"willwhite","avatarUrl":"https://avatars1.githubusercontent.com/u/93564?u=3e17a4a45e3ce686ca811d9ed79257db04ff345f&v=4"},{"login":"lxbarth","avatarUrl":"https://avatars2.githubusercontent.com/u/98233?u=3ca609d2f417501e961958c5bef2f99327b3f84e&v=4"},{"login":"kshehadeh","avatarUrl":"https://avatars0.githubusercontent.com/u/107061?u=d5e994f10868eb85c21bc5b8793da960f3044ed6&v=4"},{"login":"samanpwbb","avatarUrl":"https://avatars1.githubusercontent.com/u/108094?u=f38ea53150b7855f77de960bde5d8f2cb09aa6ed&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":158,"forks":36,"topics":[]}},"__N_SSG":true}