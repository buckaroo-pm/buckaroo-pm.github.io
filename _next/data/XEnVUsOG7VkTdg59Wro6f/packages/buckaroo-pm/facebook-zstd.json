{"pageProps":{"data":{"packageName":"buckaroo-pm/facebook-zstd","name":"facebook/zstd","licence":"NOASSERTION","description":"Zstandard - Fast real-time compression algorithm","readme":"<p align=\"center\"><img src=\"https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/zstd_logo86.png\" alt=\"Zstandard\"></p>\n\n__Zstandard__, or `zstd` as short version, is a fast lossless compression algorithm,\ntargeting real-time compression scenarios at zlib-level and better compression ratios.\nIt's backed by a very fast entropy stage, provided by [Huff0 and FSE library](https://github.com/Cyan4973/FiniteStateEntropy).\n\nThe project is provided as an open-source dual [BSD](LICENSE) and [GPLv2](COPYING) licensed **C** library,\nand a command line utility producing and decoding `.zst`, `.gz`, `.xz` and `.lz4` files.\nShould your project require another programming language,\na list of known ports and bindings is provided on [Zstandard homepage](http://www.zstd.net/#other-languages).\n\n**Development branch status:**\n\n[![Build Status][travisDevBadge]][travisLink]\n[![Build status][AppveyorDevBadge]][AppveyorLink]\n[![Build status][CircleDevBadge]][CircleLink]\n\n[travisDevBadge]: https://travis-ci.org/facebook/zstd.svg?branch=dev \"Continuous Integration test suite\"\n[travisLink]: https://travis-ci.org/facebook/zstd\n[AppveyorDevBadge]: https://ci.appveyor.com/api/projects/status/xt38wbdxjk5mrbem/branch/dev?svg=true \"Windows test suite\"\n[AppveyorLink]: https://ci.appveyor.com/project/YannCollet/zstd-p0yf0\n[CircleDevBadge]: https://circleci.com/gh/facebook/zstd/tree/dev.svg?style=shield \"Short test suite\"\n[CircleLink]: https://circleci.com/gh/facebook/zstd\n\n## Benchmarks\n\nFor reference, several fast compression algorithms were tested and compared\non a server running Linux Debian (`Linux version 4.14.0-3-amd64`),\nwith a Core i7-6700K CPU @ 4.0GHz,\nusing [lzbench], an open-source in-memory benchmark by @inikep\ncompiled with [gcc] 7.3.0,\non the [Silesia compression corpus].\n\n[lzbench]: https://github.com/inikep/lzbench\n[Silesia compression corpus]: http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia\n[gcc]: https://gcc.gnu.org/\n\n| Compressor name         | Ratio | Compression| Decompress.|\n| ---------------         | ------| -----------| ---------- |\n| **zstd 1.3.4 -1**       | 2.877 |   470 MB/s |  1380 MB/s |\n| zlib 1.2.11 -1          | 2.743 |   110 MB/s |   400 MB/s |\n| brotli 1.0.2 -0         | 2.701 |   410 MB/s |   430 MB/s |\n| quicklz 1.5.0 -1        | 2.238 |   550 MB/s |   710 MB/s |\n| lzo1x 2.09 -1           | 2.108 |   650 MB/s |   830 MB/s |\n| lz4 1.8.1               | 2.101 |   750 MB/s |  3700 MB/s |\n| snappy 1.1.4            | 2.091 |   530 MB/s |  1800 MB/s |\n| lzf 3.6 -1              | 2.077 |   400 MB/s |   860 MB/s |\n\n[zlib]: http://www.zlib.net/\n[LZ4]: http://www.lz4.org/\n\nZstd can also offer stronger compression ratios at the cost of compression speed.\nSpeed vs Compression trade-off is configurable by small increments.\nDecompression speed is preserved and remains roughly the same at all settings,\na property shared by most LZ compression algorithms, such as [zlib] or lzma.\n\nThe following tests were run\non a server running Linux Debian (`Linux version 4.14.0-3-amd64`)\nwith a Core i7-6700K CPU @ 4.0GHz,\nusing [lzbench], an open-source in-memory benchmark by @inikep\ncompiled with [gcc] 7.3.0,\non the [Silesia compression corpus].\n\nCompression Speed vs Ratio | Decompression Speed\n---------------------------|--------------------\n![Compression Speed vs Ratio](doc/images/CSpeed2.png \"Compression Speed vs Ratio\") | ![Decompression Speed](doc/images/DSpeed3.png \"Decompression Speed\")\n\nA few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph.\nFor a larger picture including slow modes, [click on this link](doc/images/DCspeed5.png).\n\n\n## The case for Small Data compression\n\nPrevious charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives.\n\nThe smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no \"past\" to build upon.\n\nTo solve this situation, Zstd offers a __training mode__, which can be used to tune the algorithm for a selected type of data.\nTraining Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called \"dictionary\", which must be loaded before compression and decompression.\nUsing this dictionary, the compression ratio achievable on small data improves dramatically.\n\nThe following example uses the `github-users` [sample set](https://github.com/facebook/zstd/releases/tag/v1.1.3), created from [github public API](https://developer.github.com/v3/users/#get-all-users).\nIt consists of roughly 10K records weighing about 1KB each.\n\nCompression Ratio | Compression Speed | Decompression Speed\n------------------|-------------------|--------------------\n![Compression Ratio](doc/images/dict-cr.png \"Compression Ratio\") | ![Compression Speed](doc/images/dict-cs.png \"Compression Speed\") | ![Decompression Speed](doc/images/dict-ds.png \"Decompression Speed\")\n\n\nThese compression gains are achieved while simultaneously providing _faster_ compression and decompression speeds.\n\nTraining works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no _universal dictionary_).\nHence, deploying one dictionary per type of data will provide the greatest benefits.\nDictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file.\n\n### Dictionary compression How To:\n\n1. Create the dictionary\n\n   `zstd --train FullPathToTrainingSet/* -o dictionaryName`\n\n2. Compress with dictionary\n\n   `zstd -D dictionaryName FILE`\n\n3. Decompress with dictionary\n\n   `zstd -D dictionaryName --decompress FILE.zst`\n\n\n## Build instructions\n\n### Makefile\n\nIf your system is compatible with standard `make` (or `gmake`),\ninvoking `make` in root directory will generate `zstd` cli in root directory.\n\nOther available options include:\n- `make install` : create and install zstd cli, library and man pages\n- `make check` : create and run `zstd`, tests its behavior on local platform\n\n### cmake\n\nA `cmake` project generator is provided within `build/cmake`.\nIt can generate Makefiles or other build scripts\nto create `zstd` binary, and `libzstd` dynamic and static libraries.\n\nBy default, `CMAKE_BUILD_TYPE` is set to `Release`.\n\n### Meson\n\nA Meson project is provided within [`build/meson`](build/meson). Follow\nbuild instructions in that directory.\n\nYou can also take a look at [`.travis.yml`](.travis.yml) file for an\nexample about how Meson is used to build this project.\n\nNote that default build type is **release**.\n\n### Visual Studio (Windows)\n\nGoing into `build` directory, you will find additional possibilities:\n- Projects for Visual Studio 2005, 2008 and 2010.\n  + VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.\n- Automated build scripts for Visual compiler by [@KrzysFR](https://github.com/KrzysFR), in `build/VS_scripts`,\n  which will build `zstd` cli and `libzstd` library without any need to open Visual Studio solution.\n\n### Buck\n\nYou can build the zstd binary via buck by executing: `buck build programs:zstd` from the root of the repo.\nThe output binary will be in `buck-out/gen/programs/`.\n\n## Status\n\nZstandard is currently deployed within Facebook. It is used continuously to compress large amounts of data in multiple formats and use cases.\nZstandard is considered safe for production environments.\n\n## License\n\nZstandard is dual-licensed under [BSD](LICENSE) and [GPLv2](COPYING).\n\n## Contributing\n\nThe \"dev\" branch is the one where all contributions are merged before reaching \"master\".\nIf you plan to propose a patch, please commit into the \"dev\" branch, or its own feature branch.\nDirect commit to \"master\" are not permitted.\nFor more information, please read [CONTRIBUTING](CONTRIBUTING.md).\n","versions":[{"ref":"master","manifest":"targets = [ \"//lib:zstd\" ]\n","lockFile":"manifest = \"929dda041b27764d386efa4db220373ec367b25b923bc1c455a9b47a661569ff\"\n\n","buck":"","bazel":"","deps":[],"lock":[]}],"updated":"2019-01-24T18:07:47Z","updatedUpstream":"2021-01-13T22:58:15Z","contributors":[{"login":"loe","avatarUrl":"https://avatars2.githubusercontent.com/u/3238?u=4bbefd65b0829faf553f1b51e4a59b0f8ac24baf&v=4"},{"login":"dreiss","avatarUrl":"https://avatars0.githubusercontent.com/u/4121?v=4"},{"login":"willbailey","avatarUrl":"https://avatars2.githubusercontent.com/u/4264?u=78e7995ba5f923828ffa6d23773cdac7700aeb24&v=4"},{"login":"javache","avatarUrl":"https://avatars3.githubusercontent.com/u/5676?v=4"},{"login":"tkadauke","avatarUrl":"https://avatars1.githubusercontent.com/u/8062?v=4"},{"login":"zpao","avatarUrl":"https://avatars1.githubusercontent.com/u/8445?v=4"},{"login":"jrudolph","avatarUrl":"https://avatars1.githubusercontent.com/u/9868?v=4"},{"login":"passy","avatarUrl":"https://avatars1.githubusercontent.com/u/9906?u=bfebabd79837433e3c043191cb95c9444f983ee3&v=4"},{"login":"bdd","avatarUrl":"https://avatars3.githubusercontent.com/u/11135?u=3b7038c1afdf721c68b22935749897dbb548a8bd&v=4"},{"login":"kassens","avatarUrl":"https://avatars2.githubusercontent.com/u/11849?u=da9f181e6c071ae952064b99ebc00ae5e0651c9e&v=4"},{"login":"spiritloose","avatarUrl":"https://avatars0.githubusercontent.com/u/13047?v=4"},{"login":"cpojer","avatarUrl":"https://avatars2.githubusercontent.com/u/13352?u=eafcb8a7f49f72e829796cef5787587e57a60b8b&v=4"},{"login":"bgolub","avatarUrl":"https://avatars0.githubusercontent.com/u/14890?v=4"},{"login":"ot","avatarUrl":"https://avatars3.githubusercontent.com/u/17024?v=4"},{"login":"tru","avatarUrl":"https://avatars1.githubusercontent.com/u/35614?u=0d82c22570ce274c9a2251f71aa208461de15ae7&v=4"},{"login":"orip","avatarUrl":"https://avatars0.githubusercontent.com/u/36193?v=4"},{"login":"eklipse2k8","avatarUrl":"https://avatars2.githubusercontent.com/u/40286?u=274032e3a417f86beb7fbcdd80cdbc1bd9332207&v=4"},{"login":"kilobyte","avatarUrl":"https://avatars0.githubusercontent.com/u/48801?v=4"},{"login":"michaelforney","avatarUrl":"https://avatars0.githubusercontent.com/u/52851?v=4"},{"login":"AhmedSoliman","avatarUrl":"https://avatars0.githubusercontent.com/u/59670?v=4"},{"login":"claudiugh","avatarUrl":"https://avatars1.githubusercontent.com/u/63356?v=4"},{"login":"sebmarkbage","avatarUrl":"https://avatars2.githubusercontent.com/u/63648?u=f1387d49fb1d3a6e7b26f0e5847eca5fa82c26a5&v=4"},{"login":"phantez","avatarUrl":"https://avatars3.githubusercontent.com/u/65229?v=4"},{"login":"JoshuaGross","avatarUrl":"https://avatars2.githubusercontent.com/u/70602?u=e6a3230525c13df2eb49cac078d0c9c265c1fd5f&v=4"},{"login":"flatcap","avatarUrl":"https://avatars3.githubusercontent.com/u/76760?v=4"}],"fundingLinks":[],"contactLinks":[],"stars":13763,"forks":1283,"topics":[]}},"__N_SSG":true}