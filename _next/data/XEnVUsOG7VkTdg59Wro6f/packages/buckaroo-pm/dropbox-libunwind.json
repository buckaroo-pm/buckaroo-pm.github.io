{"pageProps":{"data":{"packageName":"buckaroo-pm/dropbox-libunwind","name":"dropbox/libunwind","licence":"MIT","description":"Pyston's fork of libunwind; originally from git://git.sv.gnu.org/libunwind.git","readme":"-*- mode: Outline -*-\n\nThis is version 1.0 of the unwind library.  This library supports\nseveral architecture/operating-system combinations:\n\n Linux/x86-64:\tWorks well.\n Linux/x86:\tWorks well.\n Linux/ARM:\tWorks well.\n Linux/IA-64:\tFully tested and supported.\n Linux/PARISC:\tWorks well, but C library missing unwind-info.\n HP-UX/IA-64:\tMostly works but known to have some serious limitations.\n Linux/AArch64:\tNewly added.\n Linux/PPC64:\tNewly added.\n Linux/SuperH:\tNewly added.\n FreeBSD/i386:\tNewly added.\n FreeBSD/x86-64: Newly added (FreeBSD architecture is known as amd64).\n Linux/Tilegx:  Newly added (64-bit mode only).\n\n* General Build Instructions\n\nIn general, this library can be built and installed with the following\ncommands:\n\n\t$ autoreconf -i # Needed only for building from git. Depends on libtool.\n\t$ ./configure\n\t$ make\n\t$ make install prefix=PREFIX\n\nwhere PREFIX is the installation prefix.  By default, a prefix of\n/usr/local is used, such that libunwind.a is installed in\n/usr/local/lib and unwind.h is installed in /usr/local/include.  For\ntesting, you may want to use a prefix of /usr/local instead.\n\n\n* Building with Intel compiler\n\n** Version 8 and later\n\nStarting with version 8, the preferred name for the IA-64 Intel\ncompiler is \"icc\" (same name as on x86).  Thus, the configure-line\nshould look like this:\n\n    $ ./configure CC=icc CFLAGS=\"-g -O3 -ip\" CXX=icc CCAS=gcc CCASFLAGS=-g \\\n\t\tLDFLAGS=\"-L$PWD/src/.libs\"\n\n\n* Building on HP-UX\n\nFor the time being, libunwind must be built with GCC on HP-UX.\n\nlibunwind should be configured and installed on HP-UX like this:\n\n    $ ./configure CFLAGS=\"-g -O2 -mlp64\" CXXFLAGS=\"-g -O2 -mlp64\"\n\nCaveat: Unwinding of 32-bit (ILP32) binaries is not supported\n\tat the moment.\n\n** Workaround for older versions of GCC\n\nGCC v3.0 and GCC v3.2 ship with a bad version of sys/types.h.  The\nworkaround is to issue the following commands before running\n\"configure\":\n\n    $ mkdir $top_dir/include/sys\n    $ cp /usr/include/sys/types.h $top_dir/include/sys\n\nGCC v3.3.2 or later have been fixed and do not require this\nworkaround.\n\n* Building for PowerPC64 / Linux\n\nFor building for power64 you should use:\n\n  $ ./configure CFLAGS=\"-g -O2 -m64\" CXXFLAGS=\"-g -O2 -m64\"\n\nIf your power support altivec registers:\n  $ ./configure CFLAGS=\"-g -O2 -m64 -maltivec\" CXXFLAGS=\"-g -O2 -m64 -maltivec\"\n\nTo check if your processor has support for vector registers (altivec):\n    cat /proc/cpuinfo | grep altivec\nand should have something like this:\n    cpu             : PPC970, altivec supported\n\nIf libunwind seems to not work (backtracing failing), try to compile\nit with -O0, without optimizations. There are some compiler problems\ndepending on the version of your gcc.\n\n* Building on FreeBSD\n\nGeneral building instructions apply. To build and execute several tests,\nyou need libexecinfo library available in ports as devel/libexecinfo.\n\nDevelopment of the port was done of FreeBSD 8.0-STABLE. The library\nwas build with the system compiler that is modified version of gcc 4.2.1,\nas well as the gcc 4.4.3.\n\n* Regression Testing\n\nAfter building the library, you can run a set of regression tests with:\n\n\t$ make check\n\n** Expected results on IA-64 Linux\n\nUnless you have a very recent C library and compiler installed, it is\ncurrently expected to have the following tests fail on IA-64 Linux:\n\n\tGtest-init\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\n\tLtest-init\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\n\ttest-ptrace\t\t(should pass starting with glibc-2.3.x/gcc-3.4)\n\trun-ia64-test-dyn1\t(should pass starting with glibc-2.3.x)\n\nThis does not mean that libunwind cannot be used with older compilers\nor C libraries, it just means that for certain corner cases, unwinding\nwill fail.  Since they're corner cases, it is not likely for\napplications to trigger them.\n\nNote: If you get lots of errors in Gia64-test-nat and Lia64-test-nat, it's\n      almost certainly a sign of an old assembler.  The GNU assembler used\n      to encode previous-stack-pointer-relative offsets incorrectly.\n      This bug was fixed on 21-Sep-2004 so any later assembler will be\n      fine.\n\n** Expected results on x86 Linux\n\nThe following tests are expected to fail on x86 Linux:\n\n\tGtest-resume-sig\t(fails to get SIGUSR2)\n\tLtest-resume-sig\t(likewise)\n\tGtest-dyn1\t\t(no dynamic unwind info support yet)\n\tLtest-dyn1\t\t(no dynamic unwind info support yet)\n\ttest-setjmp\t\t(longjmp() not implemented yet)\n\trun-check-namespace\t(no _Ux86_getcontext yet)\n\ttest-ptrace\n\n** Expected results on x86-64 Linux\n\nThe following tests are expected to fail on x86-64 Linux:\n\n\tGtest-dyn1\t\t(no dynamic unwind info support yet)\n\tLtest-dyn1\t\t(no dynamic unwind info support yet)\n\tGtest-init (see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=18743)\n\tLtest-init\t\t(likewise)\n\ttest-async-sig\t\t(crashes due to bad unwind-info?)\n\ttest-setjmp\t\t(longjmp() not implemented yet)\n\trun-check-namespace\t(no _Ux86_64_getcontext yet)\n\trun-ptrace-mapper\t(??? investigate)\n\trun-ptrace-misc\t(see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=18748\n\t\t\t and http://gcc.gnu.org/bugzilla/show_bug.cgi?id=18749)\n\n** Expected results on PARISC Linux\n\nCaveat: GCC v3.4 or newer is needed on PA-RISC Linux.  Earlier\nversions of the compiler failed to generate the exception-handling\nprogram header (GNU_EH_FRAME) needed for unwinding.\n\nThe following tests are expected to fail on x86-64 Linux:\n\n\tGtest-bt   (backtrace truncated at kill() due to lack of unwind-info)\n\tLtest-bt   (likewise)\n\tGtest-resume-sig  (Gresume.c:my_rt_sigreturn() is wrong somehow)\n\tLtest-resume-sig  (likewise)\n\tGtest-init (likewise)\n\tLtest-init (likewise)\n\tGtest-dyn1 (no dynamic unwind info support yet)\n\tLtest-dyn1 (no dynamic unwind info support yet)\n\ttest-setjmp\t\t(longjmp() not implemented yet)\n\trun-check-namespace\t(toolchain doesn't support HIDDEN yet)\n\n** Expected results on HP-UX\n\n\"make check\" is currently unsupported for HP-UX.  You can try to run\nit, but most tests will fail (and some may fail to terminate).  The\nonly test programs that are known to work at this time are:\n\n     tests/bt\n     tests/Gperf-simple\n     tests/test-proc-info\n     tests/test-static-link\n     tests/Gtest-init\n     tests/Ltest-init\n     tests/Gtest-resume-sig\n     tests/Ltest-resume-sig\n\n** Expected results on PPC64 Linux\n\n\"make check\" should run with no more than 10 out of 24 tests failed.\n\n\n* Performance Testing\n\nThis distribution includes a few simple performance tests which give\nsome idea of the basic cost of various libunwind operations.  After\nbuilding the library, you can run these tests with the following\ncommands:\n\n $ cd tests\n $ make perf\n\n* Contacting the Developers\n\nPlease direct all questions regarding this library to:\n\n\tlibunwind-devel@nongnu.org\n\nYou can do this by sending a mail to libunwind-request@nongnu.org with\na body of:\n\n\tsubscribe libunwind-devel\n\nor you can subscribe and manage your subscription via the\nweb-interface at:\n\n\thttps://savannah.nongnu.org/mail/?group=libunwind\n","versions":[{"ref":"master","manifest":"targets = [ \"//:unwind\" ]","lockFile":"","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\n\ngenrule(\n  name = 'libunwind-common-h',\n  out = 'libunwind-common.h',\n  srcs = [\n    'include/libunwind-common.h.in',\n  ],\n  cmd = \\\n    'cat $SRCS | sed -e \\'s/@PKG_MAJOR@/1/g\\' | ' +\n    'sed -e \\'s/@PKG_MINOR@/1/g\\' | ' +\n    'sed -e \\'s/@PKG_EXTRA@//g\\' > $OUT',\n)\n\nlinux_srcs = glob([\n  'src/os-linux.c',\n  'src/x86_64/*-linux.c',\n  'src/coredump/**/*.c',\n  'src/setjpm/**/*.c',\n  'src/unwind/**/*.c',\n], exclude = [\n  'src/coredump/_UCD_access_reg_freebsd.c',\n])\n\nlinux_exported_headers = {\n  'libunwind.h': 'include/libunwind-x86_64.h',\n  'dwarf-config.h': 'include/tdep-x86_64/dwarf-config.h',\n  'libunwind-common.h': ':libunwind-common-h',\n  'tdep/libunwind_i.h': 'include/tdep-x86_64/libunwind_i.h',\n}\n\ncxx_library(\n  name = 'unwind',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.h'),\n  ]),\n  exported_platform_headers = [\n    ('linux.*', linux_exported_headers),\n  ],\n  headers = subdir_glob([\n    ('src', '**/*.h'),\n  ]),\n  platform_srcs = [\n    ('linux.*', linux_srcs),\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2019-01-14T19:23:06Z","updatedUpstream":"2019-10-24T21:41:27Z","contributors":[{"login":"cbguder","avatarUrl":"https://avatars1.githubusercontent.com/u/13085?u=5ce620026286ec37d8c422ebb9e9e47bada6659f&v=4"},{"login":"outoftime","avatarUrl":"https://avatars3.githubusercontent.com/u/14214?v=4"},{"login":"danielrh","avatarUrl":"https://avatars3.githubusercontent.com/u/47249?u=7698b4b6a3b451ce2da7fb7cbd154e0cc411083a&v=4"},{"login":"rantala","avatarUrl":"https://avatars3.githubusercontent.com/u/65591?v=4"},{"login":"giuseppe","avatarUrl":"https://avatars3.githubusercontent.com/u/67430?u=d3183a7aa47c9d8740f8886c49c657c265664d28&v=4"},{"login":"zacwest","avatarUrl":"https://avatars0.githubusercontent.com/u/74188?u=5e8778a26f395a5c300a41dad7dfc5595be18215&v=4"},{"login":"wfraser","avatarUrl":"https://avatars3.githubusercontent.com/u/75580?u=60c0f3fd2a248c5c6959b79b78e3480f52f67ec3&v=4"},{"login":"masatake","avatarUrl":"https://avatars2.githubusercontent.com/u/77077?v=4"},{"login":"euroelessar","avatarUrl":"https://avatars1.githubusercontent.com/u/83361?v=4"},{"login":"mmilata","avatarUrl":"https://avatars3.githubusercontent.com/u/85857?u=6e497622bb373e49b88befcc0259fd37fb31ade3&v=4"},{"login":"jmesmon","avatarUrl":"https://avatars3.githubusercontent.com/u/103437?v=4"},{"login":"eulex","avatarUrl":"https://avatars3.githubusercontent.com/u/104172?v=4"},{"login":"Lekensteyn","avatarUrl":"https://avatars1.githubusercontent.com/u/164530?u=3e970248cdf154f81f3ef9d88bafa8b9cbd46350&v=4"},{"login":"vapier","avatarUrl":"https://avatars1.githubusercontent.com/u/176950?u=0e8043e12fbbd7b4a641c60ec2dfba969112cabe&v=4"},{"login":"anupcshan","avatarUrl":"https://avatars0.githubusercontent.com/u/201952?v=4"},{"login":"pathscale","avatarUrl":"https://avatars1.githubusercontent.com/u/231871?u=b5fe45157e106fcd2ec0a5eedc117af42a7f638f&v=4"},{"login":"renatomoya","avatarUrl":"https://avatars0.githubusercontent.com/u/266047?u=34b7fcf99f3a1d87271b3c58988919000f2ca995&v=4"},{"login":"kmod","avatarUrl":"https://avatars2.githubusercontent.com/u/271916?u=c8ef3a17ff5dbd00b7a24cb47f7f984d8eb2ba41&v=4"},{"login":"rossdylan","avatarUrl":"https://avatars3.githubusercontent.com/u/343897?u=e4de6259986131c9d35714f30c869023d316d415&v=4"},{"login":"jspaetzel","avatarUrl":"https://avatars1.githubusercontent.com/u/828108?v=4"},{"login":"ashishgandhi","avatarUrl":"https://avatars1.githubusercontent.com/u/970540?u=73af6192670a7b5b896aaeb6e5bccb5129c571b6&v=4"},{"login":"alexlarsson","avatarUrl":"https://avatars2.githubusercontent.com/u/990736?v=4"},{"login":"lclementi","avatarUrl":"https://avatars0.githubusercontent.com/u/1001110?v=4"},{"login":"vutran","avatarUrl":"https://avatars3.githubusercontent.com/u/1088312?u=83af09f7ea8e7936091fe96696d4348d316563fd&v=4"},{"login":"lat","avatarUrl":"https://avatars2.githubusercontent.com/u/1138994?v=4"}],"fundingLinks":[],"contactLinks":[],"stars":16,"forks":9,"topics":[]}},"__N_SSG":true}