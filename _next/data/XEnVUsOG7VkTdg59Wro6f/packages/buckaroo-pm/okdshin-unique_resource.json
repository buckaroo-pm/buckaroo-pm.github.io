{"pageProps":{"data":{"packageName":"buckaroo-pm/okdshin-unique_resource","name":"okdshin/unique_resource","licence":"BSL-1.0","description":"unique_resource, The General RAII Wrapper for Exclusive Ownership Resource Management.","readme":"unique\\_resource, The General RAII Wrapper for Exclusive Ownership Resource Management.\n===\n\nThis is an unique\\_resource implementation with Boost Software License 1.0.  \nThis implementation is based on example implementation in the C++ Standards Committee Paper [N4189](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4189.pdf).\n\nWhat is unique\\_resource\n---\n\nunique\\_resource is a generalization of std::unique\\_ptr.\nstd::unique\\_ptr can be instantiated only by pointer like types.\nunique\\_resource does not have such limitation and, normally, works with a user's customized deleter.\n\nInstallation\n---\n\nPut unique\\_resource.hpp into your including directory.\n\nSample Usage\n---\n\n```c++\n#include <iostream>\n#include \"unique_resource.hpp\"\n\n// some dummy resource functions\nusing handle_t = int;\ndecltype(auto) GenHandle(handle_t i) { return i; }\ndecltype(auto) ReleaseHandle(handle_t handle) {\n\tstd::cout << \"release handle \" << handle << std::endl;\n}\n\ndecltype(auto) make_unique_handle(handle_t i) {\n\treturn std_experimental::make_unique_resource(\n\t\tGenHandle(i), &ReleaseHandle);\n}\nint main() {\n\tauto handle1 = make_unique_handle(1);\n\t{\n\t\tauto handle2 = make_unique_handle(2);\n\t\tstd::cout << handle2.get() << std::endl; // raw handle access by get()\n\t\t// here, handle2 is released.\n\t}\n\tauto handle3 = make_unique_handle(3);\n\thandle3.reset(); // release handle explicitly\n\t{\n\t\tauto handle4 = make_unique_handle(4);\n\t\tauto raw_handle4 = handle4.release(); // strip RAII wrapper\n\t\tReleaseHandle(raw_handle4); // now, we should release handle by hand.\n\t}\n\t{\n\t\tauto handle5 = make_unique_handle(5);\n\t\tauto handle6 = std::move(handle5); // move construct\n\t\thandle6.reset(GenHandle(6)); // reset raw handle\n\t}\n\n\tstd::cout << \"Bye!\" << std::endl;\n}\n```\n\noutput\n\n```\n2\nrelease handle 2\nrelease handle 3\nrelease handle 4\nrelease handle 5\nrelease handle 6\nBye!\nrelease handle 1\n```\n\nThe detailed documentation is on 7.4.1 of [N4189](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4189).\n\nWhat is different from the example implementation in N4189\n---\n\n- License  \nThe original codes have no license to use. This implementation has Boost Software License 1.0 (thanks Sandval and Sommerlad for the consent).\n\n- Namespace  \nThe original codes are included in namespace \"std::experimental\", but adding any user codes into namespace \"std\" or nested namespaces of it cause undefined behavior. So in this implementation, the namespace is changed from \"std::experimental\" to \"std\\_experimental\".\n\n- Some codes for C++11  \nUsing features of C++14, the original codes do not work under C++11. This implementation works under C++11 (and, of course, under C++14 or later).\n\n- Workaround for GCC  \nBecause of the [bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52869) of GCC, the original codes cause compilation error with GCC. This implementation contains the workaround about the bug and works fine with GCC.\n\n- Test codes  \nThe original implementation has test codes but they uses external libraries except standard libraries. This implementation also has test codes but they do not use such libraries except standard ones.\n","versions":[{"ref":"master","manifest":"targets = [ \"//:unique-resource\" ]\n","lockFile":"","buck":"prebuilt_cxx_library(\n  name = 'unique-resource', \n  header_namespace = '', \n  header_only = True, \n  exported_headers = glob([\n    '*.hpp',  \n  ]), \n  visibility = [\n    'PUBLIC', \n  ], \n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2018-11-20T21:17:46Z","updatedUpstream":"2021-01-08T14:56:45Z","contributors":[{"login":"brunoabinader","avatarUrl":"https://avatars2.githubusercontent.com/u/76133?v=4"},{"login":"okdshin","avatarUrl":"https://avatars3.githubusercontent.com/u/1490699?u=5601666a68b8ebc6704ccfdf26d807b674918cbb&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":28,"forks":7,"topics":[]}},"__N_SSG":true}