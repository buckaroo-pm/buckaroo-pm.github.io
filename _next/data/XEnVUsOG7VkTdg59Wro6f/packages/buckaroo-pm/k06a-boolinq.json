{"pageProps":{"data":{"packageName":"buckaroo-pm/k06a-boolinq","name":"k06a/boolinq","licence":"MIT","description":"Simplest C++ header-only LINQ template library","readme":"# boolinq 2.0\n\n[![CI Status](https://travis-ci.org/k06a/boolinq.svg?branch=master)](https://travis-ci.org/k06a/boolinq)\n[![Coverage Status](https://coveralls.io/repos/github/k06a/boolinq/badge.svg?branch=master)](https://coveralls.io/github/k06a/boolinq?branch=master)\n\nC++ single-file header-only Ranges and LINQ template library\n\nJust imagine LINQ support for STL/Qt collections :)\n\nGet source code here: **[boolinq.h](/include/boolinq/boolinq.h)**\n\n### How it looks like?\n\n#### Example with integers\n\n```c++\nint src[] = {1,2,3,4,5,6,7,8};\nauto dst = from(src).where( [](int a){return a%2 == 1;})    // 1,3,5,7\n                    .select([](int a){return a*2;})         // 2,6,10,14\n                    .where( [](int a){return a>2 && a<12;}) // 6,10\n                    .toVector();\n\n// dst type: std::vector<int>\n// dst items: 6,10\n```\n\n#### Example with structs\n\n```c++\nstruct Man\n{\n    std::string name;\n    int age;\n};\n\nMan src[] =\n{\n    {\"Kevin\",14},\n    {\"Anton\",18},\n    {\"Agata\",17},\n    {\"Terra\",20},\n    {\"Layer\",15},\n};\n\nauto dst = from(src).where(  [](const Man & man){return man.age < 18;})\n                    .orderBy([](const Man & man){return man.age;})\n                    .select( [](const Man & man){return man.name;})\n                    .toVector();\n\n// dst type: std::vector<std::string>\n// dst items: \"Kevin\", \"Layer\", \"Agata\"\n```\n\n#### Interesting example\n\n```c++\nstruct Message\n{\n    std::string PhoneA;\n    std::string PhoneB;\n    std::string Text;\n};\n\nMessage messages[] =\n{\n    {\"Anton\",\"Troll\",\"Hello, friend!\"},\n    {\"Denis\",\"Wride\",\"OLOLO\"},\n    {\"Anton\",\"Papay\",\"WTF?\"},\n    {\"Denis\",\"Maloy\",\"How r u?\"},\n    {\"Denis\",\"Wride\",\"Param-pareram!\"},\n};\n\nint DenisUniqueContactCount =\n    from(messages).where(   [](const Message & msg){return msg.PhoneA == \"Denis\";})\n                  .distinct([](const Message & msg){return msg.PhoneB;})\n                  .count();\n\n// DenisUniqueContactCount == 2    \n```\n\n### Containers supported?\n\n- C++: Native arrays, pairs of pointers\n- STL: list, stack, queue, vector, deque, set, map, any compatible ....\n- Qt: QList, QVector, QSet, QMap.\n\n### Operators supported?\n\n#### Today:\n\n- cast&lt;T&gt;()\n- take(int)\n- skip(int)\n- concat(range)\n- where(lambda)\n- select(lambda)\n- reverse()\n- orderBy()\n- orderBy(lambda)\n- groupBy(lambda)\n- distinct()\n- distinct(lambda)\n- for_each(lambda)\n- all()\n- all(lambda)\n- any()\n- any(lambda)\n- sum()\n- sum(lambda)\n- avg()\n- avg(lambda)\n- min()\n- min(lambda)\n- max()\n- max(lambda)\n- count()\n- count(lambda)\n- contains(value)\n- elementAt(int)\n- toSet()\n- toList()\n- toDeque()\n- toVector()\n- toContainer&lt;T&gt;()\n\n#### Custom:\n\n- bytes()\n- bytes&lt;ByteOrder&gt;()\n- unbytes&lt;T&gt;()\n- unbytes&lt;T,ByteOrder&gt;()\n- bits()\n- bits&lt;BitOrder&gt;()\n- bits&lt;BitOrder,ByteOrder&gt;()\n- unbits()\n- unbits&lt;BitOrder&gt;()\n- unbits&lt;T&gt;()\n- unbits&lt;T,BitOrder&gt;()\n- unbits&lt;T,BitOrder,ByteOrder&gt;()\n\n#### Coming soon:\n\n- selectMany(lambda)\n\n#### May be will be:\n\n- gz()\n- ungz()\n- leftJoin\n- rightJoin\n- crossJoin\n- fullJoin\n","versions":[{"ref":"master","manifest":"\n[[dependency]]\npackage = \"github.com/buckaroo-pm/google-googletest\"\nversion = \"branch=master\"\ntargets = [\":googletest\", \":googlemock\"]\nprivate = true\n","lockFile":"manifest = \"8adb814707a8aa183941607049ec5f3524186c86f95414fbfefb754899838605\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/google-googletest\"\ntarget = \"//:googletest\"\n\n[lock.\"github.com/buckaroo-pm/google-googletest\"]\nversions = [ \"branch=master\" ]\nrevision = \"cb8d2c1a2fcd344953e6c129a1a699a2c230551d\"\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps_from_package')\n\ncxx_library(\n  name = 'boolinq',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include/boolinq', 'boolinq.h'),\n  ]),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n\ncxx_test(\n  name = 'test',\n  deps = [\n    ':boolinq',\n    'buckaroo.github.buckaroo-pm.google-googletest//:googlemock',\n    'buckaroo.github.buckaroo-pm.google-googletest//:googletest',\n  ],\n  srcs = glob(['test/*.cpp'], exclude=['test/ToContainerTest.cpp'])\n)\n","bazel":"","deps":[{"uri":"github.com/buckaroo-pm/google-googletest","name":"buckaroo-pm/google-googletest","version":"branch=master"}],"lock":[{"uri":"github.com/buckaroo-pm/google-googletest","name":"buckaroo-pm/google-googletest","spec":{"versions":["branch=master"],"revision":"cb8d2c1a2fcd344953e6c129a1a699a2c230551d"}}]}],"updated":"2019-01-22T17:04:16Z","updatedUpstream":"2020-12-25T11:12:42Z","contributors":[{"login":"Gluttton","avatarUrl":"https://avatars3.githubusercontent.com/u/619261?u=937676ba5a40c3bb7561e2465d7080df93d889e0&v=4"},{"login":"k06a","avatarUrl":"https://avatars2.githubusercontent.com/u/702124?u=00e20e1963ccc9a908a5826b2d8c3b1b1f6acea4&v=4"},{"login":"mmalcolm","avatarUrl":"https://avatars0.githubusercontent.com/u/1201196?v=4"},{"login":"parallaxe","avatarUrl":"https://avatars0.githubusercontent.com/u/1765580?u=caf02d49f999cc7f7fbf9ffd93d1e61b49965f3f&v=4"},{"login":"jell0nek","avatarUrl":"https://avatars2.githubusercontent.com/u/1880184?v=4"},{"login":"babelvit","avatarUrl":"https://avatars0.githubusercontent.com/u/7063984?u=bf3e9e5802ef46ac0beec2b37e6e925221ef68d8&v=4"},{"login":"ZichaoNickFox","avatarUrl":"https://avatars0.githubusercontent.com/u/20886270?u=7ae6c04193c9867d1e4dd3755ad75e82ff3d3bbe&v=4"},{"login":"neilharan","avatarUrl":"https://avatars3.githubusercontent.com/u/53613873?u=2af0043055a5dcbcdec0e5d73cc10510ad2a547e&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":336,"forks":50,"topics":[]}},"__N_SSG":true}