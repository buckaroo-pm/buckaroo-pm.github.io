{"pageProps":{"data":{"packageName":"buckaroo-pm/mapbox-earcut.hpp","name":"mapbox/earcut.hpp","licence":"ISC","description":"Fast, header-only polygon triangulation","readme":"## Earcut\n\nA C++ port of [earcut.js](https://github.com/mapbox/earcut), a fast, [header-only](https://github.com/mapbox/earcut.hpp/blob/master/include/mapbox/earcut.hpp) polygon triangulation library.\n\n[![Travis](https://img.shields.io/travis/mapbox/earcut.hpp.svg)](https://travis-ci.org/mapbox/earcut.hpp)\n[![AppVeyor](https://img.shields.io/appveyor/ci/mrgreywater/earcut-hpp-8wm4o.svg)](https://ci.appveyor.com/project/mrgreywater/earcut-hpp-8wm4o/branch/master)\n[![Coverage](https://img.shields.io/coveralls/github/mapbox/earcut.hpp.svg)](https://coveralls.io/github/mapbox/earcut.hpp)\n[![Coverity Scan](https://img.shields.io/coverity/scan/14000.svg)](https://scan.coverity.com/projects/14000)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/mapbox/earcut.hpp.svg)](http://isitmaintained.com/project/mapbox/earcut.hpp \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/mapbox/earcut.hpp.svg)](http://isitmaintained.com/project/mapbox/earcut.hpp \"Percentage of issues still open\")\n[![Mourner](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\nThe library implements a modified ear slicing algorithm, optimized by [z-order curve](http://en.wikipedia.org/wiki/Z-order_curve) hashing and extended to handle holes, twisted polygons, degeneracies and self-intersections in a way that doesn't _guarantee_ correctness of triangulation, but attempts to always produce acceptable results for practical data like geographical shapes.\n\nIt's based on ideas from [FIST: Fast Industrial-Strength Triangulation of Polygons](http://www.cosy.sbg.ac.at/~held/projects/triang/triang.html) by Martin Held and [Triangulation by Ear Clipping](http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf) by David Eberly.\n\n## Usage\n\n```cpp\n#include <earcut.hpp>\n```\n```cpp\n// The number type to use for tessellation\nusing Coord = double;\n\n// The index type. Defaults to uint32_t, but you can also pass uint16_t if you know that your\n// data won't have more than 65536 vertices.\nusing N = uint32_t;\n\n// Create array\nusing Point = std::array<Coord, 2>;\nstd::vector<std::vector<Point>> polygon;\n\n// Fill polygon structure with actual data. Any winding order works.\n// The first polyline defines the main polygon.\npolygon.push_back({{100, 0}, {100, 100}, {0, 100}, {0, 0}});\n// Following polylines define holes.\npolygon.push_back({{75, 25}, {75, 75}, {25, 75}, {25, 25}});\n\n// Run tessellation\n// Returns array of indices that refer to the vertices of the input polygon.\n// e.g: the index 6 would refer to {25, 75} in this example.\n// Three subsequent indices form a triangle. Output triangles are clockwise.\nstd::vector<N> indices = mapbox::earcut<N>(polygon);\n```\n\nEarcut can triangulate a simple, planar polygon of any winding order including holes. It will even return a robust, acceptable solution for non-simple poygons. Earcut works on a 2D plane. If you have three or more dimensions, you can project them onto a 2D surface before triangulation, or use a more suitable library for the task (e.g [CGAL](https://doc.cgal.org/latest/Triangulation_3/index.html)).\n\n\nIt is also possible to use your custom point type as input. There are default accessors defined for `std::tuple`, `std::pair`, and `std::array`. For a custom type (like Clipper's `IntPoint` type), do this:\n\n```cpp\n// struct IntPoint {\n//     int64_t X, Y;\n// };\n\nnamespace mapbox {\nnamespace util {\n\ntemplate <>\nstruct nth<0, IntPoint> {\n    inline static auto get(const IntPoint &t) {\n        return t.X;\n    };\n};\ntemplate <>\nstruct nth<1, IntPoint> {\n    inline static auto get(const IntPoint &t) {\n        return t.Y;\n    };\n};\n\n} // namespace util\n} // namespace mapbox\n```\n\nYou can also use a custom container type for your polygon. Similar to std::vector<T>, it has to meet the requirements of [Container](http://en.cppreference.com/w/cpp/concept/Container), in particular `size()`, `empty()` and `operator[]`.\n\n<p align=\"center\">\n  <img src=\"https://camo.githubusercontent.com/01836f8ba21af844c93d8d3145f4e9976025a696/68747470733a2f2f692e696d6775722e636f6d2f67314e704c54712e706e67\" alt=\"example triangulation\"/>\n</p>\n\n## Additional build instructions\nIn case you just want to use the earcut triangulation library; copy and include the header file [`<earcut.hpp>`](https://github.com/mapbox/earcut.hpp/blob/master/include/mapbox/earcut.hpp) in your project and follow the steps documented in the section [Usage](#usage).\n\nIf you want to build the test, benchmark and visualization programs instead, follow these instructions:\n\n### Dependencies\n\nBefore you continue, make sure to have the following tools and libraries installed:\n * git ([Ubuntu](https://help.ubuntu.com/lts/serverguide/git.html)/[Windows/macOS](http://git-scm.com/downloads))\n * cmake 3.2+ ([Ubuntu](https://launchpad.net/~george-edison55/+archive/ubuntu/cmake-3.x)/[Windows/macOS](https://cmake.org/download/))\n * OpenGL SDK ([Ubuntu](http://packages.ubuntu.com/de/trusty/libgl1-mesa-dev)/[Windows](https://dev.windows.com/en-us/downloads/windows-10-sdk)/[macOS](https://developer.apple.com/opengl/))\n * Compiler such as [GCC 4.9+, Clang 3.4+](https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test), [MSVC12+](https://www.visualstudio.com/)\n\nNote: On some operating systems such as Windows, manual steps are required to add cmake and [git](http://blog.countableset.ch/2012/06/07/adding-git-to-windows-7-path/) to your PATH environment variable.\n\n### Manual compilation\n\n```bash\ngit clone --recursive https://github.com/mapbox/earcut.hpp.git\ncd earcut.hpp\nmkdir build\ncd build\ncmake ..\nmake\n# ./tests\n# ./bench\n# ./viz\n```\n\n### [Visual Studio](https://www.visualstudio.com/), [Eclipse](https://eclipse.org/), [XCode](https://developer.apple.com/xcode/), ...\n\n```batch\ngit clone --recursive https://github.com/mapbox/earcut.hpp.git\ncd earcut.hpp\nmkdir project\ncd project\ncmake .. -G \"Visual Studio 14 2015\"\n::you can also generate projects for \"Visual Studio 12 2013\", \"XCode\", \"Eclipse CDT4 - Unix Makefiles\"\n```\nAfter completion, open the generated project with your IDE.\n\n\n### [CLion](https://www.jetbrains.com/clion/), [Visual Studio 2017](https://www.visualstudio.com/)\n\nImport the project from https://github.com/mapbox/earcut.hpp.git and you should be good to go!\n\n## Status\n\nThis is currently based on [earcut 2.1.1](https://github.com/mapbox/earcut#211-mar-17-2016).\n","versions":[{"ref":"master","manifest":"targets = [ \"//:earcut\" ]\n","lockFile":"","buck":"prebuilt_cxx_library(\n  name = 'earcut', \n  header_namespace = 'mapbox', \n  header_only = True, \n  exported_headers = subdir_glob([\n    ('include/mapbox', '**/*.hpp'), \n  ]), \n  visibility = [\n    'PUBLIC', \n  ], \n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2018-11-20T19:45:29Z","updatedUpstream":"2021-01-04T03:45:19Z","contributors":[{"login":"hjanetzek","avatarUrl":"https://avatars0.githubusercontent.com/u/1747?u=62284be5d62b75abfd512cf8ce952b054b710442&v=4"},{"login":"zugaldia","avatarUrl":"https://avatars1.githubusercontent.com/u/6964?u=e17bd7e9c8e0d4ca1df6956596cffc4ef10176de&v=4"},{"login":"bookest","avatarUrl":"https://avatars1.githubusercontent.com/u/14640?u=75e815f366d32a63b0d223fe47182a1570a96bb3&v=4"},{"login":"springmeyer","avatarUrl":"https://avatars1.githubusercontent.com/u/20300?v=4"},{"login":"mikelmaron","avatarUrl":"https://avatars1.githubusercontent.com/u/22896?u=f22126445e688b260ca316709407189f669c2083&v=4"},{"login":"mourner","avatarUrl":"https://avatars2.githubusercontent.com/u/25395?u=6f04fa0e30ee06ee7ef8d13dd6c166d0ca70aeea&v=4"},{"login":"sbma44","avatarUrl":"https://avatars2.githubusercontent.com/u/31717?v=4"},{"login":"tmcw","avatarUrl":"https://avatars1.githubusercontent.com/u/32314?u=f6cb43dcfd33ae3df8cd1c6679922b08a24ef509&v=4"},{"login":"sgillies","avatarUrl":"https://avatars3.githubusercontent.com/u/33697?u=518c359114c548926c56fef4b51a123e9a4a5d47&v=4"},{"login":"kkaefer","avatarUrl":"https://avatars1.githubusercontent.com/u/52399?u=7b3a53dfef51246b5c1342108a664842b4ea3571&v=4"},{"login":"alfwatt","avatarUrl":"https://avatars1.githubusercontent.com/u/53469?u=ff9e35352887e919bfd74b6ad0bee578af80e165&v=4"},{"login":"anderco","avatarUrl":"https://avatars1.githubusercontent.com/u/55106?v=4"},{"login":"yuletide","avatarUrl":"https://avatars3.githubusercontent.com/u/58695?u=6322adc3fcbff377e32f0e6299d7aaddd841dc6e&v=4"},{"login":"artemp","avatarUrl":"https://avatars1.githubusercontent.com/u/59056?u=84b41abea2ca9e9c6e5a6af9277ee06e8376c68f&v=4"},{"login":"tristen","avatarUrl":"https://avatars1.githubusercontent.com/u/61150?u=40b52d083ac2c6f414ef35c79271c776787e7bd0&v=4"},{"login":"ivovandongen","avatarUrl":"https://avatars1.githubusercontent.com/u/64527?u=e284cc763f7ca8765196fc0f6279e7538742cdfd&v=4"},{"login":"brunoabinader","avatarUrl":"https://avatars2.githubusercontent.com/u/76133?v=4"},{"login":"apendleton","avatarUrl":"https://avatars3.githubusercontent.com/u/78930?u=911348d600e91c721685538a958ee4252a854589&v=4"},{"login":"yhahn","avatarUrl":"https://avatars1.githubusercontent.com/u/83384?u=b2c1ca34e763ba420f510b5a1d62201c1d9624eb&v=4"},{"login":"PureW","avatarUrl":"https://avatars0.githubusercontent.com/u/85910?v=4"},{"login":"AlekseiCherkes","avatarUrl":"https://avatars3.githubusercontent.com/u/87640?u=f75d2bf7fd442db59db853feab57a208761fddef&v=4"},{"login":"ianshward","avatarUrl":"https://avatars2.githubusercontent.com/u/91258?u=5e631aa4328b540f955d9c2e9e2588fcc1bd0d0d&v=4"},{"login":"gundersen","avatarUrl":"https://avatars0.githubusercontent.com/u/93353?v=4"},{"login":"willwhite","avatarUrl":"https://avatars1.githubusercontent.com/u/93564?u=3e17a4a45e3ce686ca811d9ed79257db04ff345f&v=4"},{"login":"lxbarth","avatarUrl":"https://avatars2.githubusercontent.com/u/98233?u=3ca609d2f417501e961958c5bef2f99327b3f84e&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":429,"forks":63,"topics":["earcut","triangulation","tessellation","geometry","algorithm","rendering","cpp","header-only","polygon"]}},"__N_SSG":true}