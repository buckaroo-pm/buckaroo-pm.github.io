{"pageProps":{"data":{"packageName":"buckaroo-pm/fmt","name":"fmtlib/fmt","licence":"BSD-2-Clause","description":"A modern formatting library","readme":"{fmt}\n=====\n\n.. image:: https://travis-ci.org/fmtlib/fmt.png?branch=master\n   :target: https://travis-ci.org/fmtlib/fmt\n\n.. image:: https://ci.appveyor.com/api/projects/status/ehjkiefde6gucy1v\n   :target: https://ci.appveyor.com/project/vitaut/fmt\n   \n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/fmtlib/fmt\n   :target: https://gitter.im/fmtlib/fmt\n\n**{fmt}** is an open-source formatting library for C++.\nIt can be used as a safe and fast alternative to (s)printf and IOStreams.\n\n`Documentation <http://fmtlib.net/latest/>`__\n\nThis is a development branch that implements the C++ standards proposal `P0645\nText Formatting <http://fmtlib.net/Text%20Formatting.html>`__.\nReleased versions are available from the `Releases page\n<https://github.com/fmtlib/fmt/releases>`__.\n\nFeatures\n--------\n\n* Replacement-based `format API <http://fmtlib.net/dev/api.html>`_ with\n  positional arguments for localization.\n* `Format string syntax <http://fmtlib.net/dev/syntax.html>`_ similar to the one\n  of `str.format <https://docs.python.org/2/library/stdtypes.html#str.format>`_\n  in Python.\n* Safe `printf implementation\n  <http://fmtlib.net/latest/api.html#printf-formatting>`_ including\n  the POSIX extension for positional arguments.\n* Support for user-defined types.\n* High speed: performance of the format API is close to that of glibc's `printf\n  <http://en.cppreference.com/w/cpp/io/c/fprintf>`_ and better than the\n  performance of IOStreams. See `Speed tests`_ and\n  `Fast integer to string conversion in C++\n  <http://zverovich.net/2013/09/07/integer-to-string-conversion-in-cplusplus.html>`_.\n* Small code size both in terms of source code (the minimum configuration\n  consists of just three header files, ``core.h``, ``format.h`` and\n  ``format-inl.h``) and compiled code. See `Compile time and code bloat`_.\n* Reliability: the library has an extensive set of `unit tests\n  <https://github.com/fmtlib/fmt/tree/master/test>`_.\n* Safety: the library is fully type safe, errors in format strings can be\n  reported at compile time, automatic memory management prevents buffer overflow\n  errors.\n* Ease of use: small self-contained code base, no external dependencies,\n  permissive BSD `license\n  <https://github.com/fmtlib/fmt/blob/master/LICENSE.rst>`_\n* `Portability <http://fmtlib.net/latest/index.html#portability>`_ with\n  consistent output across platforms and support for older compilers.\n* Clean warning-free codebase even on high warning levels\n  (``-Wall -Wextra -pedantic``).\n* Support for wide strings.\n* Optional header-only configuration enabled with the ``FMT_HEADER_ONLY`` macro.\n\nSee the `documentation <http://fmtlib.net/latest/>`_ for more details.\n\nExamples\n--------\n\nThis prints ``Hello, world!`` to stdout:\n\n.. code:: c++\n\n    fmt::print(\"Hello, {}!\", \"world\");  // uses Python-like format string syntax\n    fmt::printf(\"Hello, %s!\", \"world\"); // uses printf format string syntax\n\nArguments can be accessed by position and arguments' indices can be repeated:\n\n.. code:: c++\n\n    std::string s = fmt::format(\"{0}{1}{0}\", \"abra\", \"cad\");\n    // s == \"abracadabra\"\n\nFormat strings can be checked at compile time:\n\n.. code:: c++\n\n    // test.cc\n    #define FMT_STRING_ALIAS 1\n    #include <fmt/format.h>\n    std::string s = format(fmt(\"{2}\"), 42);\n\n.. code::\n\n    $ c++ -Iinclude -std=c++14 test.cc\n    ...\n    test.cc:4:17: note: in instantiation of function template specialization 'fmt::v5::format<S, int>' requested here\n    std::string s = format(fmt(\"{2}\"), 42);\n                    ^\n    include/fmt/core.h:778:19: note: non-constexpr function 'on_error' cannot be used in a constant expression\n        ErrorHandler::on_error(message);\n                      ^\n    include/fmt/format.h:2226:16: note: in call to '&checker.context_->on_error(&\"argument index out of range\"[0])'\n          context_.on_error(\"argument index out of range\");\n                   ^\n\n{fmt} can be used as a safe portable replacement for ``itoa``\n(`godbolt <https://godbolt.org/g/NXmpU4>`_):\n\n.. code:: c++\n\n    fmt::memory_buffer buf;\n    format_to(buf, \"{}\", 42);    // replaces itoa(42, buffer, 10)\n    format_to(buf, \"{:x}\", 42);  // replaces itoa(42, buffer, 16)\n    // access the string using to_string(buf) or buf.data()\n\nFormatting of user-defined types is supported via a simple\n`extension API <http://fmtlib.net/latest/api.html#formatting-user-defined-types>`_:\n\n.. code:: c++\n\n    #include \"fmt/format.h\"\n\n    struct date {\n      int year, month, day;\n    };\n\n    template <>\n    struct fmt::formatter<date> {\n      template <typename ParseContext>\n      constexpr auto parse(ParseContext &ctx) { return ctx.begin(); }\n\n      template <typename FormatContext>\n      auto format(const date &d, FormatContext &ctx) {\n        return format_to(ctx.out(), \"{}-{}-{}\", d.year, d.month, d.day);\n      }\n    };\n\n    std::string s = fmt::format(\"The date is {}\", date{2012, 12, 9});\n    // s == \"The date is 2012-12-9\"\n\nYou can create your own functions similar to `format\n<http://fmtlib.net/latest/api.html#format>`_ and\n`print <http://fmtlib.net/latest/api.html#print>`_\nwhich take arbitrary arguments (`godbolt <https://godbolt.org/g/MHjHVf>`_):\n\n.. code:: c++\n\n    // Prints formatted error message.\n    void vreport_error(const char *format, fmt::format_args args) {\n      fmt::print(\"Error: \");\n      fmt::vprint(format, args);\n    }\n    template <typename... Args>\n    void report_error(const char *format, const Args & ... args) {\n      vreport_error(format, fmt::make_format_args(args...));\n    }\n\n    report_error(\"file not found: {}\", path);\n\nNote that ``vreport_error`` is not parameterized on argument types which can\nimprove compile times and reduce code size compared to fully parameterized\nversion.\n\nProjects using this library\n---------------------------\n\n* `0 A.D. <http://play0ad.com/>`_: A free, open-source, cross-platform real-time\n  strategy game\n\n* `AMPL/MP <https://github.com/ampl/mp>`_:\n  An open-source library for mathematical programming\n  \n* `AvioBook <https://www.aviobook.aero/en>`_: A comprehensive aircraft\n  operations suite\n  \n* `Celestia <https://celestia.space/>`_: Real-time 3D visualization of space\n\n* `Ceph <https://ceph.com/>`_: A scalable distributed storage system\n\n* `CUAUV <http://cuauv.org/>`_: Cornell University's autonomous underwater\n  vehicle\n\n* `HarpyWar/pvpgn <https://github.com/pvpgn/pvpgn-server>`_:\n  Player vs Player Gaming Network with tweaks\n\n* `KBEngine <http://kbengine.org/>`_: An open-source MMOG server engine\n\n* `Keypirinha <http://keypirinha.com/>`_: A semantic launcher for Windows\n\n* `Kodi <https://kodi.tv/>`_ (formerly xbmc): Home theater software\n\n* `Lifeline <https://github.com/peter-clark/lifeline>`_: A 2D game\n\n* `Drake <http://drake.mit.edu/>`_: A planning, control, and analysis toolbox\n  for nonlinear dynamical systems (MIT)\n\n* `Envoy <https://lyft.github.io/envoy/>`_: C++ L7 proxy and communication bus\n  (Lyft)\n\n* `FiveM <https://fivem.net/>`_: a modification framework for GTA V\n\n* `MongoDB Smasher <https://github.com/duckie/mongo_smasher>`_: A small tool to\n  generate randomized datasets\n\n* `OpenSpace <http://openspaceproject.com/>`_: An open-source astrovisualization\n  framework\n\n* `PenUltima Online (POL) <http://www.polserver.com/>`_:\n  An MMO server, compatible with most Ultima Online clients\n\n* `quasardb <https://www.quasardb.net/>`_: A distributed, high-performance,\n  associative database\n\n* `readpe <https://bitbucket.org/sys_dev/readpe>`_: Read Portable Executable\n\n* `redis-cerberus <https://github.com/HunanTV/redis-cerberus>`_: A Redis cluster\n  proxy\n\n* `rpclib <http://rpclib.net/>`_: A modern C++ msgpack-RPC server and client\n  library\n\n* `Saddy <https://github.com/mamontov-cpp/saddy-graphics-engine-2d>`_:\n  Small crossplatform 2D graphic engine\n\n* `Salesforce Analytics Cloud <http://www.salesforce.com/analytics-cloud/overview/>`_:\n  Business intelligence software\n\n* `Scylla <http://www.scylladb.com/>`_: A Cassandra-compatible NoSQL data store\n  that can handle 1 million transactions per second on a single server\n\n* `Seastar <http://www.seastar-project.org/>`_: An advanced, open-source C++\n  framework for high-performance server applications on modern hardware\n\n* `spdlog <https://github.com/gabime/spdlog>`_: Super fast C++ logging library\n\n* `Stellar <https://www.stellar.org/>`_: Financial platform\n\n* `Touch Surgery <https://www.touchsurgery.com/>`_: Surgery simulator\n\n* `TrinityCore <https://github.com/TrinityCore/TrinityCore>`_: Open-source\n  MMORPG framework\n\n`More... <https://github.com/search?q=cppformat&type=Code>`_\n\nIf you are aware of other projects using this library, please let me know\nby `email <mailto:victor.zverovich@gmail.com>`_ or by submitting an\n`issue <https://github.com/fmtlib/fmt/issues>`_.\n\nMotivation\n----------\n\nSo why yet another formatting library?\n\nThere are plenty of methods for doing this task, from standard ones like\nthe printf family of function and IOStreams to Boost Format library and\nFastFormat. The reason for creating a new library is that every existing\nsolution that I found either had serious issues or didn't provide\nall the features I needed.\n\nPrintf\n~~~~~~\n\nThe good thing about printf is that it is pretty fast and readily available\nbeing a part of the C standard library. The main drawback is that it\ndoesn't support user-defined types. Printf also has safety issues although\nthey are mostly solved with `__attribute__ ((format (printf, ...))\n<http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html>`_ in GCC.\nThere is a POSIX extension that adds positional arguments required for\n`i18n <https://en.wikipedia.org/wiki/Internationalization_and_localization>`_\nto printf but it is not a part of C99 and may not be available on some\nplatforms.\n\nIOStreams\n~~~~~~~~~\n\nThe main issue with IOStreams is best illustrated with an example:\n\n.. code:: c++\n\n    std::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n\nwhich is a lot of typing compared to printf:\n\n.. code:: c++\n\n    printf(\"%.2f\\n\", 1.23456);\n\nMatthew Wilson, the author of FastFormat, referred to this situation with\nIOStreams as \"chevron hell\". IOStreams doesn't support positional arguments\nby design.\n\nThe good part is that IOStreams supports user-defined types and is safe\nalthough error reporting is awkward.\n\nBoost Format library\n~~~~~~~~~~~~~~~~~~~~\n\nThis is a very powerful library which supports both printf-like format\nstrings and positional arguments. Its main drawback is performance.\nAccording to various benchmarks it is much slower than other methods\nconsidered here. Boost Format also has excessive build times and severe\ncode bloat issues (see `Benchmarks`_).\n\nFastFormat\n~~~~~~~~~~\n\nThis is an interesting library which is fast, safe and has positional\narguments. However it has significant limitations, citing its author:\n\n    Three features that have no hope of being accommodated within the\n    current design are:\n\n    * Leading zeros (or any other non-space padding)\n    * Octal/hexadecimal encoding\n    * Runtime width/alignment specification\n\nIt is also quite big and has a heavy dependency, STLSoft, which might be\ntoo restrictive for using it in some projects.\n\nLoki SafeFormat\n~~~~~~~~~~~~~~~\n\nSafeFormat is a formatting library which uses printf-like format strings\nand is type safe. It doesn't support user-defined types or positional\narguments. It makes unconventional use of ``operator()`` for passing\nformat arguments.\n\nTinyformat\n~~~~~~~~~~\n\nThis library supports printf-like format strings and is very small and\nfast. Unfortunately it doesn't support positional arguments and wrapping\nit in C++98 is somewhat difficult. Also its performance and code compactness\nare limited by IOStreams.\n\nBoost Spirit.Karma\n~~~~~~~~~~~~~~~~~~\n\nThis is not really a formatting library but I decided to include it here\nfor completeness. As IOStreams it suffers from the problem of mixing\nverbatim text with arguments. The library is pretty fast, but slower\non integer formatting than ``fmt::Writer`` on Karma's own benchmark,\nsee `Fast integer to string conversion in C++\n<http://zverovich.net/2013/09/07/integer-to-string-conversion-in-cplusplus.html>`_.\n\nBenchmarks\n----------\n\nSpeed tests\n~~~~~~~~~~~\n\nThe following speed tests results were generated by building\n``tinyformat_test.cpp`` on Ubuntu GNU/Linux 14.04.1 with\n``g++-4.8.2 -O3 -DSPEED_TEST -DHAVE_FORMAT``, and taking the best of three\nruns.  In the test, the format string ``\"%0.10f:%04d:%+g:%s:%p:%c:%%\\n\"`` or\nequivalent is filled 2000000 times with output sent to ``/dev/null``; for\nfurther details see the `source\n<https://github.com/fmtlib/format-benchmark/blob/master/tinyformat_test.cpp>`_.\n\n================= ============= ===========\nLibrary           Method        Run Time, s\n================= ============= ===========\nlibc              printf          1.35\nlibc++            std::ostream    3.42\nfmt 534bff7       fmt::print      1.56\ntinyformat 2.0.1  tfm::printf     3.73\nBoost Format 1.54 boost::format   8.44\nFolly Format      folly::format   2.54\n================= ============= ===========\n\nAs you can see ``boost::format`` is much slower than the alternative methods; this\nis confirmed by `other tests <http://accu.org/index.php/journals/1539>`_.\nTinyformat is quite good coming close to IOStreams.  Unfortunately tinyformat\ncannot be faster than the IOStreams because it uses them internally.\nPerformance of fmt is close to that of printf, being `faster than printf on integer\nformatting <http://zverovich.net/2013/09/07/integer-to-string-conversion-in-cplusplus.html>`_,\nbut slower on floating-point formatting which dominates this benchmark.\n\nCompile time and code bloat\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe script `bloat-test.py\n<https://github.com/fmtlib/format-benchmark/blob/master/bloat-test.py>`_\nfrom `format-benchmark <https://github.com/fmtlib/format-benchmark>`_\ntests compile time and code bloat for nontrivial projects.\nIt generates 100 translation units and uses ``printf()`` or its alternative\nfive times in each to simulate a medium sized project.  The resulting\nexecutable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42),\nmacOS Sierra, best of three) is shown in the following tables.\n\n**Optimized build (-O3)**\n\n============= =============== ==================== ==================\nMethod        Compile Time, s Executable size, KiB Stripped size, KiB\n============= =============== ==================== ==================\nprintf                    2.6                   29                 26\nprintf+string            16.4                   29                 26\nIOStreams                31.1                   59                 55\nfmt                      19.0                   37                 34\ntinyformat               44.0                  103                 97\nBoost Format             91.9                  226                203\nFolly Format            115.7                  101                 88\n============= =============== ==================== ==================\n\nAs you can see, fmt has 60% less overhead in terms of resulting binary code\nsize compared to IOStreams and comes pretty close to ``printf``. Boost Format\nand Folly Format have the largest overheads.\n\n``printf+string`` is the same as ``printf`` but with extra ``<string>``\ninclude to measure the overhead of the latter.\n\n**Non-optimized build**\n\n============= =============== ==================== ==================\nMethod        Compile Time, s Executable size, KiB Stripped size, KiB\n============= =============== ==================== ==================\nprintf                    2.2                   33                 30\nprintf+string            16.0                   33                 30\nIOStreams                28.3                   56                 52\nfmt                      18.2                   59                 50\ntinyformat               32.6                   88                 82\nBoost Format             54.1                  365                303\nFolly Format             79.9                  445                430\n============= =============== ==================== ==================\n\n``libc``, ``lib(std)c++`` and ``libfmt`` are all linked as shared\nlibraries to compare formatting function overhead only. Boost Format\nand tinyformat are header-only libraries so they don't provide any\nlinkage options.\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nPlease refer to `Building the library`__ for the instructions on how to build\nthe library and run the unit tests.\n\n__ http://fmtlib.net/latest/usage.html#building-the-library\n\nBenchmarks reside in a separate repository,\n`format-benchmarks <https://github.com/fmtlib/format-benchmark>`_,\nso to run the benchmarks you first need to clone this repository and\ngenerate Makefiles with CMake::\n\n    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n    $ cd format-benchmark\n    $ cmake .\n\nThen you can run the speed test::\n\n    $ make speed-test\n\nor the bloat test::\n\n    $ make bloat-test\n\nFAQ\n---\n\nQ: how can I capture formatting arguments and format them later?\n\nA: use ``std::tuple``:\n\n.. code:: c++\n\n   template <typename... Args>\n   auto capture(const Args&... args) {\n     return std::make_tuple(args...);\n   }\n\n   auto print_message = [](const auto&... args) {\n     fmt::print(args...);\n   };\n\n   // Capture and store arguments:\n   auto args = capture(\"{} {}\", 42, \"foo\");\n   // Do formatting:\n   std::apply(print_message, args);\n\nLicense\n-------\n\nfmt is distributed under the BSD `license\n<https://github.com/fmtlib/fmt/blob/master/LICENSE.rst>`_.\n\nThe `Format String Syntax\n<http://fmtlib.net/latest/syntax.html>`_\nsection in the documentation is based on the one from Python `string module\ndocumentation <https://docs.python.org/3/library/string.html#module-string>`_\nadapted for the current library. For this reason the documentation is\ndistributed under the Python Software Foundation license available in\n`doc/python-license.txt\n<https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt>`_.\nIt only applies if you distribute the documentation of fmt.\n\nAcknowledgments\n---------------\n\nThe fmt library is maintained by Victor Zverovich (`vitaut\n<https://github.com/vitaut>`_) and Jonathan Müller (`foonathan\n<https://github.com/foonathan>`_) with contributions from many other people.\nSee `Contributors <https://github.com/fmtlib/fmt/graphs/contributors>`_ and\n`Releases <https://github.com/fmtlib/fmt/releases>`_ for some of the names.\nLet us know if your contribution is not listed or mentioned incorrectly and\nwe'll make it right.\n\nThe benchmark section of this readme file and the performance tests are taken\nfrom the excellent `tinyformat <https://github.com/c42f/tinyformat>`_ library\nwritten by Chris Foster.  Boost Format library is acknowledged transitively\nsince it had some influence on tinyformat.\nSome ideas used in the implementation are borrowed from `Loki\n<http://loki-lib.sourceforge.net/>`_ SafeFormat and `Diagnostic API\n<http://clang.llvm.org/doxygen/classclang_1_1Diagnostic.html>`_ in\n`Clang <http://clang.llvm.org/>`_.\nFormat string syntax and the documentation are based on Python's `str.format\n<http://docs.python.org/2/library/stdtypes.html#str.format>`_.\nThanks `Doug Turnbull <https://github.com/softwaredoug>`_ for his valuable\ncomments and contribution to the design of the type-safe API and\n`Gregory Czajkowski <https://github.com/gcflymoto>`_ for implementing binary\nformatting. Thanks `Ruslan Baratov <https://github.com/ruslo>`_ for comprehensive\n`comparison of integer formatting algorithms <https://github.com/ruslo/int-dec-format-tests>`_\nand useful comments regarding performance, `Boris Kaul <https://github.com/localvoid>`_ for\n`C++ counting digits benchmark <https://github.com/localvoid/cxx-benchmark-count-digits>`_.\nThanks to `CarterLi <https://github.com/CarterLi>`_ for contributing various\nimprovements to the code.\n","versions":[{"ref":"master","manifest":"[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\nversion = \"*\"\nprivate = true\n","lockFile":"manifest = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/host-pthread\"\ntarget = \"//:pthread\"\n\n[lock.\"github.com/buckaroo-pm/host-pthread\"]\nversions = [ \"branch=master\" ]\nrevision = \"a62519aa69c8e3243d6065fbf4c1d2de072f86f6\"\n","buck":"load('//:buckaroo_macros.bzl', 'buckaroo_deps_from_package')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\ncxx_library(\n  name = 'fmt',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.h'),\n  ]),\n  srcs = glob([\n    'src/**/*.cc',\n  ]),\n  platform_deps = [\n    ('linux.*', buckaroo_deps_from_package('github.com/buckaroo-pm/host-pthread')),\n  ],\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[{"uri":"github.com/buckaroo-pm/host-pthread","name":"buckaroo-pm/host-pthread","version":"*"}],"lock":[{"uri":"github.com/buckaroo-pm/host-pthread","name":"buckaroo-pm/host-pthread","spec":{"versions":["branch=master"],"revision":"a62519aa69c8e3243d6065fbf4c1d2de072f86f6"}}]}],"updated":"2019-01-18T14:35:16Z","updatedUpstream":"2021-01-13T19:36:17Z","contributors":[{"login":"calumr","avatarUrl":"https://avatars2.githubusercontent.com/u/1751?v=4"},{"login":"bbolli","avatarUrl":"https://avatars3.githubusercontent.com/u/21444?v=4"},{"login":"leolchat","avatarUrl":"https://avatars0.githubusercontent.com/u/34161?u=c8a1f370c42acc8d011ef011b8b7c17dec1f1848&v=4"},{"login":"drrlvn","avatarUrl":"https://avatars1.githubusercontent.com/u/38856?u=3d769becbb71215a558771fb768561b838bec2df&v=4"},{"login":"rpopescu","avatarUrl":"https://avatars3.githubusercontent.com/u/41022?v=4"},{"login":"christianparpart","avatarUrl":"https://avatars1.githubusercontent.com/u/56763?u=3e46099035fcc96e01be5297c24450bf40d92134&v=4"},{"login":"Kronuz","avatarUrl":"https://avatars1.githubusercontent.com/u/56894?v=4"},{"login":"milianw","avatarUrl":"https://avatars1.githubusercontent.com/u/57207?v=4"},{"login":"tchaikov","avatarUrl":"https://avatars2.githubusercontent.com/u/59071?v=4"},{"login":"jelly","avatarUrl":"https://avatars2.githubusercontent.com/u/67428?u=cc677701e49dca0be4cdc6ea10bc60b52a181e4e&v=4"},{"login":"refnum","avatarUrl":"https://avatars1.githubusercontent.com/u/68672?u=b04df0bb2e30569d06cd404da3efda67a330837f&v=4"},{"login":"kookjr","avatarUrl":"https://avatars1.githubusercontent.com/u/76935?v=4"},{"login":"orivej","avatarUrl":"https://avatars1.githubusercontent.com/u/101514?v=4"},{"login":"aruhan","avatarUrl":"https://avatars1.githubusercontent.com/u/129111?u=be7198da92ac70eb11b94464d6a5dc7e3c634203&v=4"},{"login":"smellman","avatarUrl":"https://avatars1.githubusercontent.com/u/135112?v=4"},{"login":"jwilk","avatarUrl":"https://avatars2.githubusercontent.com/u/141546?v=4"},{"login":"Klaim","avatarUrl":"https://avatars0.githubusercontent.com/u/142265?v=4"},{"login":"inguin","avatarUrl":"https://avatars3.githubusercontent.com/u/150479?u=8befc44571d5f2145ebe2cbf2e0e8ac6c9e5ad9f&v=4"},{"login":"Andreone","avatarUrl":"https://avatars0.githubusercontent.com/u/161975?u=980cec47fe54fc07ae5cf43953ce25eadd133848&v=4"},{"login":"amorozov","avatarUrl":"https://avatars2.githubusercontent.com/u/164495?v=4"},{"login":"senior7515","avatarUrl":"https://avatars3.githubusercontent.com/u/175206?u=fe557df3d005d65353fe6bb478bc69698e1b56e7&v=4"},{"login":"waywardmonkeys","avatarUrl":"https://avatars3.githubusercontent.com/u/178582?v=4"},{"login":"dankm","avatarUrl":"https://avatars0.githubusercontent.com/u/179131?u=291fc09102c2642e2cce6279311f7aaadedbfe5b&v=4"},{"login":"lefticus","avatarUrl":"https://avatars1.githubusercontent.com/u/234279?v=4"},{"login":"tajtiattila","avatarUrl":"https://avatars1.githubusercontent.com/u/247562?v=4"}],"fundingLinks":[],"contactLinks":[],"stars":10145,"forks":1239,"topics":["c-plus-plus","formatting","printf","output","chrono","performance"]}},"__N_SSG":true}