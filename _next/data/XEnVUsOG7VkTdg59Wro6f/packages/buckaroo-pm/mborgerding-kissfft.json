{"pageProps":{"data":{"packageName":"buckaroo-pm/mborgerding-kissfft","name":"mborgerding/kissfft","licence":"NOASSERTION","description":"a Fast Fourier Transform (FFT) library that tries to Keep it Simple, Stupid","readme":"# KISS FFT [![Build Status](https://travis-ci.com/mborgerding/kissfft.svg?branch=master)](https://travis-ci.com/mborgerding/kissfft)\n\nKISS FFT - A mixed-radix Fast Fourier Transform based up on the principle, \n\"Keep It Simple, Stupid.\"\n\nThere are many great fft libraries already around.  Kiss FFT is not trying\nto be better than any of them.  It only attempts to be a reasonably efficient, \nmoderately useful FFT that can use fixed or floating data types and can be \nincorporated into someone's C program in a few minutes with trivial licensing.\n\n## USAGE:\n\nThe basic usage for 1-d complex FFT is:\n\n```c\n    #include \"kiss_fft.h\"\n    kiss_fft_cfg cfg = kiss_fft_alloc( nfft ,is_inverse_fft ,0,0 );\n    while ...\n    \n        ... // put kth sample in cx_in[k].r and cx_in[k].i\n        \n        kiss_fft( cfg , cx_in , cx_out );\n        \n        ... // transformed. DC is in cx_out[0].r and cx_out[0].i \n        \n    kiss_fft_free(cfg);\n```\n - **Note**: frequency-domain data is stored from dc up to 2pi.\n    so cx_out[0] is the dc bin of the FFT\n    and cx_out[nfft/2] is the Nyquist bin (if exists)\n\nDeclarations are in \"kiss_fft.h\", along with a brief description of the \nfunctions you'll need to use. \n\nCode definitions for 1d complex FFTs are in kiss_fft.c.\n\nYou can do other cool stuff with the extras you'll find in tools/\n> - multi-dimensional FFTs \n> - real-optimized FFTs  (returns the positive half-spectrum: \n    (nfft/2+1) complex frequency bins)\n> - fast convolution FIR filtering (not available for fixed point)\n> - spectrum image creation\n\nThe core fft and most tools/ code can be compiled to use float, double,\n Q15 short or Q31 samples. The default is float.\n\n\n## BACKGROUND\n\nI started coding this because I couldn't find a fixed point FFT that didn't \nuse assembly code.  I started with floating point numbers so I could get the \ntheory straight before working on fixed point issues.  In the end, I had a \nlittle bit of code that could be recompiled easily to do ffts with short, float\nor double (other types should be easy too).  \n\nOnce I got my FFT working, I was curious about the speed compared to\na well respected and highly optimized fft library.  I don't want to criticize \nthis great library, so let's call it FFT_BRANDX.\nDuring this process, I learned:\n\n> 1. FFT_BRANDX has more than 100K lines of code. The core of kiss_fft is about 500 lines (cpx 1-d).\n> 2. It took me an embarrassingly long time to get FFT_BRANDX working.\n> 3. A simple program using FFT_BRANDX is 522KB. A similar program using kiss_fft is 18KB (without optimizing for size).\n> 4. FFT_BRANDX is roughly twice as fast as KISS FFT in default mode.\n\nIt is wonderful that free, highly optimized libraries like FFT_BRANDX exist.\nBut such libraries carry a huge burden of complexity necessary to extract every \nlast bit of performance.\n\n**Sometimes simpler is better, even if it's not better.**\n\n## FREQUENTLY ASKED QUESTIONS:\n> Q: Can I use kissfft in a project with a ___ license?</br>\n> A: Yes.  See LICENSE below.\n\n> Q: Why don't I get the output I expect?</br>\n> A: The two most common causes of this are\n> \t1) scaling : is there a constant multiplier between what you got and what you want?\n> \t2) mixed build environment -- all code must be compiled with same preprocessor \n> \tdefinitions for FIXED_POINT and kiss_fft_scalar\n\n> Q: Will you write/debug my code for me?</br>\n> A: Probably not unless you pay me.  I am happy to answer pointed and topical questions, but \n> I may refer you to a book, a forum, or some other resource.\n\n\n## PERFORMANCE\n    (on Athlon XP 2100+, with gcc 2.96, float data type)\n\nKiss performed 10000 1024-pt cpx ffts in .63 s of cpu time.\nFor comparison, it took md5sum twice as long to process the same amount of data.\nTransforming 5 minutes of CD quality audio takes less than a second (nfft=1024). \n\n**DO NOT:**\n- use Kiss if you need the Fastest Fourier Transform in the World\n- ask me to add features that will bloat the code\n\n## UNDER THE HOOD\n\nKiss FFT uses a time decimation, mixed-radix, out-of-place FFT. If you give it an input buffer  \nand output buffer that are the same, a temporary buffer will be created to hold the data.\n\nNo static data is used.  The core routines of kiss_fft are thread-safe (but not all of the tools directory).[\n\nNo scaling is done for the floating point version (for speed).  \nScaling is done both ways for the fixed-point version (for overflow prevention).\n\nOptimized butterflies are used for factors 2,3,4, and 5. \n\nThe real (i.e. not complex) optimization code only works for even length ffts.  It does two half-length\nFFTs in parallel (packed into real&imag), and then combines them via twiddling.  The result is \nnfft/2+1 complex frequency bins from DC to Nyquist.  If you don't know what this means, search the web.\n\nThe fast convolution filtering uses the overlap-scrap method, slightly \nmodified to put the scrap at the tail.\n\n## LICENSE\n    Revised BSD License, see COPYING for verbiage. \n    Basically, \"free to use&change, give credit where due, no guarantees\"\n    Note this license is compatible with GPL at one end of the spectrum and closed, commercial software at \n    the other end.  See http://www.fsf.org/licensing/licenses\n  \n## TODO\n - Add real optimization for odd length FFTs \n - Document/revisit the input/output fft scaling\n - Make doc describing the overlap (tail) scrap fast convolution filtering in kiss_fastfir.c\n - Test all the ./tools/ code with fixed point (kiss_fastfir.c doesn't work, maybe others)\n\n## AUTHOR\n    Mark Borgerding\n    Mark@Borgerding.net\n","versions":[],"updated":"2019-03-20T17:50:57Z","updatedUpstream":"2021-01-12T19:56:04Z","contributors":[{"login":"itdaniher","avatarUrl":"https://avatars2.githubusercontent.com/u/22683?u=7f6f97026b5b087937d6bafe2629f150fed94709&v=4"},{"login":"xdissent","avatarUrl":"https://avatars2.githubusercontent.com/u/99367?v=4"},{"login":"JulienMaille","avatarUrl":"https://avatars1.githubusercontent.com/u/182520?u=f8841cf4ee062cc8b56f2441b9a820725e48d040&v=4"},{"login":"hudokkow","avatarUrl":"https://avatars2.githubusercontent.com/u/516183?u=cb6ca80c20d15bb28b5790e9f46eec606f0fa257&v=4"},{"login":"jtojnar","avatarUrl":"https://avatars0.githubusercontent.com/u/705123?u=e5951458a5a0613e6511fef73a5b602954dc3580&v=4"},{"login":"jmcph4","avatarUrl":"https://avatars1.githubusercontent.com/u/717268?v=4"},{"login":"steffen-kiess","avatarUrl":"https://avatars2.githubusercontent.com/u/947515?v=4"},{"login":"orgua","avatarUrl":"https://avatars1.githubusercontent.com/u/1045108?u=9fae9f33fb798879d50198b78728e677b34a0168&v=4"},{"login":"stewdk","avatarUrl":"https://avatars1.githubusercontent.com/u/1050627?v=4"},{"login":"ademuri","avatarUrl":"https://avatars1.githubusercontent.com/u/3051618?v=4"},{"login":"madebr","avatarUrl":"https://avatars3.githubusercontent.com/u/4138939?v=4"},{"login":"lhprojects","avatarUrl":"https://avatars3.githubusercontent.com/u/4395807?u=b6f540f601a89d4b32e6ddc7647ea941daa5ed6f&v=4"},{"login":"rikardfalkeborn","avatarUrl":"https://avatars1.githubusercontent.com/u/4839044?v=4"},{"login":"isplitt","avatarUrl":"https://avatars2.githubusercontent.com/u/8860200?u=1742852746148d012db957d4be1595d42bfc5f83&v=4"},{"login":"lucifetsmith","avatarUrl":"https://avatars3.githubusercontent.com/u/10075178?v=4"},{"login":"mborgerding","avatarUrl":"https://avatars3.githubusercontent.com/u/12561841?v=4"},{"login":"jontio","avatarUrl":"https://avatars3.githubusercontent.com/u/13667843?u=f5448f95e617e9fe865a6ca5f1ba8641c1baf63c&v=4"},{"login":"seeker-Liu","avatarUrl":"https://avatars1.githubusercontent.com/u/22334419?v=4"},{"login":"kpawlak","avatarUrl":"https://avatars0.githubusercontent.com/u/26088080?v=4"},{"login":"bmcdonnell-ionx","avatarUrl":"https://avatars2.githubusercontent.com/u/34172339?v=4"},{"login":"jianlijianli","avatarUrl":"https://avatars3.githubusercontent.com/u/43797323?v=4"}],"fundingLinks":[],"contactLinks":[],"stars":586,"forks":132,"topics":[]}},"__N_SSG":true}