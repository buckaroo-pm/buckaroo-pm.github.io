{"pageProps":{"data":{"packageName":"buckaroo-pm/boost-hana","name":"boostorg/hana","licence":"NOASSERTION","description":"Your standard library for metaprogramming","readme":"# Boost.Hana <a target=\"_blank\" href=\"http://semver.org\">![Version][badge.version]</a> <a target=\"_blank\" href=\"https://travis-ci.org/boostorg/hana\">![Travis status][badge.Travis]</a> <a target=\"_blank\" href=\"https://ci.appveyor.com/project/ldionne/hana\">![Appveyor status][badge.Appveyor]</a> <a target=\"_blank\" href=\"http://melpon.org/wandbox/permlink/g4ozIK33ITDtyGa3\">![Try it online][badge.wandbox]</a> <a target=\"_blank\" href=\"https://gitter.im/boostorg/hana\">![Gitter Chat][badge.Gitter]</a>\n\n> Your standard library for metaprogramming\n\n## Overview\n<!-- Important: keep this in sync with example/overview.cpp -->\n```cpp\n#include <boost/hana.hpp>\n#include <cassert>\n#include <string>\nnamespace hana = boost::hana;\nusing namespace hana::literals;\n\nstruct Fish { std::string name; };\nstruct Cat  { std::string name; };\nstruct Dog  { std::string name; };\n\nint main() {\n  // Sequences capable of holding heterogeneous objects, and algorithms\n  // to manipulate them.\n  auto animals = hana::make_tuple(Fish{\"Nemo\"}, Cat{\"Garfield\"}, Dog{\"Snoopy\"});\n  auto names = hana::transform(animals, [](auto a) {\n    return a.name;\n  });\n  assert(hana::reverse(names) == hana::make_tuple(\"Snoopy\", \"Garfield\", \"Nemo\"));\n\n  // No compile-time information is lost: even if `animals` can't be a\n  // constant expression because it contains strings, its length is constexpr.\n  static_assert(hana::length(animals) == 3u, \"\");\n\n  // Computations on types can be performed with the same syntax as that of\n  // normal C++. Believe it or not, everything is done at compile-time.\n  auto animal_types = hana::make_tuple(hana::type_c<Fish*>, hana::type_c<Cat&>, hana::type_c<Dog*>);\n  auto animal_ptrs = hana::filter(animal_types, [](auto a) {\n    return hana::traits::is_pointer(a);\n  });\n  static_assert(animal_ptrs == hana::make_tuple(hana::type_c<Fish*>, hana::type_c<Dog*>), \"\");\n\n  // And many other goodies to make your life easier, including:\n  // 1. Access to elements in a tuple with a sane syntax.\n  static_assert(animal_ptrs[0_c] == hana::type_c<Fish*>, \"\");\n  static_assert(animal_ptrs[1_c] == hana::type_c<Dog*>, \"\");\n\n  // 2. Unroll loops at compile-time without hassle.\n  std::string s;\n  hana::int_c<10>.times([&]{ s += \"x\"; });\n  // equivalent to s += \"x\"; s += \"x\"; ... s += \"x\";\n\n  // 3. Easily check whether an expression is valid.\n  //    This is usually achieved with complex SFINAE-based tricks.\n  auto has_name = hana::is_valid([](auto&& x) -> decltype((void)x.name) { });\n  static_assert(has_name(animals[0_c]), \"\");\n  static_assert(!has_name(1), \"\");\n}\n```\n\n\n## Documentation\nYou can browse the documentation online at http://boostorg.github.io/hana.\nThe documentation covers everything you should need including installing the\nlibrary, a tutorial explaining what Hana is and how to use it, and an extensive\nreference section with examples. The remainder of this README is mostly for\npeople that wish to work on the library itself, not for its users.\n\nAn offline copy of the documentation can be obtained by checking out the\n`gh-pages` branch. To avoid overwriting the current directory, you can clone\nthe `gh-pages` branch into a subdirectory like `doc/html`:\n```shell\ngit clone http://github.com/boostorg/hana --branch=gh-pages --depth=1 doc/html\n```\n\nAfter issuing this, `doc/html` will contain exactly the same static website\nthat is [available online][Hana.docs]. Note that `doc/html` is automatically\nignored by Git so updating the documentation won't pollute your index.\n\n\n## Hacking on Hana\nSetting yourself up to work on Hana is easy. First, you will need an\ninstallation of [CMake][]. Once this is done, you can `cd` to the root\nof the project and setup the build directory:\n```shell\nmkdir build\ncd build\ncmake ..\n```\n\nUsually, you'll want to specify a custom compiler because the system's\ncompiler is too old:\n```shell\ncmake .. -DCMAKE_CXX_COMPILER=/path/to/compiler\n```\n\nUsually, this will work just fine. However, on some systems, the standard\nlibrary and/or compiler provided by default does not support C++14. If\nthis is your case, the [wiki][Hana.wiki] has more information about\nsetting you up on different systems.\n\nNormally, Hana tries to find Boost headers if you have them on your system.\nIt's also fine if you don't have them; a few tests requiring the Boost headers\nwill be disabled in that case. However, if you'd like Hana to use a custom\ninstallation of Boost, you can specify the path to this custom installation:\n```shell\ncmake .. -DCMAKE_CXX_COMPILER=/path/to/compiler -DBOOST_ROOT=/path/to/boost\n```\n\nYou can now build and run the unit tests and the examples:\n```shell\ncmake --build . --target check\n```\n\nYou should be aware that compiling the unit tests is pretty time and RAM\nconsuming, especially the tests for external adapters. This is due to the\nfact that Hana's unit tests are very thorough, and also that heterogeneous\nsequences in other libraries tend to have horrible compile-time performance.\n\nThere are also optional targets which are enabled only when the required\nsoftware is available on your computer. For example, generating the\ndocumentation requires [Doxygen][] to be installed. An informative message\nwill be printed during the CMake generation step whenever an optional target\nis disabled. You can install any missing software and then re-run the CMake\ngeneration to update the list of available targets.\n\n> #### Tip\n> You can use the `help` target to get a list of all the available targets.\n\nIf you want to add unit tests or examples, just add a source file in `test/`\nor `example/` and then re-run the CMake generation step so the new source\nfile is known to the build system. Let's suppose the relative path from the\nroot of the project to the new source file is `path/to/file.cpp`. When you\nre-run the CMake generation step, a new target named `path.to.file` will be\ncreated, and a test of the same name will also be created. Hence,\n```shell\ncd build # Go back to the build directory\ncmake --build . --target path.to.file # Builds the program associated to path/to/file.cpp\nctest -R path.to.file # Runs the program as a test\n```\n\n> #### Tip for Sublime Text users\n> If you use the provided [hana.sublime-project](hana.sublime-project) file,\n> you can select the \"[Hana] Build current file\" build system. When viewing a\n> file to which a target is associated (like a test or an example), you can\n> then compile it by pressing ⌘B, or compile and then run it using ⇧⌘B.\n\n\n## Project organization\nThe project is organized in a couple of subdirectories.\n- The [benchmark](benchmark) directory contains compile-time and runtime\n  benchmarks to make sure the library is as fast as advertised. The benchmark\n  code is written mostly in the form of [eRuby][] templates. The templates\n  are used to generate C++ files which are then compiled while gathering\n  compilation and execution statistics.\n- The [cmake](cmake) directory contains various CMake modules and other\n  scripts needed by the build system.\n- The [doc](doc) directory contains configuration files needed to generate\n  the documentation. The `doc/html` subdirectory is automatically ignored\n  by Git; you can conveniently store a local copy of the documentation by\n  cloning the `gh-pages` branch into that directory, as explained above.\n- The [example](example) directory contains the source code for all the\n  examples of both the tutorial and the reference documentation.\n- The [include](include) directory contains the library itself, which is\n  header only.\n- The [test](test) directory contains the source code for all the unit tests.\n\n\n## Contributing\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n\n## License\nPlease see [LICENSE.md](LICENSE.md).\n\n\n## Releasing\nThis section acts as a reminder of the few simple steps required to release a\nnew version of the library. This is only relevant to Hana's developers. To\nrelease a new version of the library, make sure the current version in\n`include/boost/hana/version.hpp` matches the release you're about to publish.\nThen, create an annotated tag with:\n```sh\ngit tag -a --file=- v<version> <<EOM\n...your message here...\nEOM\n```\n\nThen, push the tag and create a new GitHub release pointing to that tag.\nOnce that is done, bump the version number in `include/boost/hana/version.hpp`\nso that it matches the next _planned_ release. Finally, do not forget to update\nthe [Homebrew formula][] to point to the latest version.\n\n\n<!-- Links -->\n[badge.Appveyor]: https://ci.appveyor.com/api/projects/status/github/boostorg/hana?svg=true&branch=master\n[badge.Gitter]: https://img.shields.io/badge/gitter-join%20chat-blue.svg\n[badge.Travis]: https://travis-ci.org/boostorg/hana.svg?branch=master\n[badge.version]: https://badge.fury.io/gh/boostorg%2Fhana.svg\n[badge.Wandbox]: https://img.shields.io/badge/try%20it-online-blue.svg\n[CMake]: http://www.cmake.org\n[Doxygen]: http://www.doxygen.org\n[eRuby]: http://en.wikipedia.org/wiki/ERuby\n[Hana.docs]: http://boostorg.github.io/hana\n[Hana.wiki]: https://github.com/boostorg/hana/wiki\n[Homebrew formula]: https://github.com/Homebrew/homebrew-core/blob/master/Formula/hana.rb\n","versions":[{"ref":"master","manifest":"targets = [ \"//:hana\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/boost-core\"\nversion = \"branch=master\"\n","lockFile":"manifest = \"b72109fa2496c99c860ed341fb4b9aae4d1cbd0843204ec899758445a079b7e9\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/boost-core\"\ntarget = \"//:core\"\n\n[lock.\"github.com/buckaroo-pm/boost-assert\"]\nversions = [ \"branch=master\" ]\nrevision = \"417f80abf86251b29609a9747dae7756236699aa\"\n\n[lock.\"github.com/buckaroo-pm/boost-config\"]\nversions = [ \"branch=master\" ]\nrevision = \"4392ed19b232ed2dde7623843d7e30ef669d860e\"\n\n[lock.\"github.com/buckaroo-pm/boost-core\"]\nversions = [ \"branch=master\" ]\nrevision = \"82480080750b32b3ef2e3f12157b5c556ae35c0d\"\n","buck":"load('//:buckaroo_macros.bzl', 'buckaroo_deps')\nload('//:subdir_glob.bzl', 'subdir_glob')\n\nprebuilt_cxx_library(\n  name = 'hana',\n  header_only = True,\n  header_namespace = 'boost',\n  exported_headers = subdir_glob([\n    ('include/boost', '**/*.hpp'),\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[{"uri":"github.com/buckaroo-pm/boost-core","name":"buckaroo-pm/boost-core","version":"branch=master"}],"lock":[{"uri":"github.com/buckaroo-pm/boost-assert","name":"buckaroo-pm/boost-assert","spec":{"versions":["branch=master"],"revision":"417f80abf86251b29609a9747dae7756236699aa"}},{"uri":"github.com/buckaroo-pm/boost-config","name":"buckaroo-pm/boost-config","spec":{"versions":["branch=master"],"revision":"4392ed19b232ed2dde7623843d7e30ef669d860e"}},{"uri":"github.com/buckaroo-pm/boost-core","name":"buckaroo-pm/boost-core","spec":{"versions":["branch=master"],"revision":"82480080750b32b3ef2e3f12157b5c556ae35c0d"}}]},{"ref":"v1.0.2","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v1.0.1","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v1.0.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.7.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.6.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.5.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.4.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.3.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]},{"ref":"v0.2.0","manifest":"targets = [ \"//:hana\" ]\n","lockFile":"manifest = \"d5b0b585f803455c6215c118623251d7d259be742589bfdca8a82d4957205b17\"\n\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'hana',\n  header_namespace = '',\n  exported_headers = subdir_glob([\n    ('include', '**/*.hpp'),\n    ('include', '**/*.h'),\n    ('include', '**/*.inl'),\n  ]),\n  headers = subdir_glob([\n    ('src', '**/*.hpp'),\n  ]),\n  srcs = glob([\n    'src/**/*.cpp',\n  ]),\n  deps = buckaroo_deps(),\n  visibility = [\n    'PUBLIC',\n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2019-01-29T10:10:21Z","updatedUpstream":"2021-01-13T08:40:16Z","contributors":[{"login":"danieljames","avatarUrl":"https://avatars1.githubusercontent.com/u/7543?v=4"},{"login":"tzlaine","avatarUrl":"https://avatars2.githubusercontent.com/u/82177?u=77ed0c2e28a50671a931f467242b7d0ddb22f821&v=4"},{"login":"dvd0101","avatarUrl":"https://avatars3.githubusercontent.com/u/129572?v=4"},{"login":"mclow","avatarUrl":"https://avatars0.githubusercontent.com/u/167192?u=2aa259cac18f2121fec31e4e0e982ae454891b0c&v=4"},{"login":"purpleKarrot","avatarUrl":"https://avatars3.githubusercontent.com/u/185240?u=1e460c214ce0f4d75441a7456e69f474942c75d7&v=4"},{"login":"snizovtsev","avatarUrl":"https://avatars2.githubusercontent.com/u/207892?u=bf8895f30927b7ec59be167a6457b2769e1afcb4&v=4"},{"login":"ericniebler","avatarUrl":"https://avatars1.githubusercontent.com/u/225757?v=4"},{"login":"vprus","avatarUrl":"https://avatars2.githubusercontent.com/u/225915?v=4"},{"login":"Beman","avatarUrl":"https://avatars2.githubusercontent.com/u/226112?v=4"},{"login":"mjcaisse","avatarUrl":"https://avatars0.githubusercontent.com/u/230295?u=03f8b6d6c0a2fe63b6d14f5c42e80c8c58ba56cc&v=4"},{"login":"nathanhourt","avatarUrl":"https://avatars0.githubusercontent.com/u/271977?u=c7dad185082cbb3961d7eb85d796e2535d9817f8&v=4"},{"login":"ldionne","avatarUrl":"https://avatars0.githubusercontent.com/u/700834?u=3d2dd80d43f96e6fd22219498790622944a25f19&v=4"},{"login":"glenfe","avatarUrl":"https://avatars2.githubusercontent.com/u/712180?u=f15319dfd6ca8062678725e9510d916b821db766&v=4"},{"login":"KholdStare","avatarUrl":"https://avatars0.githubusercontent.com/u/836110?v=4"},{"login":"SuperV1234","avatarUrl":"https://avatars3.githubusercontent.com/u/918661?u=777c33754c4a5ae474a0b3c99f0c260de9768f5c&v=4"},{"login":"qchateau","avatarUrl":"https://avatars3.githubusercontent.com/u/1497628?v=4"},{"login":"ricejasonf","avatarUrl":"https://avatars3.githubusercontent.com/u/2257044?u=1a0e8054baee4f62cb020b522c7bfbb5912a0241&v=4"},{"login":"badair","avatarUrl":"https://avatars3.githubusercontent.com/u/2570307?u=73bdf09548b05476194b44ddbb49d7f61c46e5cb&v=4"},{"login":"Kojoley","avatarUrl":"https://avatars3.githubusercontent.com/u/2743474?v=4"},{"login":"grafikrobot","avatarUrl":"https://avatars1.githubusercontent.com/u/2998253?u=698bf9a307f7645a7e6fb669a56003778acc5380&v=4"},{"login":"pdimov","avatarUrl":"https://avatars0.githubusercontent.com/u/3116174?v=4"},{"login":"MarisaKirisame","avatarUrl":"https://avatars2.githubusercontent.com/u/3397377?u=8040287c8f7c4b688484716cb5c5206926bec978&v=4"},{"login":"shreyans800755","avatarUrl":"https://avatars2.githubusercontent.com/u/3727351?u=490178db3a4cfc896599ecb888e97d78eadd4769&v=4"},{"login":"sdebionne","avatarUrl":"https://avatars1.githubusercontent.com/u/4699120?v=4"},{"login":"jzmaddock","avatarUrl":"https://avatars2.githubusercontent.com/u/5011768?v=4"}],"fundingLinks":[],"contactLinks":[],"stars":1181,"forks":154,"topics":["hana","boost","cpp","metaprogramming","cpp14","cpp11","header-only"]}},"__N_SSG":true}