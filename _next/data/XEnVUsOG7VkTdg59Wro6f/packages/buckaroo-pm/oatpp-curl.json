{"pageProps":{"data":{"packageName":"buckaroo-pm/oatpp-curl","name":"oatpp/oatpp-curl","licence":"Apache-2.0","description":"RequestExecutor for oatpp's ApiClient based on libcurl. Supports both Sync and Async APIs.","readme":"# oatpp-curl\n\n**oatpp-curl** is a wrapper over the libcurl. It adapts libcurl to be used as a ```RequestExecutor``` in the oatpp's ```ApiClient```.  \nIt supports all features of oatpp ApiClient together with Synchronous and Asynchronous oatpp's APIs.\n\nMore about oat++:\n- Website: [https://oatpp.io](https://oatpp.io)\n- ```ApiClient``` docs: [https://oatpp.io/docs/component/api-client](https://oatpp.io/docs/component/api-client)\n- Usage example: [oatpp-examples/ApiClient-Demo](https://github.com/oatpp/oatpp-examples/tree/master/ApiClient-Demo)\n\n## Requires\n\nlibcurl installed.\n\n## oatpp ApiClient ?\n\noatpp ```ApiClient``` is a mechanism which enables you to generate Web Api Clients in declarative manner.\nUnder the hood it uses provided ```RequestExecutor``` (ex.: ```oatpp::curl::RequestExecutor```) to perform http requests. Thus you are abstracted from the low-level http-client library implementation and can substitute any other http-client library at any time with zero code changes.  \n*Roughly you may treat oatpp ```ApiClient``` as Java Retrofit for C++.*\n\n### Example\n\n*This example is partially taken from [oatpp-consul](https://github.com/oatpp/oatpp-consul) implementation*  \n\n#### Declare ApiClient\n\nDeclare ```ApiClient``` for remote service using code-generation\n\n```c++\nclass MyApiClient : public oatpp::web::client::ApiClient {\n#include OATPP_CODEGEN_BEGIN(ApiClient)\n  \n  API_CLIENT_INIT(DemoApiClient)\n  \n  API_CALL(\"GET\", \"v1/kv/{key}\", kvGet, PATH(String, key))\n  API_CALL(\"GET\", \"v1/kv/{key}\", kvGetInDC, PATH(String, key), QUERY(String, datacenter, \"dc\"))\n  \n  API_CALL(\"GET\", \"v1/kv/{key}?raw\", kvGetRaw, PATH(String, key))\n  API_CALL(\"GET\", \"v1/kv/{key}?raw&dc={dc}\", kvGetRawInDC, PATH(String, key), PATH(String, datacenter, \"dc\"))\n  \n  API_CALL(\"PUT\", \"v1/kv/{key}\", kvPut, PATH(String, key), BODY_STRING(String, data))\n  API_CALL(\"PUT\", \"v1/kv/{key}\", kvPutInDC, PATH(String, key), BODY_STRING(String, data), QUERY(String, datacenter, \"dc\"))\n  \n#include OATPP_CODEGEN_END(ApiClient)\n};\n```\n\n#### Create ApiClient instance\n\nCreate MyApiClient instance and configure it to use ```oatpp::curl::RequestExecutor```\n\n```c++\n/* Create ObjectMapper for serialization of DTOs  */\nauto objectMapper = oatpp::parser::json::mapping::ObjectMapper::createShared();\n\n/* Create oatpp-curl RequestExecutor with baseUrl */\nauto requestExecutor = oatpp::curl::RequestExecutor::createShared(\"http://localhost:8500/\");\n\n/* Instantiate MyApiClient */\nauto myApiClient = MyApiClient::createShared(requestExecutor, objectMapper);\n```\n\n#### Make calls\n\n```c++\n\n// like that...\n\nauto value = myApiClient->kvGetRaw(\"key\")->readBodyToString();\nOATPP_LOGD(\"response\", \"value='%s'\", value->c_str());\n\n// or like that...\n\nauto response = myApiClient->kvPut(\"key\", \"some-value\");\nif(response->statusCode == 200){\n  auto body = response->readBodyToString();\n  if(body && body == \"true\") {\n    OATPP_LOGD(\"response\", \"value successfully saved\");\n  }\n}\n```\n\n## More\n\n- [oatpp-examples/ApiClient-Demo](https://github.com/oatpp/oatpp-examples/tree/master/ApiClient-Demo) - Full example project. ApiClient to ```http://httpbin.org/``` API with Sync and Async examples.\n- [oatpp-consul](https://github.com/oatpp/oatpp-consul) - oatpp-consul integration based on ```ApiClient```.\n","versions":[{"ref":"master","manifest":"targets = [ \"//:oatpp-curl\" ]\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/oatpp\"\nversion = \"branch=master\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/pkg-config-curl\"\nversion = \"branch=master\"\nprivate = true\n","lockFile":"manifest = \"9720e49e12d8ea108c6d547310486c6119e5a59788495d6ca58d48199f2d3cbb\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/oatpp\"\ntarget = \"//:oatpp\"\n\n[[dependency]]\npackage = \"github.com/buckaroo-pm/pkg-config-curl\"\ntarget = \"//:curl\"\n\n[lock.\"github.com/buckaroo-pm/oatpp\"]\nversions = [ \"branch=master\" ]\nrevision = \"148e47df363ebea5b8d99476d0741a47ccf75623\"\n\n[lock.\"github.com/buckaroo-pm/oatpp\".lock.\"github.com/buckaroo-pm/host-pthread\"]\nversions = [ \"branch=master\" ]\nrevision = \"a62519aa69c8e3243d6065fbf4c1d2de072f86f6\"\n\n[lock.\"github.com/buckaroo-pm/pkg-config-curl\"]\nversions = [ \"branch=master\" ]\nrevision = \"c0eac677dc0066d1c994bf68edd314deebe7cb74\"\n","buck":"load('//:subdir_glob.bzl', 'subdir_glob')\nload('//:buckaroo_macros.bzl', 'buckaroo_deps')\n\ncxx_library(\n  name = 'oatpp-curl', \n  header_namespace = 'oatpp-curl', \n  exported_headers = subdir_glob([\n    ('', '*.hpp'), \n    ('', 'io/**/*.hpp'), \n  ]), \n  srcs = glob([\n    '*.cpp', \n    'io/**/*.cpp', \n  ]), \n  licenses = [\n    'LICENSE', \n  ], \n  deps = buckaroo_deps(), \n  visibility = [\n    'PUBLIC', \n  ], \n)\n","bazel":"","deps":[{"uri":"github.com/buckaroo-pm/oatpp","name":"buckaroo-pm/oatpp","version":"branch=master"},{"uri":"github.com/buckaroo-pm/pkg-config-curl","name":"buckaroo-pm/pkg-config-curl","version":"branch=master"}],"lock":[{"uri":"github.com/buckaroo-pm/oatpp","name":"buckaroo-pm/oatpp","spec":{"versions":["branch=master"],"revision":"148e47df363ebea5b8d99476d0741a47ccf75623","lock":{"github.com/buckaroo-pm/host-pthread":{"versions":["branch=master"],"revision":"a62519aa69c8e3243d6065fbf4c1d2de072f86f6"}}}},{"uri":"github.com/buckaroo-pm/pkg-config-curl","name":"buckaroo-pm/pkg-config-curl","spec":{"versions":["branch=master"],"revision":"c0eac677dc0066d1c994bf68edd314deebe7cb74"}}]}],"updated":"2019-01-18T22:42:32Z","updatedUpstream":"2020-12-21T01:01:14Z","contributors":[{"login":"bamkrs","avatarUrl":"https://avatars1.githubusercontent.com/u/4124784?u=45a3f055e0344a594250e283d2164c0caa27e86b&v=4"},{"login":"lganzzzo","avatarUrl":"https://avatars0.githubusercontent.com/u/5940640?u=fc944208de7aec5de6150e11a7e98095961ae7db&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":2,"forks":6,"topics":["cloud","rest-client","web-client","cpp11","oatpp","libcurl"]}},"__N_SSG":true}