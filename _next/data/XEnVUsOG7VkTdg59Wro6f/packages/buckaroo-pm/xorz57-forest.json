{"pageProps":{"data":{"packageName":"buckaroo-pm/xorz57-forest","name":"xorz57/forest","licence":"MIT","description":"Template Library of Tree Data Structures","readme":"![forest logo](forest.png)\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/8e5jutnq0a8b458f/branch/master?svg=true)](https://ci.appveyor.com/project/xorz57/forest/branch/master)\r\n[![Build Status](https://travis-ci.org/xorz57/forest.svg?branch=master)](https://travis-ci.org/xorz57/forest)\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/f2eb2dcf98794d03b5cf0d4c9910db39)](https://www.codacy.com/app/xorz57/forest?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=xorz57/forest&amp;utm_campaign=Badge_Grade)\r\n[![codecov](https://codecov.io/gh/xorz57/forest/branch/master/graph/badge.svg)](https://codecov.io/gh/xorz57/forest)\r\n\r\n## Features\r\n\r\n|Operations|`avltree.hpp`|`rbtree.hpp`|`splaytree.hpp`|\r\n|---|---|---|---|\r\n|`insert(key, value)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`search(key)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`delete(key)`|:x:|:x:|:x:|\r\n|`pre_order_traversal(handler)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`in_order_traversal(handler)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`post_order_traversal(handler)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`breadth_first_traversal(handler)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`in_order_predecessor(key)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`in_order_succecessor(key)`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n|`root()`|:heavy_check_mark:|:heavy_check_mark:|:heavy_check_mark:|\r\n\r\n## Installation\r\n\r\n#### Use your favorite package manager\r\n- `vcpkg install forest --head`\r\n\r\n#### Or simply [download](https://github.com/xorz57/forest/releases/latest) the header files\r\n\r\n#### Or use CMake\r\n\r\n```sh\r\n$ mkdir build\r\n$ cmake ..\r\n$ sudo make install\r\n```\r\n\r\n#### Or use [Buck](https://buckbuild.com/)\r\n\r\n```sh\r\n$ buck run test \r\n$ buck run examples:avltree\r\n$ buck run examples:rbtree\r\n$ buck run examples:splaytree\r\n```\r\n\r\n## Examples\r\n\r\n#### Inserting nodes\r\n\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Searching nodes\r\n\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  auto result = rbtree.search(3);\r\n  if (result != nullptr) {\r\n    std::cout << \"Found node with key 3\" << std::endl;\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Traversing a tree\r\n###### Functions `in_order_traversal()`, `pre_order_traversal()`, `post_order_traversal()` are recursive and should be used with caution\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  rbtree.pre_order_traversal([](auto key, auto value) { std::cout << key << \"->\" << value << std::endl; });\r\n\r\n  rbtree.in_order_traversal([](auto key, auto value) { std::cout << key << \"->\" << value << std::endl; });\r\n\r\n  rbtree.post_order_traversal([](auto key, auto value) { std::cout << key << \"->\" << value << std::endl; });\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Finding the root\r\n\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  auto root = rbtree.root();\r\n  if (root != nullptr) {\r\n    std::cout << \"Root: \" << root->key << std::endl;\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Finding the node with the minimum or maximum key\r\n\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  auto min = rbtree.minimum();\r\n  if (min != nullptr) {\r\n    std::cout << \"Minimum: \" << min->key << std::endl;\r\n  }\r\n\r\n  auto max = rbtree.maximum();\r\n  if (max != nullptr) {\r\n    std::cout << \"Maximum: \" << max->key << std::endl;\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Finding the predecessor or successor of a node\r\n\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  auto predecessor = rbtree.predecessor(90);\r\n  if (predecessor != nullptr) {\r\n    std::cout << \"Predecessor of 90: \" << predecessor->key << std::endl;\r\n  }\r\n\r\n  auto successor = rbtree.successor(3);\r\n  if (successor != nullptr) {\r\n    std::cout << \"Successor of 3: \" << successor->key << std::endl;\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Calculating the height of a tree\r\n###### Function `height()` is recursive and should be used with caution\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  std::cout << \"Height: \" << rbtree.height() << std::endl;\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n#### Calculating the size of a tree\r\n###### Function `size()` is recursive and should be used with caution\r\n```cpp\r\n#include \"rbtree.h\"\r\n#include <string>\r\n\r\nint main() {\r\n  forest::rbtree <int, std::string> rbtree;\r\n\r\n  rbtree.insert(2 , \"Thor\");\r\n  rbtree.insert(4 , \"Odin\");\r\n  rbtree.insert(90, \"Loki\");\r\n  rbtree.insert(3 , \"Baldr\");\r\n  rbtree.insert(0 , \"Frigg\");\r\n  rbtree.insert(14, \"Eir\");\r\n  rbtree.insert(45, \"Heimdall\");\r\n\r\n  std::cout << \"Size: \" << rbtree.size() << std::endl;\r\n\r\n  return 0;\r\n}\r\n```\r\n","versions":[{"ref":"master","manifest":"targets = [ \"//:forest\" ]\n","lockFile":"","buck":"prebuilt_cxx_library(\n  name = 'forest', \n  header_namespace = 'forest', \n  header_only = True, \n  exported_headers = subdir_glob([\n    ('include/forest', '**/*.hpp'), \n  ]), \n  visibility = [\n    'PUBLIC', \n  ],\n)\n","bazel":"","deps":[],"lock":[]}],"updated":"2018-11-16T17:30:32Z","updatedUpstream":"2021-01-11T09:29:44Z","contributors":[{"login":"JLospinoso","avatarUrl":"https://avatars2.githubusercontent.com/u/147698?u=f2715d73c9ba434d8063d7e2646a88fe6704391e&v=4"},{"login":"xorz57","avatarUrl":"https://avatars3.githubusercontent.com/u/1548352?u=7b246344d62349ee8a0857143ecba59d0a039b3e&v=4"},{"login":"njlr","avatarUrl":"https://avatars2.githubusercontent.com/u/1577531?u=b805a63f8054b62169749f2c9d2e89eb53af57d7&v=4"},{"login":"MatusKysel","avatarUrl":"https://avatars2.githubusercontent.com/u/6115866?u=b0ea0001e07b29956a81d64008e02037e6f98f30&v=4"},{"login":"codacy-badger","avatarUrl":"https://avatars1.githubusercontent.com/u/23704769?u=21e928698454bf73cc4411e14226b3847d39703a&v=4"},{"login":"VivekReddy98","avatarUrl":"https://avatars0.githubusercontent.com/u/25481823?u=73fe2c85c4cb29d781067bcb12a7f253bbfdb1b2&v=4"},{"login":"ms10398","avatarUrl":"https://avatars1.githubusercontent.com/u/26259547?u=d3aecd7df37410cb23692436cf741dada6511645&v=4"}],"fundingLinks":[],"contactLinks":[],"stars":146,"forks":34,"topics":["template-library","header-only","avl-tree","data-structures","library","binary-search-tree","cmake","cpp","cpp17","trie"]}},"__N_SSG":true}