_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[20],{Xv3O:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"default",(function(){return u}));var n=t("rePB"),c=t("Ff2n"),o=(t("q1tI"),t("7ljp")),s=t("ZDfL");function p(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?p(Object(t),!0).forEach((function(a){Object(n.a)(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}var r={title:"Experimenting with Small Buffer Optimization for C++ Lambdas",banner:"/posts/smallfun.jpeg",author:"Team Buckaroo",created:"2017-09-19T11:00:00.000Z",attribution:"Photo by Pascal Richier on Unsplash",__resourcePath:"blog/experimenting-with-smallbuffer-optimization.md",__scans:{},layout:"index"},N={frontMatter:r},l=s.a;function u(e){var a=e.components,t=Object(c.a)(e,["components"]);return Object(o.a)(l,m(m(m({},N),t),{},{components:a,mdxType:"MDXLayout"}),Object(o.a)("p",null,"We implemented SmallFun, an alternative to std::function, which implements ",Object(o.a)("em",{parentName:"p"},"fixed-size capture optimization")," (a form of small buffer optimization). Whilst SmallFun is a bit less generic than std::function, it is ",Object(o.a)("strong",{parentName:"p"},"3\u20135x faster")," in some benchmarks."),Object(o.a)("p",null,"You can ",Object(o.a)("a",m({parentName:"p"},{href:"https://github.com/LoopPerfect/smallfunction"}),"view the code on GitHub"),"."),Object(o.a)("p",null,Object(o.a)("img",m({parentName:"p"},{src:"https://cdn-images-1.medium.com/max/3840/1*Q2X85fCAiULppjBiV9SC5A.jpeg",alt:"Photo by [Pascal Richier](https://unsplash.com/photos/ECju13NcBzg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)"})),Object(o.a)("em",{parentName:"p"},"Photo by ",Object(o.a)("a",m({parentName:"em"},{href:"https://unsplash.com/photos/ECju13NcBzg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}),"Pascal Richier")," on ",Object(o.a)("a",m({parentName:"em"},{href:"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}),"Unsplash"))),Object(o.a)("h2",null,"Background"),Object(o.a)("p",null,"std::function is a convenient way to store lambdas with closures (also known as captures), whilst providing a unified interface. If you are coming from the OOP world, then it might be helpful to understand them as a generalization of the ",Object(o.a)("a",m({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Strategy_pattern"}),"strategy pattern"),"."),Object(o.a)("p",null,"Before std::function and lambdas, we would create a hand-crafted functor object like this:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"Functor")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// The context, or capture"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// For example, an int and an unsigned"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"unsigned")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// The lambda"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," j",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// For example, a small math function"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," j ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"This repository compares std::function, the hand-crafted Functor and SmallFun. We find that SmallFun performs better then std::function by being slighly less generic."),Object(o.a)("h2",null,"The Missed Opportunity of std::function"),Object(o.a)("p",null,"std::function uses a ",Object(o.a)("a",m({parentName:"p"},{href:"http://en.cppreference.com/w/cpp/language/pimpl"}),"PImpl pattern")," to provide an unified interface aross all functors for a given signature."),Object(o.a)("p",null,"For example, these two instances f and g have the same size, despite having different captures:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," x ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"2"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," y ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"9"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," z ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"4"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// f captures nothing"),"\nstd",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"function",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," f ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"1"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// g captures x, y and z"),"\nstd",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"function",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," g ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"="),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"x ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," z",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," y",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"This is because std::function stores the capture on the ",Object(o.a)("em",{parentName:"p"},"heap"),". This unifies the size of all instances, but it is also an opportunity for optimization!"),Object(o.a)("h2",null,"How?"),Object(o.a)("p",null,"Instead of dynamically allocating memory on the ",Object(o.a)("em",{parentName:"p"},"heap"),", we can place the function object (including its virtual table) into a preallocated location on the ",Object(o.a)("em",{parentName:"p"},"stack"),"."),Object(o.a)("p",null,"This is how we implemented SmallFun, which is used much like std::function:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// A SmallFun with a size of 64 bytes"),"\nSmallFun",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"unsigned"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," j",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"64"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," f ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," j",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," j ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("h2",null,"Benchmarks"),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",m({parentName:"tr"},{align:null}),"Test"),Object(o.a)("th",m({parentName:"tr"},{align:null}),"Time"),Object(o.a)("th",m({parentName:"tr"},{align:null}),"Note"))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"functor"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"191 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"Baseline that's the best we could do: a hand-crafted functor")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf32"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"312 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"This is big enough to store 2 ints")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf64"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"369 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf128"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"346 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf256"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"376 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf512"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"503 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf1024"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"569 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"sf2048"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"870 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",m({parentName:"tr"},{align:null}),"std::function"),Object(o.a)("td",m({parentName:"tr"},{align:null}),"1141 ns"),Object(o.a)("td",m({parentName:"tr"},{align:null}))))),Object(o.a)("h2",null,"The Test"),Object(o.a)("p",null,"To test how quickly we can allocate and call functors, we will be saving all the many instances in a vector and executing them in a loop. The results are saved into another vector to ensure that the optimizer does not optimize away what we are testing."),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"stdFunction"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"benchmark",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"State",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," state",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"unsigned")," N ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"100"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n \n  std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"vector",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"function",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"unsigned"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," j",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">>")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"fs"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"vector",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"r"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"while")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"state",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"KeepRunning"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    \n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"for")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"++"),"i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n      fs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),"i",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," j",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// assign to the type-erased container"),"\n        ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," i ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," j ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," N",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n      ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n    \n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," j ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n    std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"transform"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"fs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"begin"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," fs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"end"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," r",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"begin"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"auto")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"f"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"j",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"++"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// eval the function objects"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.a)("h2",null,"SmallFun Implementation Details"),Object(o.a)("p",null,"To implement SmallFun, we need to combine three C++ patterns: ",Object(o.a)("a",m({parentName:"p"},{href:"https://akrzemi1.wordpress.com/2013/11/18/type-erasure-part-i/"}),"type-erasure"),", ",Object(o.a)("a",m({parentName:"p"},{href:"http://en.cppreference.com/w/cpp/language/pimpl"}),"PImpl")," and ",Object(o.a)("a",m({parentName:"p"},{href:"https://stackoverflow.com/a/222578/1256041"}),"placement-new"),"."),Object(o.a)("h3",null,"Type-erasure"),Object(o.a)("p",null,"Type-erasure unifies many implementations into one interface. In our case, every lambda (or functor) has a custom call operator and destructor. We need to automatically generate an implementation for any type the API consumer will be using."),Object(o.a)("p",null,"This shall be our public interface:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"Concept")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ReturnType ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ReturnType ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Concept"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"And for any callable type with a given signature:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"F"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"struct")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"Model")," final ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":")," Concept",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  \n  F f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Model"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"F ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"f"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n    \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ReturnType ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"f"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n  \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ReturnType ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"operator"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"f"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n  \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Model"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"Now we can use it the following way:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"auto")," lambda ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int")," x",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"return")," x",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"using")," lambdaType ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"decltype"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"lambda",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\nSFConcept",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," functor ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," Model",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"lambdaType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"lambda",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"This is quite cumbersome and error prone. The next step will be a container."),Object(o.a)("h3",null,"PImpl"),Object(o.a)("p",null,"PImpl seperates, hides, manages the lifetime of an actual implementation and exposes a limited public API."),Object(o.a)("p",null,"A straightforward implementation could look like this:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"Function"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n  std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"shared_ptr",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"Concept",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),","),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">>")," pimpl",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  \n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"public"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Function"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"F"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Function"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"F ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"pimpl"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," SFModel",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"F",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// heap allocation"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"Function"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"default"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"This is more or less how std::function is implemented."),Object(o.a)("p",null,"So how do we remove the heap allocation?"),Object(o.a)("h3",null,"Placement-new"),Object(o.a)("p",null,"Placement-new allocates memory at a given address. For example:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"char")," memorypool",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"64"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," a ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"memorypool",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"4"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," b ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"memorypool ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"+")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"sizeof"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"4"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"int"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"4"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"assert"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"a",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"==")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"memorypool",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"assert"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"b",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"==")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"memorypool",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"32"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("h3",null,"Putting it All Together"),Object(o.a)("p",null,"Now we only need to do minor changes to remove the heap allocation:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"SmallFun"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"char")," memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"["),"SIZE",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"]"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  \n",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"public"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"class")," ",Object(o.a)("span",m({parentName:"code"},{className:"token class-name"}),"F"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"SmallFun"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"F ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," \n    ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),":")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," Model",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"F",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"assert"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"sizeof"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Model",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"F",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<")," SIZE ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";")," \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"SmallFun"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"if")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"allocated",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"concept"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),"memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"->"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"~"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"concept"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}")," \n",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(o.a)("p",null,"As you may noticed, if the Model<...>\u2019s size is greater than SIZE, bad things will happen! An assert will only catch this at run-time, when it is to late\u2026 Luckily, this can be caught at compile-time using enable_if_t."),Object(o.a)("p",null,"But first, what about the copy constructor?"),Object(o.a)("h3",null,"Copy Constructor"),Object(o.a)("p",null,"Unlike the implementation of std::function, we cannot just copy or move a std::shared_ptr. We also cannot just copy bitwise the memory, since the lambda may manage a resource that can only be released once due to a side-effect. Therefore, we need to make the model able to copy-construct itself for a given memory location."),Object(o.a)("p",null,"We just need to add:"),Object(o.a)("pre",m({},{className:"language-cpp"}),Object(o.a)("code",m({parentName:"pre"},{className:"language-cpp"}),"  ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// ..."),"\n\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"virtual")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void")," ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"copy"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"void"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"*")," memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"new")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," Model",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),"F",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ReturnType",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"f",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"template"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"unsigned")," rhsSize",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," std",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"::"),"enable_if_t",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"rhsSize ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<=")," size",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"bool"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.a)("span",m({parentName:"code"},{className:"token number"}),"0"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"SmallFun"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"SmallFun",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"<"),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"ReturnType"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"Xs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),",")," rhsSize",Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),">")," ",Object(o.a)("span",m({parentName:"code"},{className:"token keyword"}),"const"),Object(o.a)("span",m({parentName:"code"},{className:"token operator"}),"&")," rhs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"{"),"\n    rhs",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"."),Object(o.a)("span",m({parentName:"code"},{className:"token function"}),"copy"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"("),"memory",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),")"),Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(o.a)("span",m({parentName:"code"},{className:"token punctuation"}),"}"),"\n \n  ",Object(o.a)("span",m({parentName:"code"},{className:"token comment"}),"// ..."),"\n")),Object(o.a)("h2",null,"Further Remarks"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("p",{parentName:"li"},"As we saw, we can verify at compile-time if a Lambda will fit in our memory. If it does not, we could provide a fallback to heap allocation.")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("p",{parentName:"li"},"A more generic implementation of SmallFun would take a generic allocator.")),Object(o.a)("li",{parentName:"ul"},Object(o.a)("p",{parentName:"li"},"We noticed that we cannot copy the memory just by copying the memory bitwise. However using type-traits, we could check if\nthe underlying data-type is POD and then copy bitwise."))),Object(o.a)("h2",null,"Since You\u2019re Here\u2026"),Object(o.a)("p",null,"We created ",Object(o.a)("a",m({parentName:"p"},{href:"https://github.com/LoopPerfect/buckaroo"}),"Buckaroo")," to make it easier to integrate C++ libraries. If you would like try it out, the best place to start is ",Object(o.a)("a",m({parentName:"p"},{href:"http://buckaroo.readthedocs.io/en/latest/"}),"the documentation"),". You can browse the existing packages on ",Object(o.a)("a",m({parentName:"p"},{href:"https://buckaroo.pm/"}),"Buckaroo.pm")," or request more over on ",Object(o.a)("a",m({parentName:"p"},{href:"https://github.com/LoopPerfect/buckaroo-wishlist"}),"the wishlist"),".\n",Object(o.a)("a",m({parentName:"p"},{href:"https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7"}),Object(o.a)("strong",{parentName:"a"},"Approaches to C++ Dependency Management, or Why We Built Buckaroo"),Object(o.a)("em",{parentName:"a"},"C++ is an unusual language in that it does not yet have a dominant package manager (we\u2019re working on it!). As a result\u2026"),"hackernoon.com"),"\n",Object(o.a)("a",m({parentName:"p"},{href:"https://hackernoon.com/error-handling-in-c-or-why-you-should-use-eithers-in-favor-of-exceptions-and-error-codes-f0640912eb45"}),Object(o.a)("strong",{parentName:"a"},"Error Handling in C++ or: Why You Should Use Eithers in Favor of Exceptions and Error-codes"),Object(o.a)("em",{parentName:"a"},"TL;DR"),"hackernoon.com")))}u.isMDXComponent=!0},zg3I:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/experimenting-with-smallbuffer-optimization",function(){return t("Xv3O")}])}},[["zg3I",0,2,1,3,4]]]);