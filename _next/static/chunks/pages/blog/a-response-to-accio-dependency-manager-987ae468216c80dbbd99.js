_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[9],{"B/2l":function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/a-response-to-accio-dependency-manager",function(){return t("eyv4")}])},eyv4:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return c})),t.d(a,"default",(function(){return h}));var n=t("rePB"),o=t("Ff2n"),r=(t("q1tI"),t("7ljp")),i=t("ZDfL");function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){Object(n.a)(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}var c={title:'A Response to "Accio Dependency Manager"',created:"2019-02-22T22:00:00.000Z",author:"Team Buckaroo",summary:"There is a Medium post making the rounds at the moment about a dream C++ dependency manager. It's well written, and definitely worth a read. Here's our take. ",banner:"https://raw.githubusercontent.com/JamitLabs/Accio/stable/Logo.png",__resourcePath:"blog/a-response-to-accio-dependency-manager.md",__scans:{},layout:"index"},u={frontMatter:c},p=i.a;function h(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(r.a)(p,l(l(l({},u),t),{},{components:a,mdxType:"MDXLayout"}),Object(r.a)("p",null,"There is a Medium post making the rounds at the moment about a dream C++ dependency manager. It's well written, and definitely worth a read: ",Object(r.a)("a",l({parentName:"p"},{href:"https://medium.com/@corentin.jabot/accio-dependency-manager-b1846e1caf76"}),"Accio Dependency Manager"),"."),Object(r.a)("p",null,"As you might imagine, we have spent a ",Object(r.a)("em",{parentName:"p"},"lot of time"),' thinking about these issues. Package management is much harder in C++ than in other languages, and the design of Buckaroo went through quite a few iterations! Here\'s our take on the points discussed in "Accio Dependency Manager".'),Object(r.a)("h2",null,'"A sane naming scheme"'),Object(r.a)("p",null,"We agree! That's why packages in Buckaroo are one of two kinds:"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"A (normalized) URL to their project on GitHub, BitBucket or GitLab. For example: ",Object(r.a)("inlineCode",{parentName:"li"},"github.com/LoopPerfect/neither")),Object(r.a)("li",{parentName:"ul"},"A simple organization and project pair, for ad-hoc dependencies. For example: ",Object(r.a)("inlineCode",{parentName:"li"},"myorg/myproject"))),Object(r.a)("h2",null,'"A sane versioning scheme"'),Object(r.a)("p",null,"Most Buckaroo packages use ",Object(r.a)("em",{parentName:"p"},"sem-ver"),", as you suggest. However, we think it is also important to be able to depend on versions that are not yet ready to be given a sem-ver. For this reason, packages can also depend directly on Git branches and tags. It is always clear what a version refers to because you can view it in Git."),Object(r.a)("p",null,"The version DSL is ",Object(r.a)("a",l({parentName:"p"},{href:"https://github.com/LoopPerfect/buckaroo/wiki/Version-Constraints-DSL"}),"described in our docs"),"."),Object(r.a)("h2",null,'"A Serious dependency Manager"'),Object(r.a)("p",null,"This is a big difference between Buckaroo and other package managers. We don't want to host your packages and we don't have to. This is because ",Object(r.a)("a",l({parentName:"p"},{href:"https://github.com/LoopPerfect/buckaroo/wiki/Git-as-a-Package-Registry"}),"Buckaroo packages live directly in source-control"),", which is a piece of infrastructure your company already has."),Object(r.a)("p",null,"Furthermore, after the packages have been resolved, we save the exact hashes of each. Future installations will use ",Object(r.a)("em",{parentName:"p"},"precisely")," the same versions you installed the first time."),Object(r.a)("h2",null,'"A source-based dependency manager"'),Object(r.a)("p",null,"We agree in principle, and Buckaroo is ",Object(r.a)("em",{parentName:"p"},"source-first"),"."),Object(r.a)("p",null,"But there is one big exception: proprietary packages that are only available in binary form. For these we support packages that download the binaries during the build process. The hash is locked-down and always verified."),Object(r.a)("h2",null,'"But compile times are slow?"'),Object(r.a)("p",null,"Not when you use a build-system with ",Object(r.a)("a",l({parentName:"p"},{href:"https://buckbuild.com/concept/what_makes_buck_so_fast.html"}),"hermetically sealed build-steps and network caching"),". This is the main reason that we use ",Object(r.a)("a",l({parentName:"p"},{href:"https://buckbuild.com/"}),"Buck")," for packages. CMake does not scale well here."),Object(r.a)("h2",null,'"What\u2019s a dependency anyway?"'),Object(r.a)("p",null,"A package might be a signed tar-ball, but that is only half the story. We need to give packages sensible names, and that implies a registry of some kind. Buckaroo ",Object(r.a)("a",l({parentName:"p"},{href:"https://github.com/LoopPerfect/buckaroo/wiki/Git-as-a-Package-Registry"}),"uses existing Git providers")," for these names."),Object(r.a)("p",null,"OK, sure, GitHub is a single-point of failure. However, it is a single-point of failure that most developers ",Object(r.a)("em",{parentName:"p"},"already have"),". We think depending on GitHub (or BitBucket, or GitLab) is completely reasonable. For the paranoid, Buckaroo works equally well with a self-hosted Git instance."),Object(r.a)("h2",null,'"Building dependencies"'),Object(r.a)("p",null,"We need a build-system."),Object(r.a)("p",null,"To see why, consider what we need to be able to do to build each package:"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"Set the toolchain"),Object(r.a)("li",{parentName:"ul"},"Set any flags for compilation"),Object(r.a)("li",{parentName:"ul"},"Build a shared library (where applicable)"),Object(r.a)("li",{parentName:"ul"},"Build a static library (where applicable)"),Object(r.a)("li",{parentName:"ul"},"Find the headers provided by the library (generated and source-files)"),Object(r.a)("li",{parentName:"ul"},"Figure out which artifacts are required from its dependencies (so we can build those, and only those)"),Object(r.a)("li",{parentName:"ul"},"Link static and shared libraries from its dependencies (where does the package expect them to be?)"),Object(r.a)("li",{parentName:"ul"},"Extract the list of translation-units (generated and source-files) for IDE integration"),Object(r.a)("li",{parentName:"ul"},"Cache the build steps so that from-source builds are practical"),Object(r.a)("li",{parentName:"ul"},"Balance memory and CPU usage across the build so that the whole thing doesn't fall over (hello ",Object(r.a)("inlineCode",{parentName:"li"},"make -j12"),")"),Object(r.a)("li",{parentName:"ul"},"Ensure unrelated packages don't interfere with each-other's build process (hermetically sealed builds)")),Object(r.a)("p",null,'If you have implemented all of these things, then... you have implemented a build-system. You might call this just a "wrapper" script that defers work to another build-system, but this is analagous to how CMake relies on Make. It\'s another layer of indirection.'),Object(r.a)("p",null,"Fixing C++ build-system fragmentation is a huge challenge. Luckily, the vast majority of builds are actually quite simple (Boost can be described entirely with globs, for example). We are going to open-source ",Object(r.a)("a",l({parentName:"p"},{href:"https://buildinfer.loopperfect.com/"}),"automated build-system transpilation tools")," in the very near future. Stay tuned!"),Object(r.a)("p",null,"And of course you can always call one build-system from other. It's hacky, but in a pinch it can work."),Object(r.a)("h2",null,"Summing Up"),Object(r.a)("h3",null,'"Decentralized"'),Object(r.a)("p",null,"Check!"),Object(r.a)("h3",null,'"Have discovery and aggregation features that are or feel centralized, so that end users don\u2019t have to handle URL/URI."'),Object(r.a)("p",null,"We have GitHub search, but Buckaroo could be improved in this aspect. More tools are coming!"),Object(r.a)("h3",null,'"Impervious to the loss of nodes, robust and transparently mirrored"'),Object(r.a)("p",null,"We rely on GitHub, BitBucket and GitLab here. This is a reasonable trade-off given that people already depend on them. Self-hosted Git is fully supported. Buckaroo works offline if your cache is populated."),Object(r.a)("h3",null,'"Based on strong security foundations"'),Object(r.a)("p",null,"We hash everything, and access-control leverages your existing Git key infrastructure. Using Git commits you have full audits of every build."),Object(r.a)("h3",null,'"Orthogonal to build systems"'),Object(r.a)("p",null,"A nice idea, but not really compatible with from-source packages. This approach will lead to a reimplementation of build-system features in meta-meta-build-systems. Build-system transpilation is a better approach in the long run (not to mention the other benefits)."),Object(r.a)("h3",null,'"Only handling sources, not binaries"'),Object(r.a)("p",null,"We are source-first, but not handling binaries is impractical. We always check the hash of binaries."),Object(r.a)("h3",null,'"Easy to use for a variety of use cases."'),Object(r.a)("p",null,"We think so, but would love your feedback! \ud83e\udd20"))}h.isMDXComponent=!0}},[["B/2l",0,2,1,3,4]]]);